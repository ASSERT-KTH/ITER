bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  +  1,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field  +  1,  round);	  val.set(Calendar.YEAR,    field    +    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
2	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  round,  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  round,  3);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  round,  3);	  val.set(Calendar.MONTH,    field,    3);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
3	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND)+  2;	  Date    value    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND)+  3;	  Date    value    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND)/  1;	  Date    value    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  300000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  300000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  300000000)  {	  if    (val.get(Calendar.YEAR)>    300000000)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
7	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  30000000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  30000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  30000000)  {	  if    (val.get(Calendar.YEAR)>    300000000)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
8	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  1000000)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
9	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  1000000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  1000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  >=  1000000)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
10	[BUG]  [BUGGY]  val.setTime(new  Date(field,  round));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.setTime(new  Date(field,  round));  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.setTime(new  Date(field,  round));	  val.setTime(new    Date(field));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
11	[BUG]  [BUGGY]  val.setTime(new  Date(field),  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.setTime(new  Date(field),  round);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.setTime(new  Date(field),  round);	  val.setTime(new    Date(field));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
12	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.MONTH,  round);	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)+  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.MONTH)+  1;	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)-  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.MONTH)-  1;	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  field);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.MONTH,  field);	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DAY_OF_MONTH,  round);	  Date    value    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH)+  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DAY_OF_MONTH)+  1;	  Date    value    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DAY_OF_MONTH  +  1);	  Date    value    =    val.get(Calendar.DAY_OF_MONTH);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR,  round  +  1);	  Date    value    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
20	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR  +  1,  round);	  Date    value    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
21	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
22	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field;	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
23	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  2;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
24	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  3;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
25	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)/  1;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
26	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  round  -  1  +  1);	  val.set(Calendar.YEAR,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
27	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  round  -  1  -  1);	  val.set(Calendar.YEAR,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
28	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  field);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.HOUR_OF_DAY,  round);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  2;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  3;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
33	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)/  1;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
34	[BUG]  [BUGGY]  int[][]  fields  =  val.getFields();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getFields();  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.getFields();	  int[][]    fields    =    val.getCalendarFields();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
35	[BUG]  [BUGGY]  int[][]  fields  =  val.getCalendarFields(field);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getCalendarFields(field);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.getCalendarFields(field);	  int[][]    fields    =    val.getCalendarFields();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
36	[BUG]  [BUGGY]  int[][]  fields  =  val.getValues();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getValues();  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.getValues();	  int[][]    fields    =    val.getCalendarFields();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  1000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  1000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  1000)  {	  if    (val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
38	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  100000)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  100000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  100000)  {	  if    (val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
39	[BUG]  [BUGGY]  val.set(field,  Calendar.MILLISECOND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.MILLISECOND);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  Calendar.MILLISECOND);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
40	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  field,  round);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
41	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  3100000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  3100000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  3100000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
42	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND,  field);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND,  field  +  1);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
44	[BUG]  [BUGGY]  Calendar  value  =  val.get(Calendar.SECOND,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Calendar  value  =  val.get(Calendar.SECOND,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Calendar  value  =  val.get(Calendar.SECOND,  field);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  val.set(field,  field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  field,  round);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
46	[BUG]  [BUGGY]  val.set(val,  field,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(val,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(val,  field,  round);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
47	[BUG]  [BUGGY]  val.set(field,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  round  +  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
48	[BUG]  [BUGGY]  val.set(field,  round,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  round,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  round,  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
49	[BUG]  [BUGGY]  val.set(this.field,  this.field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(this.field,  this.field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(this.field,  this.field);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
50	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR)+  2;	  Date    value    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
51	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR)+  3;	  Date    value    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
52	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR)/  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR)/  1;	  Date    value    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
53	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE),  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE),  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE),  field);	  Date    date    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
54	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE),  field,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE),  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE),  field,  round);	  Date    date    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
55	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)+  1,  round);	  Date    date    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
56	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  ==  0)  {	  if    (val.get(Calendar.YEAR)    ==    1000)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field,  round);	  int[][]    fields    =    val.get(Calendar.SECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
58	[BUG]  [BUGGY]  int[][]  fields  =  val.get(field,  round);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(field,  round);	  int[][]    fields    =    val.get(Calendar.SECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
59	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR,  field);	  Date    value    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
60	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MONTH,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MONTH,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MONTH,  field);	  Date    value    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
61	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DAY_OF_MONTH,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DAY_OF_MONTH,  field);	  Date    value    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
62	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND,  round);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MILLISECOND,  round);	  Date    value    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
63	[BUG]  [BUGGY]  Date  value  =  val.get(field);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(field);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(field);	  Date    value    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
64	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND  +  1);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MILLISECOND  +  1);	  Date    value    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
65	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  10000000  ||  round  ==  Calendar.MILLISECOND)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
66	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  round,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  round,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  round,  1);	  val.set(Calendar.MONTH,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
67	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  2);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  2);	  val.set(Calendar.YEAR,    field,    3);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
68	[BUG]  [BUGGY]  val.set(0,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0,  field);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
69	[BUG]  [BUGGY]  val.set(0L,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0L,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0L,  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
70	[BUG]  [BUGGY]  val.set(1,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(1,  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
71	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  field  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  field  +  1);	  Date    date    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
72	[BUG]  [BUGGY]  Calendar  date  =  val.get(Calendar.DATE,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Calendar  date  =  val.get(Calendar.DATE,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Calendar  date  =  val.get(Calendar.DATE,  field);	  Date    date    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
73	[BUG]  [BUGGY]  if  (val.get(Calendar.MONTH)  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.MONTH)  ==  1)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.MONTH)  ==  1)  {	  if    (val.get(Calendar.YEAR)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE)+  2;	  Date    value    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE)+  3;	  Date    value    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE)/  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE)/  1;	  Date    value    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)!=  0)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)!=  0)  {	  if(val.get(Calendar.YEAR)!=    1000)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
78	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MONTH,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MONTH,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MONTH,  round);	  Date    value    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
79	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MONTH)+  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MONTH)+  1;	  Date    value    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
80	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MONTH)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MONTH)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MONTH)-  1;	  Date    value    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
81	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MONTH  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MONTH  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MONTH  +  1);	  Date    value    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
82	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  0,  round  -  1);	  val.set(Calendar.MONTH,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
83	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  0,  round  +  1);	  val.set(Calendar.MONTH,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
84	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.YEAR,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  Calendar.YEAR,  round);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  val.set(val,  Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(val,  Calendar.YEAR,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(val,  Calendar.YEAR,  round);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.YEAR,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  Calendar.YEAR,  1);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  1)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  1)  {	  if    (val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
88	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  0  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  0  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)>  0  ||  round  ==  Calendar.MILLISECOND)  {	  if    (val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
89	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(field));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(field));	  Date    value    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field,  round));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field,  round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field,  round));	  Date    value    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  field  +  1);	  Date    value    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)+  2;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
93	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)+  3;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
94	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)/  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)/  1;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
95	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  field,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  field,  round);	  Date    value    =    val.get(Calendar.DATE,    field);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
96	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  round  +  1);	  Date    value    =    val.get(Calendar.DATE,    field);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
97	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
98	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);	  int[][]    fields    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
99	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  field  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  field  -  1);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
100	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  field  +  1);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
101	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  round  -  1,  field);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
102	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE),  field);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE),  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE),  field);	  Date    value    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
103	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE),  field,  round);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE),  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE),  field,  round);	  Date    value    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
104	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  1,  round);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE)+  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE)+  1,  round);	  Date    value    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
105	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  round  -  1  -  1);	  val.set(Calendar.MONTH,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
106	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  round  -  1  +  1);	  val.set(Calendar.MONTH,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
107	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND,  round  +  1);	  Date    value    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
108	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  round  -  1);	  val.set(Calendar.YEAR,    field    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
109	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  -  1,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field  -  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field  -  1,  round);	  val.set(Calendar.YEAR,    field    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
110	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  field,  round);	  Date    date    =    val.get(Calendar.DATE,    field);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
111	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  round  +  1);	  Date    date    =    val.get(Calendar.DATE,    field);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
112	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);	  int[][]    fields    =    val.get(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
113	[BUG]  [BUGGY]  Date  value  =  val.getTime()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.getTime()  +  1;  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.getTime()  +  1;	  Date    value    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
114	[BUG]  [BUGGY]  Date  value  =  val.getMillis();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.getMillis();  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.getMillis();	  Date    value    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
115	[BUG]  [BUGGY]  Date  value  =  val.getDate();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.getDate();  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.getDate();	  Date    value    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
116	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
117	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  1,  round);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
118	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  4;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR)+  4;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR)+  4;	  Date    value    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
119	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  -  1);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
120	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  3);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  3);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  3);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
121	[BUG]  [BUGGY]  int[][]  fields  =  val.get(field  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(field  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
122	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  2800000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  ==  2800000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)  ==  2800000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
123	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  2800000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  >=  2800000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)  >=  2800000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
124	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  4);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  4);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  4);	  val.set(Calendar.MONTH,    field,    3);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
125	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)!=  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)!=  1)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)!=  1)  {	  if    (val.get(Calendar.YEAR)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
126	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  0)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  >=  0)  {	  if    (val.get(Calendar.YEAR)>    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
127	[BUG]  [BUGGY]  val.set(0L,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0L,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0L,  field);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
128	[BUG]  [BUGGY]  val.set(0,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0,  field  +  1);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
129	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR  -  1);	  Date    value    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
130	[BUG]  [BUGGY]  int[][]  fields  =  val.getCalendarFields(field,  round);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getCalendarFields(field,  round);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.getCalendarFields(field,  round);	  int[][]    fields    =    val.getCalendarFields();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
131	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  4;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  4;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  4;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
132	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)+  1  +  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)+  1  +  1;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
133	[BUG]  [BUGGY]  val.set(field,  round  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  round  -  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
134	[BUG]  [BUGGY]  val.set(field,  new  Date(round));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  new  Date(round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  new  Date(round));	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
135	[BUG]  [BUGGY]  val.set(field,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  null);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  null);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
136	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  100000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  100000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  >=  100000)  {	  if    (val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
137	[BUG]  [BUGGY]  val.setTime(new  Date(field),  round));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.setTime(new  Date(field),  round));  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.setTime(new  Date(field),  round));	  val.setTime(new    Date(field));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
138	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  300000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  300000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  >=  300000000)  {	  if    (val.get(Calendar.YEAR)>    300000000)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
139	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)!=  300000000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)!=  300000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)!=  300000000)  {	  if    (val.get(Calendar.YEAR)>    300000000)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
140	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)!=  1000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)!=  1000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)!=  1000000)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
141	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND)-  1;	  Date    value    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
142	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  4;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  4;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  4;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
143	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND  +  1,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND  +  1,  round);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
144	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MINUTE,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MINUTE,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MINUTE,  field);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
145	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field));	  Date    value    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
146	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  10000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  10000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)  >=  10000000)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
147	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)!=  10000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)!=  10000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if  (val.get(Calendar.YEAR)!=  10000000)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
148	[BUG]  [BUGGY]  val.set(field,  Calendar.MONTH);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.MONTH);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  Calendar.MONTH);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
149	[BUG]  [BUGGY]  val.set(0,  this.field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  this.field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0,  this.field);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
150	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(field));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(field));	  Date    date    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
151	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field,  round));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field,  round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field,  round));	  Date    date    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
152	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeMultiply(field));	  Date    date    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
153	[BUG]  [BUGGY]  Date  value  =  val.getValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.getValue();  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.getValue();	  Date    value    =    val.getTime();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
154	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.MILLISECOND)+  1;  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.MILLISECOND)+  1;	  Date    value    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
155	[BUG]  [BUGGY]  val.set(0,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(0,  round  -  1);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(round));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(round));	  Date    value    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
157	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  this.field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR,  this.field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR,  this.field);	  Date    value    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
158	[BUG]  [BUGGY]  val.set(field,  Calendar.DECEMBER);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.DECEMBER);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(field,  Calendar.DECEMBER);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
159	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  round  -  1,  round  +  1);	  val.set(Calendar.YEAR,    field,    round    +    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
160	[BUG]  [BUGGY]  Date  value  =  val.set(Calendar.MILLISECOND,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.set(Calendar.MILLISECOND,  round);  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.set(Calendar.MILLISECOND,  round);	  Date    value    =    val.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
161	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  100000  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  100000  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  100000  ||  round  ==  Calendar.MILLISECOND)  {	  if    (val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
162	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  100000  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  100000  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  100000  ||  round  >  Calendar.MILLISECOND)  {	  if    (val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
163	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  match);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  match);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  match);	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
164	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)-  1,  round);	  Date    date    =    val.get(Calendar.DATE),    round);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
165	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(round));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(round));	  Date    date    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
166	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(field));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeNegate(field));	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
167	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeMultiply(field));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeMultiply(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeMultiply(field));	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
168	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeAdd(field));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeAdd(field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  FieldUtils.safeAdd(field));	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
169	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  100)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  100)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  100)  {	  if(val.get(Calendar.YEAR)!=    1000)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
170	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  FieldUtils.safeNegate(round));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  FieldUtils.safeNegate(round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  FieldUtils.safeNegate(round));	  val.set(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
171	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  FieldUtils.safeAdd(round));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  FieldUtils.safeAdd(round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  FieldUtils.safeAdd(round));	  val.set(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
172	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  round  -  1,  1);	  val.set(Calendar.MONTH,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
173	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.YEAR)-  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.YEAR)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.YEAR)-  1;	  Date    value    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
174	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  this.field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  this.field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND,  this.field);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
175	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  match);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.SECOND,  match);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.SECOND,  match);	  Date    value    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
176	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  1000000  ||  round  ==  Calendar.MILLISECOND)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
177	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  >  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  >  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  1000000  ||  round  >  Calendar.MILLISECOND)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
178	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round)+  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round)+  1;	  int[][]    fields    =    val.get(Calendar.SECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
179	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(round));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE,  FieldUtils.safeNegate(round));	  Date    value    =    val.get(Calendar.DATE,    round);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
180	[BUG]  [BUGGY]  Date  value  =  val.get(Calendar.DATE)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  value  =  val.get(Calendar.DATE)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  value  =  val.get(Calendar.DATE)-  1;	  Date    value    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
181	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.YEAR,  field,  round  -  1,  1);	  val.set(Calendar.YEAR,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
182	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  round  +  1);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
183	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  this.field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  this.field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  this.field,  round);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
184	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  this.field  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  this.field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MILLISECOND,  this.field  +  1);	  val.set(Calendar.MILLISECOND,    this.field);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
185	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  round  -  1,  round  +  1);	  val.set(Calendar.MONTH,    field,    round    +    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
186	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  1,  round);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	val.set(Calendar.MONTH,  field,  1,  round);	  val.set(Calendar.MONTH,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
187	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  2800000000  ||  round  ==  Calendar.MILLISECOND)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  2800000000  ||  round  ==  Calendar.MILLISECOND)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	if(val.get(Calendar.YEAR)>  2800000000  ||  round  ==  Calendar.MILLISECOND)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
188	[BUG]  [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  Date  date  =  val.get(Calendar.DATE)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }  if  (field  ==  Calendar.MILLISECOND)  {  return;  }      [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  done  offsetSet  round  roundUp  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  time  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  millisecs  min  minutes  offset  seconds  Date  date  	projects/Lang53/src/java/org/apache/commons/lang/time/DateUtils.java	0.4082482904638631	621	621	1	replace	Date  date  =  val.get(Calendar.DATE)-  1;	  Date    date    =    val.get(Calendar.DATE)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
