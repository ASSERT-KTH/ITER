bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  2;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  2;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  2;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  4;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  4;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  4;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  8;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  8;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  8;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  1;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  1;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  100.0;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  100.0;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  100.0;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  10;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  10;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  10;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.data,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.data,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.data,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  this.in.read();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  this.in.read();  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2d,  0,  blockSize);  this.in.read();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  if(isFirstStream)  {  throw  new  IOException( "BZip2  block  size  is  invalid ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  throw  new  IOException( "BZip2  block  size  is  invalid ");  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  throw  new  IOException( "BZip2  block  size  is  invalid ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  System.arraycopy(temp_charArray2d,  0,  temp_charArray2d,  0,  blockSize);  }  else  {  System.arraycopy(temp_charArray2,  0,  this.in,  temp_charArray2d,  0,  blockSize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  4;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  4;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  4;	  this.blockSize100k    =    blockSize    -    2;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  6;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  6;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  6;	  this.blockSize100k    =    blockSize    -    2;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  8;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  8;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  8;	  this.blockSize100k    =    blockSize    -    10;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  &&  blockSize  >  '9';  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  &&  blockSize  >  '9';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  &&  blockSize  >  '9';	  this.blockSize100k    =    blockSize    -    '0'    ||    blockSize    >    '9';    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  '0'  ||  blockSize  >  '9';  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  '0'  ||  blockSize  >  '9';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  '0'  ||  blockSize  >  '9';	  this.blockSize100k    =    blockSize    -    '0'    ||    blockSize    >    '9';    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  blockSize  >  '9';  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  blockSize  >  '9';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  blockSize  >  '9';	  this.blockSize100k    =    blockSize    -    '0'    ||    blockSize    >    '9';    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  blockSize  +  '9';  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  blockSize  +  '9';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  blockSize  +  '9';	  this.blockSize100k    =    blockSize    -    '0'    ||    blockSize    >    '9';    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  ||  blockSize  <  '9';  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  ||  blockSize  <  '9';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  ||  blockSize  <  '9';	  this.blockSize100k    =    blockSize    -    '0'    ||    blockSize    >    '9';    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  1L;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  1L;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  1L;	  this.blockSize100k    =    blockSize    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  '0'  +  2;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  '0'  +  2;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  '0'  +  2;	  this.blockSize100k    =    blockSize    -    '0'    +    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  8;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  8;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  8;	  this.blockSize100k    =    blockSize    -    '0'    +    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  10;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  10;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  10;	  this.blockSize100k    =    blockSize    -    '0'    +    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  9;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  9;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  9;	  this.blockSize100k    =    blockSize    -    9;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  3;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  3;	  this.blockSize100k    =    blockSize    -    9;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  '0'  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  '0'  +  1;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  '0'  +  1;	  this.blockSize100k    =    blockSize    -    '0'    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  9;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  9;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  9;	  this.blockSize100k    =    blockSize    -    '0'    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  6;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  6;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  6;	  this.blockSize100k    =    blockSize    -    '0'    +    4;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  5;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  5;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  5;	  this.blockSize100k    =    blockSize    -    '0'    +    4;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  3;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  3;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  3;	  this.blockSize100k    =    blockSize    -    '0'    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  blockSize  -  '9';  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  +  blockSize  -  '9';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  +  blockSize  -  '9';	  this.blockSize100k    =    blockSize    -    '0'    ||    blockSize    >    '9';    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  3;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  3;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  3;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  Integer  bsLive  =  getAndMoveToFrontDecode_yy(blockSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  Integer  bsLive  =  getAndMoveToFrontDecode_yy(blockSize);  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	Integer  bsLive  =  getAndMoveToFrontDecode_yy(blockSize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  if(isFirstStream)  {  throw  new  IOException( "BZip2  is  not  in  the  BZip2  format ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  throw  new  IOException( "BZip2  is  not  in  the  BZip2  format ");  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  throw  new  IOException( "BZip2  is  not  in  the  BZip2  format ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  int  bsBuff  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  int  bsBuff  =  this.in.read();  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	int  bsBuff  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  Integer  bsLive  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  Integer  bsLive  =  getAndMoveToFrontDecode_yy();  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	Integer  bsLive  =  getAndMoveToFrontDecode_yy();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  if(isFirstStream)  {  throw  new  IOException( "BZip2  block  size  is  invalid. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(isFirstStream)  {  throw  new  IOException( "BZip2  block  size  is  invalid. ");  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(isFirstStream)  {  throw  new  IOException( "BZip2  block  size  is  invalid. ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  START_BLOCK_STATE;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  START_BLOCK_STATE;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  START_BLOCK_STATE;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  10  +  '0';  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  10  +  '0';  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  10  +  '0';	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  /  1024;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  /  1024;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  /  1024;	  this.blockSize100k    =    blockSize    /    '0';    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.read();  i  <  len;  ++i)  {  this.in.read();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.read();  i  <  len;  ++i)  {  this.in.read();  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.read();  i  <  len;  ++i)  {  this.in.read();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  this.in.read();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  this.in.read();  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(this.in!=  null)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  this.in.read();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0;  i  <  this.in.read();  ++i)  {  this.in.read();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0;  i  <  this.in.read();  ++i)  {  this.in.read();  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(this.in!=  null)  {  for(int  i  =  0;  i  <  this.in.read();  ++i)  {  this.in.read();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0;  i  <  blockSize;  i++)  {  this.in.read();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0;  i  <  blockSize;  i++)  {  this.in.read();  }  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	if(this.in!=  null)  {  for(int  i  =  0;  i  <  blockSize;  i++)  {  this.in.read();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(this.in,  0,  this.temp_charArray2d,  0,  blockSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  System.arraycopy(this.in,  0,  this.temp_charArray2d,  0,  blockSize);  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	System.arraycopy(this.in,  0,  this.temp_charArray2d,  0,  blockSize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  this.in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.in.read();  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  *  2;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  IOException(isFirstStream  ?     "Stream  is  not  in  the  BZip2  format   "  :     "Garbage  after  a  valid  BZip2  stream   ");  }  int  blockSize  =  this.in.read();  if  ((blockSize  <  '1')  ||  (blockSize  >  '9'))  {  throw  new  IOException(   "BZip2  block  size  is  invalid   ");  }    [BUGGY]  this.blockSize100k  =  blockSize  -  '0'  *  2;  [BUGGY]      this.bsLive  =  0;  this.computedCombinedCRC  =  0;  return  true;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  init  [RETURN_TYPE]  boolean  boolean  isFirstStream  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  i  last  len  magic0  magic1  magic2  nInUse  nInUseShadow  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  isFirstStream  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	250	250	1	replace	this.blockSize100k  =  blockSize  -  '0'  *  2;	  this.blockSize100k    =    blockSize    -    '0'    +    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
