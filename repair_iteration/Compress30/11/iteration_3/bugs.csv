bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(b);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
2	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(destOffs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
3	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(b,  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(b,  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(b,  hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
4	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi,  b);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(len);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(len);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi  +  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi  +  1);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  ((  hi  =  read0())  >=  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >=  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >=  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
12	[BUG]  [BUGGY]  ((  offs  =  read0())  >=  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  offs  =  read0())  >=  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  offs  =  read0())  >=  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
13	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  1)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  1)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  1;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  2  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  2  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1L  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1L  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  1L  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  b;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  b;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  18)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  18)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  18)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  24)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  24)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  24)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  dest[destOffs++]  =  hi  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  hi  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  hi  +  1;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
23	[BUG]  [BUGGY]  dest[destOffs++]  =  b  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b  +  2;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b  +  2;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
24	[BUG]  [BUGGY]  destOffs[destOffs++]  =  hi  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  destOffs[destOffs++]  =  hi  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	destOffs[destOffs++]  =  hi  +  1;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
25	[BUG]  [BUGGY]  dest[destOffs++]  =  b  +  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b  +  4;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b  +  4;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
26	[BUG]  [BUGGY]  dest[destOffs++]  =  b  +  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b  +  3;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b  +  3;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
27	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)destOffs  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)destOffs  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)destOffs  +  1;	  dest[destOffs++]    =    (byte)destOffs;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
28	[BUG]  [BUGGY]  dest[0]  =  (byte)destOffs;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[0]  =  (byte)destOffs;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[0]  =  (byte)destOffs;	  dest[destOffs++]    =    (byte)destOffs;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
29	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs,  b);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
30	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  destOffs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
31	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  len);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  len);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
32	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(b,  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(b,  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(b,  hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
33	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  len);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  len);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
34	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  destOffs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
35	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs,  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs,  hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
36	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  len);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  len);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  -  len);	  dest[destOffs++]    =    (byte)(len    -    hi);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
37	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  -  hi  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  -  hi  +  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  -  hi  +  1);	  dest[destOffs++]    =    (byte)(len    -    hi);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
38	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  -  hi);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  -  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(destOffs  -  hi);	  dest[destOffs++]    =    (byte)(len    -    hi);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
39	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  -  hi);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  -  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  -  hi);	  dest[destOffs++]    =    (byte)(len    -    hi);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
40	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  -  offs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  -  offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  -  offs);	  dest[destOffs++]    =    (byte)(len    -    hi);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
41	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
42	[BUG]  [BUGGY]  ((  b  =  read0()  +  hi)  >=  0));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0()  +  hi)  >=  0));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0()  +  hi)  >=  0));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
43	[BUG]  [BUGGY]  ((  b  =  read0())!=  0));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
44	[BUG]  [BUGGY]  ((  b  =  read0()  &  hi)  >=  0));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0()  &  hi)  >=  0));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0()  &  hi)  >=  0));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
45	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
47	[BUG]  [BUGGY]  dest[destOffs++]  =  HARD_BLOCK_STATE  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HARD_BLOCK_STATE  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HARD_BLOCK_STATE  +  1;	  dest[destOffs++]    =    HARD_BLOCK_STATE;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
48	[BUG]  [BUGGY]  dest[destOffs++]  =  HARD_BLOCK_STATE  +  b;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HARD_BLOCK_STATE  +  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HARD_BLOCK_STATE  +  b;	  dest[destOffs++]    =    HARD_BLOCK_STATE;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
49	[BUG]  [BUGGY]  dest[destOffs++]  =  HARD_BLOCK_STATE  +  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HARD_BLOCK_STATE  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HARD_BLOCK_STATE  +  hi;	  dest[destOffs++]    =    HARD_BLOCK_STATE;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  +  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  +  1);	  dest[destOffs++]    =    (byte)(hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  2);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  +  2);	  dest[destOffs++]    =    (byte)(hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  +  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  +  1);	  dest[destOffs++]    =    (byte)(hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  *  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  *  1);	  dest[destOffs++]    =    (byte)(hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
54	[BUG]  [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
55	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
56	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
57	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
58	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
59	[BUG]  [BUGGY]  ((  hi  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
60	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes(b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataBytes(b);	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataBytes();	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData(b);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readData(b);	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
63	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataRef();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataRef();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataRef();	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
64	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataImpl();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataImpl();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataImpl();	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
65	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataInt();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataInt();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataInt();	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
66	[BUG]  [BUGGY]  dest[destOffs++]  =  HOUR_BLOCK_STATE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HOUR_BLOCK_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HOUR_BLOCK_STATE;	  dest[destOffs++]    =    RAND_PART_C_STATE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
67	[BUG]  [BUGGY]  dest[destOffs++]  =  HIERARCHICAL_STATE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HIERARCHICAL_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HIERARCHICAL_STATE;	  dest[destOffs++]    =    RAND_PART_C_STATE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
68	[BUG]  [BUGGY]  dest[destOffs++]  =  HOUR_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HOUR_SIZE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HOUR_SIZE;	  dest[destOffs++]    =    RAND_PART_C_STATE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
69	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1);	  dest[destOffs++]    =    (byte)(b    <    <    6)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
70	[BUG]  [BUGGY]  int  count  =  hi.length();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  hi.length();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  hi.length();	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
71	[BUG]  [BUGGY]  int  count  =  this.in.length();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  this.in.length();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  this.in.length();	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
72	[BUG]  [BUGGY]  int  count  =  b.length()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  b.length()  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  b.length()  +  1;	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
73	[BUG]  [BUGGY]  char  count  =  b.length();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  char  count  =  b.length();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	char  count  =  b.length();	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
74	[BUG]  [BUGGY]  int  count  =  b.length()  -  hi;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  b.length()  -  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  b.length()  -  hi;	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
75	[BUG]  [BUGGY]  int  count  =  b.length()  +  hi;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  b.length()  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  b.length()  +  hi;	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
76	[BUG]  [BUGGY]  int  count  =  destOffs.length();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  destOffs.length();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  destOffs.length();	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
77	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  b;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  b;	  dest[destOffs++]    =    (byte)(b    <    <    12)?    1    :    b;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
78	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  12)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  12)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  12)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    12)?    1    :    b;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  8)?  1  :  b;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  8)?  1  :  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  8)?  1  :  b;	  dest[destOffs++]    =    (byte)(b    <    <    12)?    1    :    b;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
81	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
82	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(1);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
83	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(destOffs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
84	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b,  hi);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b,  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b,  hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
85	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(hi,  b);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(hi,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(hi,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
86	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  8);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  8);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(destOffs  <  <  8);	  dest[destOffs++]    =    (byte)(hi    <    <    8);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
87	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  8);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  8);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  +  8);	  dest[destOffs++]    =    (byte)(hi    <    <    8);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
88	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  8);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  8);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  &  8);	  dest[destOffs++]    =    (byte)(hi    <    <    8);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
89	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  4);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(destOffs  <  <  4);	  dest[destOffs++]    =    (byte)(hi    <    <    8);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
90	[BUG]  [BUGGY]  dest[destOffs++]  =  HORIZONTAL;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HORIZONTAL;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HORIZONTAL;	  dest[destOffs++]    =    hi;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
91	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  16);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  16);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(destOffs  <  <  16);	  dest[destOffs++]    =    (byte)(hi    <    <    16);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  16);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  16);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  +  16);	  dest[destOffs++]    =    (byte)(hi    <    <    16);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  16);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  16);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  &  16);	  dest[destOffs++]    =    (byte)(hi    <    <    16);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  16);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  16);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  16);	  dest[destOffs++]    =    (byte)(hi    <    <    16);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  1)?  1  :  b;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  1)?  1  :  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  1)?  1  :  b;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    b;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
96	[BUG]  [BUGGY]  ((  b  =  read0())!=  0)?  -1  :  read0();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0)?  -1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0)?  -1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
97	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0)?  -1  :  read0();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0)?  -1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0)?  -1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
98	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0)?  -1  :  read0();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0)?  -1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0)?  -1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
99	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0)?  1  :  read0();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0)?  1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0)?  1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
100	[BUG]  [BUGGY]  ((  b  =  read0())  <  0)?  -1  :  read0();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  0)?  -1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  0)?  -1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
101	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0)?  -1  :  read0();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0)?  -1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0)?  -1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
102	[BUG]  [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
103	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
104	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
105	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
106	[BUG]  [BUGGY]  ((  hi  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
107	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.read(b);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
108	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(destOffs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.read(destOffs);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
109	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readInt();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readInt();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readInt();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
110	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readShort();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readShort();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readShort();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
111	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes(b);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readBytes(b);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
112	[BUG]  [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
113	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
114	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
115	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
116	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_hi;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
117	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  18)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  18)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  18)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
118	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
119	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  6)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
120	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  24)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  24)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  24)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
121	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  12)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  12)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  12)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
122	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(destOffs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
123	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
124	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(len);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(len);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
125	[BUG]  [BUGGY]  dest[destOffs++]  =  HOUR;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HOUR;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HOUR;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
126	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD  |  b;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD  |  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD  |  b;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
127	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD  |  RAND_PART_C_STATE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD  |  RAND_PART_C_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD  |  RAND_PART_C_STATE;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
128	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD  |  RAND_PART_A_STATE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD  |  RAND_PART_A_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD  |  RAND_PART_A_STATE;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
129	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  3)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  3)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  3)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    8)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
130	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  32)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  32)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  32)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    32)?    1    :    b;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
131	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
132	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
133	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
134	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
135	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  throw  new  IllegalArgumentException( " ".);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  throw  new  IllegalArgumentException( " ".);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  throw  new  IllegalArgumentException( " ".);	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
136	[BUG]  [BUGGY]  ((  hi  =  read0())  >=  0))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >=  0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >=  0))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
137	[BUG]  [BUGGY]  b  =  read0()  +  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  read0()  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  read0()  +  hi;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
138	[BUG]  [BUGGY]  b  =  read1();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  read1();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  read1();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
139	[BUG]  [BUGGY]  b  =  this.in.read0();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  this.in.read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  this.in.read0();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
140	[BUG]  [BUGGY]  b  =  read0()  +  destOffs;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  read0()  +  destOffs;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  read0()  +  destOffs;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
141	[BUG]  [BUGGY]  b  =  read(0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  read(0);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  read(0);	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
142	[BUG]  [BUGGY]  b  =  read0()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  read0()  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  read0()  +  1;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
143	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  24)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  24)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  24)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    24)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
144	[BUG]  [BUGGY]  dest[destOffs++]  =(byte)this.in;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =(byte)this.in;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =(byte)this.in;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
145	[BUG]  [BUGGY]  dest[destOffs++]  =  in;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  in;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  in;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
146	[BUG]  [BUGGY]  dest[destOffs++]  =  this.in,  b;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.in,  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.in,  b;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
147	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
148	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
149	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
150	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
151	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  throw  new  IllegalStateException( " ".);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  throw  new  IllegalStateException( " ".);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  throw  new  IllegalStateException( " ".);	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
152	[BUG]  [BUGGY]  dest[destOffs++]  =  hi.toByteArray();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  hi.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  hi.toByteArray();	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
153	[BUG]  [BUGGY]  dest[destOffs++]  =  this.in.toByteArray();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.in.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.in.toByteArray();	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
154	[BUG]  [BUGGY]  dest[destOffs++]  =  b.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b.toByteArray()  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b.toByteArray()  +  1;	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
155	[BUG]  [BUGGY]  dest[destOffs++]  =  this.data.toByteArray();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.data.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.data.toByteArray();	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
156	[BUG]  [BUGGY]  dest[destOffs++]  =  data[b.toByteArray();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  data[b.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  data[b.toByteArray();	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
157	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD_BLOCK_STATE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD_BLOCK_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD_BLOCK_STATE;	  dest[destOffs++]    =    START_BLOCK_STATE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
158	[BUG]  [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >>  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
159	[BUG]  [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())!=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
160	[BUG]  [BUGGY]  ((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  ==  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
161	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
162	[BUG]  [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  hi  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b,  destOffs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b,  destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b,  destOffs);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
164	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(0x80);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(0x80);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(0x80);	  dest[destOffs++]    =    (byte)0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
165	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(0xFFFF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(0xFFFF);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(0xFFFF);	  dest[destOffs++]    =    (byte)0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
166	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  16)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  16)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  <  <  16)?  1  :  0;	  dest[destOffs++]    =    (byte)(hi    <    <    16)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
167	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  16)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  16)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(destOffs  <  <  16)?  1  :  0;	  dest[destOffs++]    =    (byte)(hi    <    <    16)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
168	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)hi  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)hi  +  2;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)hi  +  2;	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
169	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)b  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)b  +  1;	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
170	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)i  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)i  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)i  +  1;	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
171	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  hi);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  &  hi);	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
172	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes(b);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes(b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
173	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.data;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.data;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.data;	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
174	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataImpl();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataImpl();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataImpl();	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
175	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataRef();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataRef();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataRef();	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
176	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes();	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
177	[BUG]  [BUGGY]  dest[destOffs++]  =  HIERARCHICAL_BLOCK_STATE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HIERARCHICAL_BLOCK_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HIERARCHICAL_BLOCK_STATE;	  dest[destOffs++]    =    RAND_PART_BLOCK_STATE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
178	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(destOffs  <  <  32);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(destOffs  <  <  32);	  dest[destOffs++]    =    (byte)(hi    <    <    32);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  &  32);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  &  32);	  dest[destOffs++]    =    (byte)(hi    <    <    32);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  32);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  32);	  dest[destOffs++]    =    (byte)(hi    <    <    32);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
181	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  32);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  +  32);	  dest[destOffs++]    =    (byte)(hi    <    <    32);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
182	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
183	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi)?  -1  :  read0();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi)?  -1  :  read0();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi)?  -1  :  read0();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
184	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0)?  -1  :  read1();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0)?  -1  :  read1();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0)?  -1  :  read1();	  ((    b    =    read0())    >=    0)?    -1    :    read0();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
185	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  6)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  6)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  6)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    6)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
186	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  8);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  8);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  -  8);	  dest[destOffs++]    =    (byte)(hi    <    <    8);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
187	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataBytes(hi);	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
188	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData(hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readData(hi);	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
189	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readObject();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readObject();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readObject();	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
190	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData(destOffs);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData(destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readData(destOffs);	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
191	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.read(hi);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
192	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes(hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readBytes(hi);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
193	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  12)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  12)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  12)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    12)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
194	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD  +  1;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
195	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD  +  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD  +  hi;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
196	[BUG]  [BUGGY]  dest[destOffs++]  =  HEAD  +  b;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HEAD  +  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HEAD  +  b;	  dest[destOffs++]    =    HEAD;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
197	[BUG]  [BUGGY]  ((  b  =  read0())  >=  1))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  1))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  1))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
198	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(0xfff);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(0xfff);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(0xfff);	  dest[destOffs++]    =    (byte)0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
199	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)1;	  dest[destOffs++]    =    (byte)0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
200	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
201	[BUG]  [BUGGY]  ((  b  =  read2())  >=  0))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read2())  >=  0))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read2())  >=  0))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
202	[BUG]  [BUGGY]  ((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
203	[BUG]  [BUGGY]  ((  b  =  read2())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read2())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read2())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
204	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
205	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi  +  1,  b);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi  +  1,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(hi  +  1,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
206	[BUG]  [BUGGY]  byte[][]  cftab  =  this.getAndMoveToFrontDecode_yy.getBytes(hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  this.getAndMoveToFrontDecode_yy.getBytes(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  this.getAndMoveToFrontDecode_yy.getBytes(hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
207	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(offs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getBytes(offs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
208	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  >>  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  >>  1)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  >>  1)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
209	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  >=  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  >=  1)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  >=  1)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
210	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  offs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  -  offs);	  dest[destOffs++]    =    (byte)(len    -    hi);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
211	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi  +  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi  +  1);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
212	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi  +  1,  b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi  +  1,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi  +  1,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
213	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  32)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  32)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  32)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    32)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
214	[BUG]  [BUGGY]  dest[destOffs++]  =  siqToUnseq  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  siqToUnseq  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  siqToUnseq  +  1;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
215	[BUG]  [BUGGY]  dest[destOffs++]  =  HIERARCHICAL_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HIERARCHICAL_SIZE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HIERARCHICAL_SIZE;	  dest[destOffs++]    =    RAND_PART_A_STATE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
216	[BUG]  [BUGGY]  dest[offs++]  =  (byte)destOffs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[offs++]  =  (byte)destOffs;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[offs++]  =  (byte)destOffs;	  dest[destOffs++]    =    (byte)destOffs;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
217	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
218	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes(hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getDataBytes(hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
219	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  18)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  18)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  18)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    18)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
220	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  0  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  16)?  0  :  0;	  dest[destOffs++]    =    (byte)(hi    <    <    16)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
221	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  16)?  1  :  hi  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  16)?  1  :  hi  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  16)?  1  :  hi  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
222	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  unzftab);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  unzftab);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  unzftab);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
223	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  offs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  offs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
224	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(hi,  b,  offs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
225	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy()  +  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy()  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy()  +  hi;	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
226	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_xy(hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_xy(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_xy(hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
227	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(2);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(2);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
228	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  3);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  +  3);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  +  3);	  dest[destOffs++]    =    (byte)(hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
229	[BUG]  [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read1())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
230	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)hi  +  4;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)hi  +  4;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)hi  +  4;	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
231	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)hi  +  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)hi  +  3;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)hi  +  3;	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
232	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  getAndMoveToFrontDecode_yy();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  getAndMoveToFrontDecode_yy();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
233	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  getAndMoveToFrontDecode_yy(hi);	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
234	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  getAndMoveToFrontDecode_yy(b);	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
235	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b,  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b,  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  getAndMoveToFrontDecode_yy(b,  hi);	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
236	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
237	[BUG]  [BUGGY]  ((  b  =  read2())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read2())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read2())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
238	[BUG]  [BUGGY]  ((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy(b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy(b);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
239	[BUG]  [BUGGY]  ((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  1))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
240	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
241	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
242	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  32)?  1  :  b  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  32)?  1  :  b  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  32)?  1  :  b  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
243	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  8)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  8)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  8)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    8)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
244	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  32);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  -  32);	  dest[destOffs++]    =    (byte)(hi    <    <    32);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
245	[BUG]  [BUGGY]  dest[destOffs++]  =  this.in  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.in  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.in  +  1;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
246	[BUG]  [BUGGY]  dest[destOffs++]  =  this.in  +  b;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.in  +  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.in  +  b;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
247	[BUG]  [BUGGY]  dest[destOffs++]  =  this.in  +  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.in  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.in  +  hi;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
248	[BUG]  [BUGGY]  dest[destOffs++]  =  data.toByteArray();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  data.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  data.toByteArray();	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
249	[BUG]  [BUGGY]  dest[destOffs++]  =  b.toByteArray(hi);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b.toByteArray(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b.toByteArray(hi);	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
250	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  hi;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  16)?  1  :  hi;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
251	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  b  =  getAndMoveToFrontDecode();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	b  =  getAndMoveToFrontDecode();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
252	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  16);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  16);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  <  <  16);	  dest[destOffs++]    =    (byte)(hi    <    <    16);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
253	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  /  1);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  /  1);	  dest[destOffs++]    =    (byte)(hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
254	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  8);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  8);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  <  <  8);	  dest[destOffs++]    =    (byte)(hi    <    <    8);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
255	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(len  <  <  32);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(len  <  <  32);	  dest[destOffs++]    =    (byte)(hi    <    <    32);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
256	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.clone();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.clone();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.clone();	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
257	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.toByteArray();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.toByteArray();	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
258	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  <  <  16)?  2  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  <  <  16)?  2  :  0;	  dest[destOffs++]    =    (byte)(hi    <    <    16)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
259	[BUG]  [BUGGY]  ((  b  =  read0())  <  0))  {  offs  +=  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  0))  {  offs  +=  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  0))  {  offs  +=  hi;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
260	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  offs  +=  len;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  offs  +=  len;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  offs  +=  len;	  ((    b    =    read0())    >=    0))    {    offs    +=    hi;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
261	[BUG]  [BUGGY]  ((  b  =  read0())  <  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  0))  {  hi  +=  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  0))  {  hi  +=  getAndMoveToFrontDecode_yy;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
262	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(0);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.read(0);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
263	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  16)?  1  :  b.length  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  16)?  1  :  b.length  +  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  16)?  1  :  b.length  +  1;	  dest[destOffs++]    =    (byte)(b    <    <    16)?    1    :    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
264	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  ==  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  ==  1)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  ==  1)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
265	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  0  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  0  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
266	[BUG]  [BUGGY]  dest[destOffs++]  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  getAndMoveToFrontDecode_yy;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  getAndMoveToFrontDecode_yy;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
267	[BUG]  [BUGGY]  dest[destOffs++]  =  this;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this;	  dest[destOffs++]    =    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
268	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)destOffs  -  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)destOffs  -  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)destOffs  -  hi;	  dest[destOffs++]    =    (byte)destOffs;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
269	[BUG]  [BUGGY]  dest[destOffs++]  =  b.toByteArray()  +  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b.toByteArray()  +  hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b.toByteArray()  +  hi;	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
270	[BUG]  [BUGGY]  dest[destOffs++]  =  str.toByteArray();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  str.toByteArray();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  str.toByteArray();	  dest[destOffs++]    =    b.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
271	[BUG]  [BUGGY]  ((  b  =  read0())  <  hi))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  hi))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  hi))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
272	[BUG]  [BUGGY]  ((  b  =  read0())  >=  1))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  1))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  1))  {  throw  new  IllegalArgumentException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
273	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(offs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
274	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy();	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
275	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b,  offs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b,  offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(b,  offs);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
276	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy(0);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy(0);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
277	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(offs,  b);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(offs,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(offs,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
278	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(len,  b);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(len,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(len,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
279	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(su_rNToGo,  b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(su_rNToGo,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(su_rNToGo,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
280	[BUG]  [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(su_ch2,  b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(su_ch2,  b);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  cftab  =  getAndMoveToFrontDecode_yy.getData(su_ch2,  b);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getData(hi,    b);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
281	[BUG]  [BUGGY]  ((  b  =  read0())  <  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  0))  {  hi  +=  getAndMoveToFrontDecode_yy.length;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
282	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b,  offs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b,  offs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy(b,  offs);	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy(b);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
283	[BUG]  [BUGGY]  dest[destOffs++]  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  this.in.read();  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  this.in.read();	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
284	[BUG]  [BUGGY]  dest[destOffs++]  =  b  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  b  *  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  b  *  1;	  dest[destOffs++]    =    b    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
285	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  2  :  b;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  1)?  2  :  b;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  1)?  2  :  b;	  dest[destOffs++]    =    (byte)(b    <    <    1)?    1    :    b;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
286	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  hi);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(hi  -  hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(hi  -  hi);	  dest[destOffs++]    =    (byte)hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
287	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy.getBytes(hi);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy.getBytes(hi);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy.getBytes(hi);	  byte[][]    cftab    =    getAndMoveToFrontDecode_yy.getBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
288	[BUG]  [BUGGY]  ((  b  =  read0())  <  hi))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  hi))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  hi))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
289	[BUG]  [BUGGY]  ((  b  =  read0())  >=  1))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  1))  {  throw  new  IllegalStateException( " ");  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  1))  {  throw  new  IllegalStateException( " ");	  ((    b    =    read0())    >=    0))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
290	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes(destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readDataBytes(destOffs);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	byte[][]  dest  =(byte[][])this.in.readDataBytes(destOffs);	  byte[][]    dest    =(byte[][])this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
291	[BUG]  [BUGGY]  ((  b  =  read0())  <  hi));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  <  hi));  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  <  hi));	  ((    b    =    read0())    >=    0));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
292	[BUG]  [BUGGY]  int  count  =  b.length()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  int  count  =  b.length()  -  1;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	int  count  =  b.length()  -  1;	  int    count    =    b.length();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
293	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  2)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(b  <  <  2)?  1  :  0;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(b  <  <  2)?  1  :  0;	  dest[destOffs++]    =    (byte)(b    <    <    6)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
294	[BUG]  [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  hi))  {  hi  +=  getAndMoveToFrontDecode_yy.hi;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
295	[BUG]  [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.high;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  ((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.high;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	((  b  =  read0())  >=  0))  {  hi  +=  getAndMoveToFrontDecode_yy.high;	  ((    b    =    read0())    >=    0))    {    hi    +=    getAndMoveToFrontDecode_yy.hi;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
296	[BUG]  [BUGGY]  dest[destOffs++]  =  HARD_PART_A_STATE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  HARD_PART_A_STATE;  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  HARD_PART_A_STATE;	  dest[destOffs++]    =    RAND_PART_C_STATE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
297	[BUG]  [BUGGY]  dest[destOffs++]  =  (byte)(0xc0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {      [BUGGY]  dest[destOffs++]  =  (byte)(0xc0);  [BUGGY]      count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	173	173	1	replace	dest[destOffs++]  =  (byte)(0xc0);	  dest[destOffs++]    =    (byte)0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
