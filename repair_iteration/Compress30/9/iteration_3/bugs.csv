bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.getAndMoveToFrontDecode_yy;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.getAndMoveToFrontDecode_yy;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
2	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_dest;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_dest;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_dest;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
3	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy,  hi;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy,  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy,  hi;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
4	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy  +  hi;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy  +  hi;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
5	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_1;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
6	[BUG]  [BUGGY]  byte  destOffs  =  0L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  0L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  0L;	  int    destOffs    =    0L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
7	[BUG]  [BUGGY]  char  destOffs  =  0L;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  0L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  0L;	  int    destOffs    =    0L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
8	[BUG]  [BUGGY]  char  destOffs  =  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  0;	  int    destOffs    =    0L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
9	[BUG]  [BUGGY]  int  destOffs  =  0,  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  0,  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  0,  len;	  int    destOffs    =    0L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
10	[BUG]  [BUGGY]  char  destOffs  =  nInUse  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  nInUse  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  nInUse  -  1;	  int    destOffs    =    nInUse    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  byte  destOffs  =  nInUse  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  nInUse  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  nInUse  -  1;	  int    destOffs    =    nInUse    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
12	[BUG]  [BUGGY]  int  destOffs  =  hi  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  /  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  /  1;	  int    destOffs    =    nInUse    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
13	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(dest,  hi);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(dest,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(dest,  hi);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
14	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(dest);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(dest);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
15	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(destOffs,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(destOffs,  hi);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
16	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(destOffs);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(destOffs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(destOffs);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
17	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(offs,  hi);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(offs,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(offs,  hi);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
18	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(hi,  offs);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(hi,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(hi,  offs);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
19	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(offs);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(offs);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
20	[BUG]  [BUGGY]  int  destOffs  =  hi.read()  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.read()  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.read()  -  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
21	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(hi)-  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(hi)-  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(hi)-  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
22	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(offs)-  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(offs)-  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(offs)-  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
23	[BUG]  [BUGGY]  int  destOffs  =  hi.read();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.read();	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
24	[BUG]  [BUGGY]  int  destOffs  =  cftab.read()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  cftab.read()  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  cftab.read()  -  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
25	[BUG]  [BUGGY]  int  destOffs  =(hi  ==  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(hi  ==  0)?  0  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  ==  0)?  0  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
26	[BUG]  [BUGGY]  int  destOffs  =(hi  <  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(hi  <  0)?  1  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  <  0)?  1  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
27	[BUG]  [BUGGY]  int  destOffs  =(hi  >=  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(hi  >=  0)?  0  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  >=  0)?  0  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  int  destOffs  =(hi  >  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(hi  >  0)?  0  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  >  0)?  0  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
29	[BUG]  [BUGGY]  int  destOffs  =(hi  <  1)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(hi  <  1)?  0  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  <  1)?  0  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
30	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  hi);	  int    destOffs    =    this.in.read(width);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
31	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(width,  hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(width,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(width,  hi);	  int    destOffs    =    this.in.read(width);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
32	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  width);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  width);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  width);	  int    destOffs    =    this.in.read(width);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
34	[BUG]  [BUGGY]  if(len  >  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(len  >  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(len  >  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0],  offs[i][0]);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0],  offs[i][0]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0],  offs[i][0]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
40	[BUG]  [BUGGY]  int  destOffs  =  hi.read()  -  this.in;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.read()  -  this.in;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.read()  -  this.in;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  hi  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  -  hi  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  hi  +  1;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  /  hi;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  /  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  /  hi;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  hi,  offs;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  -  hi,  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  hi,  offs;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  offs;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  -  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  offs;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  *  hi;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  *  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  *  hi;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(hi);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
47	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(data);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(data);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(data);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
48	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readDataBytes();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readDataBytes();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readDataBytes();	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
49	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(dest);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(dest);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
50	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(offs);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(offs);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
51	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readInt();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readInt();	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
52	[BUG]  [BUGGY]  int  destOffs  =  len  -  hi;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  -  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  -  hi;	  int    destOffs    =    len    -    offs;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
53	[BUG]  [BUGGY]  int  destOffs  =  hi  -  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  len;	  int    destOffs    =    len    -    offs;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
54	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  offs;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  -  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  offs;	  int    destOffs    =    len    -    offs;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
55	[BUG]  [BUGGY]  int  destOffs  =  hi  +  nInUse;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  nInUse;	  int    destOffs    =    offs    +    nInUse;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  int  destOffs  =  offs  +  nInUse  +  hi;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  nInUse  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  nInUse  +  hi;	  int    destOffs    =    offs    +    nInUse;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  int  destOffs  =  offs  +  nInUse  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  nInUse  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  nInUse  +  1;	  int    destOffs    =    offs    +    nInUse;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  offs;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  +  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  offs;	  int    destOffs    =    offs    +    nInUse;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  int  destOffs  =  offs  /  nInUse;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  /  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  nInUse;	  int    destOffs    =    offs    +    nInUse;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  int[]  bsLive  =  this.in.getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  this.in.getAndMoveToFrontDecode_yy;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  this.in.getAndMoveToFrontDecode_yy;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
61	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_hi;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_hi;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
62	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy  +  hi;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy  +  hi;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_1;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
64	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_lattice;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_lattice;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_lattice;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
65	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_4;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_4;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_4;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
66	[BUG]  [BUGGY]  byte  destOffs  =  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  hi;	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
67	[BUG]  [BUGGY]  byte  destOffs  =  this.in.nInUse;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  this.in.nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  this.in.nInUse;	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
68	[BUG]  [BUGGY]  double  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  double  destOffs  =  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	double  destOffs  =  nInUse;	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
69	[BUG]  [BUGGY]  byte  destOffs  =  hi  +  nInUse;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  hi  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  hi  +  nInUse;	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
70	[BUG]  [BUGGY]  byte  destOffs  =  offs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  offs;	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
71	[BUG]  [BUGGY]  int  detOffs  =  hi  +  nInUse;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  detOffs  =  hi  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  detOffs  =  hi  +  nInUse;	  int    destOffs    =    nInUse    +    hi;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
72	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  hi  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  +  hi  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  hi  +  1;	  int    destOffs    =    nInUse    +    hi;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
73	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readData();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readData();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readData();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
74	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.read(hi);	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
75	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readInt();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readInt();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
76	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readShort();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readShort();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readShort();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
77	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readBytes();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readBytes();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readBytes();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
78	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readFully(hi);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readFully(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readFully(hi);	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
79	[BUG]  [BUGGY]  int  destOffs  =  len  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  +  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  2;	  int    destOffs    =    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
80	[BUG]  [BUGGY]  int  destOffs  =  n  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  n  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  n  +  1;	  int    destOffs    =    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
81	[BUG]  [BUGGY]  char  destOffs  =  len  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  len  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  len  +  1;	  int    destOffs    =    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  int  destOffs  =  hi  +  offs  +  len;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  offs  +  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  offs  +  len;	  int    destOffs    =    hi    +    offs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
83	[BUG]  [BUGGY]  int  destOffs  =  hi  +  offs  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  offs  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  offs  +  1;	  int    destOffs    =    hi    +    offs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
84	[BUG]  [BUGGY]  int  destOffs  =  hi  +  offs  *  len;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  offs  *  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  offs  *  len;	  int    destOffs    =    hi    +    offs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
85	[BUG]  [BUGGY]  int  destOffs  =  hi  /  offs;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  /  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  /  offs;	  int    destOffs    =    hi    +    offs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
86	[BUG]  [BUGGY]  int  destOffs  =  hi  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  2;	  int    destOffs    =    hi    -    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
87	[BUG]  [BUGGY]  int  destOffs  =  hi  -  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  1L;	  int    destOffs    =    hi    -    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
88	[BUG]  [BUGGY]  int  destOffs  =  hi  -  1,  len;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  1,  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  1,  len;	  int    destOffs    =    hi    -    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
89	[BUG]  [BUGGY]  int  destOffs  =  hi  -  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  4;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  4;	  int    destOffs    =    hi    -    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
90	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs,  hi);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
91	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs,  len);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
92	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs  +  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs  +  1);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
93	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  0);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs,  0);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
94	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  offs);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
95	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs,  hi);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
96	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  byte)destOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  byte)destOffs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  byte)destOffs);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs  +  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs  +  1);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
98	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs  -  hi);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs  -  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs  -  hi);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
99	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs  +  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs  +  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs  +  hi);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
100	[BUG]  [BUGGY]  byte  destOffs  =(byte)Math.rint((  byte)destOffs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =(byte)Math.rint((  byte)destOffs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =(byte)Math.rint((  byte)destOffs);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
101	[BUG]  [BUGGY]  int  destOffs  =  len  -  1L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  -  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  -  1L;	  int    destOffs    =    offs    -    1L;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
102	[BUG]  [BUGGY]  int  destOffs  =  offs  /  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  /  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  1L;	  int    destOffs    =    offs    -    1L;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
103	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0);	  int    destOffs    =    this.in.read(dest);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
105	[BUG]  [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
106	[BUG]  [BUGGY]  if(len  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(len  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(len  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
107	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
108	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs.length;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs.length;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs.length;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
109	[BUG]  [BUGGY]  int  destOffs  =  hi  /  nInUse;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  /  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  /  nInUse;	  int    destOffs    =    hi    -    nInUse;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
110	[BUG]  [BUGGY]  int  destOffs  =  hi  -  this.in.nInUse;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  this.in.nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  this.in.nInUse;	  int    destOffs    =    hi    -    nInUse;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
111	[BUG]  [BUGGY]  int  destOffs  =  hi  -  nInUse  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  nInUse  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  nInUse  +  1;	  int    destOffs    =    hi    -    nInUse;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
112	[BUG]  [BUGGY]  int  destOffs  =  hi  -  this.in;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  this.in;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  this.in;	  int    destOffs    =    hi    -    nInUse;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
113	[BUG]  [BUGGY]  int  destOffs  =  hi  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  2;	  int    destOffs    =    hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
114	[BUG]  [BUGGY]  int  destOffs  =  hi  +  1,  count(1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  1,  count(1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  1,  count(1);	  int    destOffs    =    hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
115	[BUG]  [BUGGY]  int  destOffs  =  hi  +  1,  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  1,  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  1,  len;	  int    destOffs    =    hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  int  destOffs  =  nInUse  -  len;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  -  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  -  len;	  int    destOffs    =    offs    -    len;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
117	[BUG]  [BUGGY]  int  destOffs  =  nInUse  -  offs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  -  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  -  offs;	  int    destOffs    =    offs    -    len;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
118	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(true);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(true);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
119	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  false);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  false);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
120	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(false,  hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(false,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(false,  hi);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
121	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(false,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(false,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(false,  offs);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
122	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(r,  false);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(r,  false);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(r,  false);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
123	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(destOffs);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
124	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  this.in);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  this.in);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  this.in);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
125	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest,  hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest,  hi);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
126	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
127	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(destOffs,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(destOffs,  hi);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
128	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  offs);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  offs);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
129	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(offs);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(offs);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
130	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  offs  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs  +  1;	  int    destOffs    =    hi    -    offs;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
131	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs  +  len;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  offs  +  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs  +  len;	  int    destOffs    =    hi    -    offs;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
132	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  offs.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs.length;	  int    destOffs    =    hi    -    offs;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
133	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs,  len;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  offs,  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs,  len;	  int    destOffs    =    hi    -    offs;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
134	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs  *  len;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  offs  *  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs  *  len;	  int    destOffs    =    hi    -    offs;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
135	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode();	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
136	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode(hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode(hi);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_xy(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_xy(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_xy(hi);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  int[][]  dest  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  getAndMoveToFrontDecode_yy();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  getAndMoveToFrontDecode_yy();	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(1);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  int  destOffs  =  offs  +  hi  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  hi  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  hi  +  1;	  int    destOffs    =    offs    +    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
141	[BUG]  [BUGGY]  int  destOffs  =  len  +  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  hi;	  int    destOffs    =    offs    +    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
142	[BUG]  [BUGGY]  int  destOffs  =  offs  +  hi  +  len;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  hi  +  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  hi  +  len;	  int    destOffs    =    offs    +    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
143	[BUG]  [BUGGY]  int  destOffs  =  offs  /  hi;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  /  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  hi;	  int    destOffs    =    offs    +    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
144	[BUG]  [BUGGY]  int  destOffs  =  offs  /  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  /  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  2;	  int    destOffs    =    offs    -    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
145	[BUG]  [BUGGY]  int  destOffs  =  offs  -  1,  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  -  1,  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  1,  len;	  int    destOffs    =    offs    -    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
146	[BUG]  [BUGGY]  char  destOffs  =  nInUse  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  nInUse  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  nInUse  +  1;	  int    destOffs    =    nInUse    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  byte  destOffs  =  nInUse  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  nInUse  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  nInUse  +  1;	  int    destOffs    =    nInUse    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
148	[BUG]  [BUGGY]  int  destOffs  =  hi.length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  +  1;	  int    destOffs    =    dest.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
149	[BUG]  [BUGGY]  int  destOffs  =  this.in.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.length  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.length  +  1;	  int    destOffs    =    dest.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
150	[BUG]  [BUGGY]  int  destOffs  =  str.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  str.length  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  str.length  +  1;	  int    destOffs    =    dest.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
151	[BUG]  [BUGGY]  String  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  String  destOffs  =  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	String  destOffs  =  nInUse;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
152	[BUG]  [BUGGY]  CharDestination  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  CharDestination  destOffs  =  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	CharDestination  destOffs  =  nInUse;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
153	[BUG]  [BUGGY]  char  destOffs  =  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  hi;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
154	[BUG]  [BUGGY]  Char  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  Char  destOffs  =  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	Char  destOffs  =  nInUse;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
155	[BUG]  [BUGGY]  char  destOffs  =  this.in.nInUse;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  this.in.nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  this.in.nInUse;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
156	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read(dest);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.read(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read(dest);	  byte[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
157	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read(hi);	  byte[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
158	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read(offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.read(offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read(offs);	  byte[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
159	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read(data);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.read(data);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read(data);	  byte[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
160	[BUG]  [BUGGY]  int  destOffs  =  this.in.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.length  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.length  -  1;	  int    destOffs    =    this.in.length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
161	[BUG]  [BUGGY]  int  destOffs  =  this.in.length  -  hi;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.length  -  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.length  -  hi;	  int    destOffs    =    this.in.length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
162	[BUG]  [BUGGY]  int  destOffs  =  this.in.length  -  offs;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.length  -  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.length  -  offs;	  int    destOffs    =    this.in.length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
163	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  hi);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
164	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  0,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs,  0,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs,  0,  len);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
165	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len,  offs);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  len,  offs);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
166	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(hi,  0,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(hi,  0,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(hi,  0,  len);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
167	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len  +  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  len  +  1);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
168	[BUG]  [BUGGY]  int  b  =  read0()  +  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  read0()  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read0()  +  hi;	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
169	[BUG]  [BUGGY]  int  b  =  read0()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  read0()  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read0()  +  1;	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
170	[BUG]  [BUGGY]  int  b  =  this.in.read0();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  this.in.read0();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  this.in.read0();	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
171	[BUG]  [BUGGY]  int  b  =  read0().length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  read0().length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read0().length;	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
172	[BUG]  [BUGGY]  int  b  =  read1();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  read1();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read1();	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
173	[BUG]  [BUGGY]  byte  b  =  read0();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  b  =  read0();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  b  =  read0();	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
174	[BUG]  [BUGGY]  int  destOffs  =  hi  +  len  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  len  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  len  +  1;	  int    destOffs    =    offs    +    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
175	[BUG]  [BUGGY]  int  destOffs  =  offs  +  len  +  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  len  +  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  len  +  2;	  int    destOffs    =    offs    +    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
176	[BUG]  [BUGGY]  int  destOffs  =  len  +  offs  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  +  offs  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  offs  +  1;	  int    destOffs    =    offs    +    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
177	[BUG]  [BUGGY]  int  destOffs  =  offs  +  len  +  3;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  len  +  3;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  len  +  3;	  int    destOffs    =    offs    +    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
178	[BUG]  [BUGGY]  int  destOffs  =  offs  *  len  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  *  len  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  *  len  +  1;	  int    destOffs    =    offs    +    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
179	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_offs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_offs;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
180	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  +  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_yy  +  hi;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
181	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  -  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  -  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_yy  -  hi;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
182	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode(hi);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode(hi);	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
183	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_hi;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_hi;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
184	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  -  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  2;	  int    destOffs    =    hi.length;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
185	[BUG]  [BUGGY]  int  destOffs  =  offs.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs.length;	  int    destOffs    =    hi.length;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
186	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  len,  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  len,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  len,  hi);	  int    destOffs    =    this.in.read(dest,    len);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
187	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(hi,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(hi,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(hi,  len);	  int    destOffs    =    this.in.read(dest,    len);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
188	[BUG]  [BUGGY]  int  hi  =  offs;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  offs;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
189	[BUG]  [BUGGY]  int  hi  =  offs  +  len;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  offs  +  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  offs  +  len;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
190	[BUG]  [BUGGY]  int  hi  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  this.in.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  this.in.read();	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
191	[BUG]  [BUGGY]  int  hi  =  dest.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  dest.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  dest.length;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
192	[BUG]  [BUGGY]  int  hi  =  this.in.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  this.in.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  this.in.length;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
193	[BUG]  [BUGGY]  int  hi  =  this.in.readInt();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  this.in.readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  this.in.readInt();	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
194	[BUG]  [BUGGY]  int  hi  =  len;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  len;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
195	[BUG]  [BUGGY]  int  destOffs  =  hi.length  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  /  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  /  1;	  int    destOffs    =    hi.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
196	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  1L;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  -  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  1L;	  int    destOffs    =    hi.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
197	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  -  4;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  4;	  int    destOffs    =    hi.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
198	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  3;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  -  3;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  3;	  int    destOffs    =    hi.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
199	[BUG]  [BUGGY]  int  destOffs  =  hi  /  len;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  /  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  /  len;	  int    destOffs    =    offs    /    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
200	[BUG]  [BUGGY]  int  destOffs  =  len  /  offs;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  /  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  /  offs;	  int    destOffs    =    offs    /    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
201	[BUG]  [BUGGY]  int  destOffs  =  nInUse  /  len;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  /  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  /  len;	  int    destOffs    =    offs    /    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
202	[BUG]  [BUGGY]  int  destOffs  =  offs  /  len  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  /  len  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  len  +  1;	  int    destOffs    =    offs    /    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
203	[BUG]  [BUGGY]  int  destOffs  =  this.in.readUTF();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readUTF();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readUTF();	  int    destOffs    =    this.in.readShort();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
204	[BUG]  [BUGGY]  int  destOffs  =  this.in.readUnsignedInt();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readUnsignedInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readUnsignedInt();	  int    destOffs    =    this.in.readShort();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
205	[BUG]  [BUGGY]  int  destOffs  =  this.in.readUnsignedShort();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readUnsignedShort();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readUnsignedShort();	  int    destOffs    =    this.in.readShort();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
206	[BUG]  [BUGGY]  int  destOffs  =  this.in.readShort(hi);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readShort(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readShort(hi);	  int    destOffs    =    this.in.readShort();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
207	[BUG]  [BUGGY]  int  destOffs  =  this.in.readShortBytes();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readShortBytes();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readShortBytes();	  int    destOffs    =    this.in.readShort();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
208	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy?  hi  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy?  hi  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_yy?  hi  :  1;	  int    destOffs    =    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
209	[BUG]  [BUGGY]  int  destOffs  =  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  2;	  int    destOffs    =    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
211	[BUG]  [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
212	[BUG]  [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
213	[BUG]  [BUGGY]  if(len  >  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(len  >  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(len  >  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
214	[BUG]  [BUGGY]  if(len  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(len  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(len  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
216	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt()  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readInt()  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt()  -  1;	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
217	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt()  -  offs;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readInt()  -  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt()  -  offs;	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
218	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt()  -  hi;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readInt()  -  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt()  -  hi;	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
219	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt()  &  0xff;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readInt()  &  0xff;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt()  &  0xff;	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
220	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt()  +  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readInt()  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt()  +  1;	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
221	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt(hi);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readInt(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt(hi);	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
222	[BUG]  [BUGGY]  int  hiOffs  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hiOffs  =  this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hiOffs  =  this.in.read(hi);	  int    destOffs    =    this.in.read(hi);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
223	[BUG]  [BUGGY]  int  hi  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  this.in.read(hi);	  int    destOffs    =    this.in.read(hi);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
224	[BUG]  [BUGGY]  int  destOffs  =  offs  +  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  0;	  int    destOffs    =    offs    +    2;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
225	[BUG]  [BUGGY]  int  destOffs  =  offs  +  1,  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  1,  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  1,  len;	  int    destOffs    =    offs    +    2;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
226	[BUG]  [BUGGY]  int  destOffs  =  offs  -  hi  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  -  hi  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  hi  +  1;	  int    destOffs    =    offs    -    hi;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
227	[BUG]  [BUGGY]  int  destOffs  =  offs  -  hi  +  len;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  -  hi  +  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  hi  +  len;	  int    destOffs    =    offs    -    hi;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
228	[BUG]  [BUGGY]  int  destOffs  =  ons  +  len;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  ons  +  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  ons  +  len;	  int    destOffs    =    len    +    offs;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
229	[BUG]  [BUGGY]  int  destOffs  =  hi  *  len;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  *  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  *  len;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
230	[BUG]  [BUGGY]  int  destOffs  =  offs  *  hi;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  *  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  *  hi;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
231	[BUG]  [BUGGY]  int  destOffs  =  len  *  offs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  *  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  *  offs;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
232	[BUG]  [BUGGY]  int  destOffs  =  offs  *  nInUse;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  *  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  *  nInUse;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
233	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(offs,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(offs,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(offs,  len);	  int    destOffs    =    this.in.read(width,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
234	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(width,  offs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(width,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(width,  offs);	  int    destOffs    =    this.in.read(width,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
235	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(len,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(len,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(len,  offs);	  int    destOffs    =    this.in.read(width,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
236	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readData();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readData();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
237	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.read(hi);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
238	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readInt();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readInt();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
239	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readShort();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readShort();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readShort();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
240	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes(hi);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readBytes(hi);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
241	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(dest);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(dest);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
242	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(hi);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
243	[BUG]  [BUGGY]  int[][]  dest  =  this.in.readInt();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.readInt();	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
244	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(data);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(data);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(data);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
245	[BUG]  [BUGGY]  int[][]  dest  =  this.in.readData();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.readData();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.readData();	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
246	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(width,  len);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(width,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(width,  len);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
247	[BUG]  [BUGGY]  int  destOffs  =  hi  +  len  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  len  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  len  -  1;	  int    destOffs    =    hi    +    len;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
248	[BUG]  [BUGGY]  int  destOffs  =  hi  +  n;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  n;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  n;	  int    destOffs    =    hi    +    len;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
249	[BUG]  [BUGGY]  int  destOffs  =  len  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  /  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  /  1;	  int    destOffs    =    offs    /    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
250	[BUG]  [BUGGY]  int  destOffs  =  offs  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  *  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  *  1;	  int    destOffs    =    offs    /    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
251	[BUG]  [BUGGY]  int  destOffs  =  offs  /  4;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  /  4;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  4;	  int    destOffs    =    offs    /    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
252	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy(hi);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
253	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode();	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
254	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode(hi);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode(hi);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
255	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_xy(hi);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_xy(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_xy(hi);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
256	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy(1);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
257	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_out();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_out();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_out();	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
258	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(offs,  hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(offs,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(offs,  hi);	  int    destOffs    =    this.in.read(offs);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
260	[BUG]  [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
261	[BUG]  [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while(offs  <  len)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
262	[BUG]  [BUGGY]  while(offs  <  len)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while(offs  <  len)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while(offs  <  len)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
263	[BUG]  [BUGGY]  while(offs  <  len)  {  offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while(offs  <  len)  {  offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while(offs  <  len)  {  offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
264	[BUG]  [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  <  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
266	[BUG]  [BUGGY]  int  destOffs  =  offs  +  hi  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  hi  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  hi  -  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
267	[BUG]  [BUGGY]  int  destOffs  =  offs  +  len  /  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  len  /  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  len  /  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
268	[BUG]  [BUGGY]  int  destOffs  =  len  +  offs  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  +  offs  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  offs  -  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
269	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  len  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  +  len  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  len  -  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
270	[BUG]  [BUGGY]  int  destOffs  =  offs  +  n  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  n  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  n  -  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
271	[BUG]  [BUGGY]  int  count  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(hi);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
272	[BUG]  [BUGGY]  int  count  =  this.in.read(dest);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(dest);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
273	[BUG]  [BUGGY]  int  count  =  this.in.read(su_ch2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(su_ch2);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(su_ch2);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
274	[BUG]  [BUGGY]  int  count  =  this.in.read(0);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(0);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(0);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
275	[BUG]  [BUGGY]  int  count  =  this.in.read(offs);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(offs);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
276	[BUG]  [BUGGY]  int  count  =  this.in.read(su_ch2,  hi);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(su_ch2,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(su_ch2,  hi);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
277	[BUG]  [BUGGY]  int  destOffs  =  hi  -  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  hi;	  int    destOffs    =    hi    -    nInUse;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
278	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
279	[BUG]  [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
280	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
281	[BUG]  [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
282	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
283	[BUG]  [BUGGY]  int  destOffs  =  len  +  nInUse;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  nInUse;	  int    destOffs    =    offs    +    nInUse;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
284	[BUG]  [BUGGY]  int  destOffs  =  hi  -  1  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  1  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  1  +  1;	  int    destOffs    =    hi    -    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
285	[BUG]  [BUGGY]  int  hiOffs  =  hi  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hiOffs  =  hi  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hiOffs  =  hi  -  1;	  int    destOffs    =    hi    -    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
286	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
287	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
288	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(hi  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(hi  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(hi  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
289	[BUG]  [BUGGY]  if(this.in  ==  null)  {  while(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  while(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  b  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  while(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  b  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
290	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  return  read0();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  return  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  return  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    int    b    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
291	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy  +  1;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
292	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readAndMoveToFrontDecode_yy;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readAndMoveToFrontDecode_yy;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
293	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy  +  1;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
294	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy,  hi);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy,  hi);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
295	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  +  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  2;	  int    destOffs    =    nInUse    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
296	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  1L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  +  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  1L;	  int    destOffs    =    nInUse    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
297	[BUG]  [BUGGY]  int  destOffs  =  hi  +  1L;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  1L;	  int    destOffs    =    hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
298	[BUG]  [BUGGY]  int  destOffs  =  hi  +  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  0;	  int    destOffs    =    hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
299	[BUG]  [BUGGY]  int  destOffs  =  hi  +  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  4;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  4;	  int    destOffs    =    hi    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
300	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(false,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(false,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(false,  len);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
301	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  len  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  len  +  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  len  +  1);	  int    destOffs    =    this.in.read(dest,    len);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
302	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  len  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  len  -  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  len  -  1);	  int    destOffs    =    this.in.read(dest,    len);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
303	[BUG]  [BUGGY]  char  destOffs  =  hi  +  nInUse;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  hi  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  hi  +  nInUse;	  int    destOffs    =    nInUse    +    hi;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
304	[BUG]  [BUGGY]  int  hiOffs  =  nInUse  +  hi;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hiOffs  =  nInUse  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hiOffs  =  nInUse  +  hi;	  int    destOffs    =    nInUse    +    hi;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
305	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(temp_charArray2d);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(temp_charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(temp_charArray2d);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
306	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(temp_charArray2d,  hi);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(temp_charArray2d,  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(temp_charArray2d,  hi);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
307	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(data,  offs);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(data,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(data,  offs);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
308	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)hi);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)hi);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
309	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  char)destOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  char)destOffs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  char)destOffs);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
310	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs,  len);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
311	[BUG]  [BUGGY]  int  destOffs  =  len  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  -  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  -  2;	  int    destOffs    =    offs    -    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
312	[BUG]  [BUGGY]  int  destOffs  =  nInUse  -  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  -  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  -  2;	  int    destOffs    =    offs    -    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
313	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
314	[BUG]  [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
315	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
316	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
317	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
318	[BUG]  [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in!=  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
319	[BUG]  [BUGGY]  byte  destOffs  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  this.in.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  this.in.read();	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
320	[BUG]  [BUGGY]  byte  destOffs  =  this.in.readInt();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  this.in.readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  this.in.readInt();	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
321	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
322	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
323	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(hi  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(hi  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(hi  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
324	[BUG]  [BUGGY]  if(this.in  ==  null)  {  while(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  while(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  while(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
325	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
326	[BUG]  [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read1();  }  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read1();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(this.in  ==  null)  {  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read1();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
327	[BUG]  [BUGGY]  Integer  destOffs  =  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  Integer  destOffs  =  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	Integer  destOffs  =  0;	  int    destOffs    =    0L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
328	[BUG]  [BUGGY]  int  destOffs  =  offs  +  n  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  n  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  n  +  1;	  int    destOffs    =    offs    +    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
329	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read(this.temp_charArray2d);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.read(this.temp_charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read(this.temp_charArray2d);	  byte[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
330	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read(temp_charArray2d);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.read(temp_charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read(temp_charArray2d);	  byte[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
331	[BUG]  [BUGGY]  int  b  =  read(0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  read(0);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read(0);	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
332	[BUG]  [BUGGY]  int  b  =  read0(hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  read0(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read0(hi);	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
333	[BUG]  [BUGGY]  int  destOffs  =  nInUse  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  /  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  /  1;	  int    destOffs    =    offs    /    1;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
334	[BUG]  [BUGGY]  int  destOffs  =  nInUse  -  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  -  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  -  hi;	  int    destOffs    =    nInUse    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
335	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readObject();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readObject();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readObject();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
336	[BUG]  [BUGGY]  int  destOffs  =  ln  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  ln  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  ln  +  1;	  int    destOffs    =    len    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
337	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(this.temp_charArray2d);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(this.temp_charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(this.temp_charArray2d);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
338	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(false);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(false);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(false);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
339	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(temp_charArray2d);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(temp_charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(temp_charArray2d);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
340	[BUG]  [BUGGY]  int  destOffs  =  offs  +  256;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  256;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  256;	  int    destOffs    =    offs    +    2;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
341	[BUG]  [BUGGY]  int  destOffs  =  offs  +  512;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  512;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  512;	  int    destOffs    =    offs    +    2;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
342	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi.length  -  1  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  1  +  1;	  int    destOffs    =    hi.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
343	[BUG]  [BUGGY]  int  destOffs  =  this.in.length  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.length  -  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.length  -  2;	  int    destOffs    =    this.in.length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
344	[BUG]  [BUGGY]  int  destOffs  =(hi  <  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(hi  <  0)?  -1  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  <  0)?  -1  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
345	[BUG]  [BUGGY]  int  destOffs  =  hi  +  this.in;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  this.in;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  this.in;	  int    destOffs    =    hi    +    len;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
346	[BUG]  [BUGGY]  int  destOffs  =  hi  +  ln;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  +  ln;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  ln;	  int    destOffs    =    hi    +    len;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
347	[BUG]  [BUGGY]  int  destOffs  =  ln  /  offs;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  ln  /  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  ln  /  offs;	  int    destOffs    =    offs    /    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
348	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readObject();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readObject();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readObject();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
349	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(dest);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.read(dest);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.read(dest);	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
350	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readBytes();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readBytes();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
351	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  offs  +  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs  +  2;	  int    destOffs    =    hi    -    offs;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
352	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len  -  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  len  -  1);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
353	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(this.data,  0,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(this.data,  0,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(this.data,  0,  len);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
354	[BUG]  [BUGGY]  int  destOffs  =  offs  +  hi  +  nInUse;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  hi  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  hi  +  nInUse;	  int    destOffs    =    offs    +    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
355	[BUG]  [BUGGY]  int  destOffs  =  dest.length  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  dest.length  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  dest.length  -  1;	  int    destOffs    =    dest.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
356	[BUG]  [BUGGY]  int  destOffs  =  dest.length  /  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  dest.length  /  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  dest.length  /  1;	  int    destOffs    =    dest.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
357	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy()  +  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy()  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy()  +  hi;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
358	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.getAndMoveToFrontDecode_yy();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.getAndMoveToFrontDecode_yy();	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
359	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_xy();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_xy();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_xy();	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
360	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  hi  +  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  -  hi  +  2;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  hi  +  2;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
361	[BUG]  [BUGGY]  int  destOffs  =  this.in.readFully();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.readFully();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readFully();	  int    destOffs    =    this.in.readShort();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
362	[BUG]  [BUGGY]  int  count  =  this.in.read(len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(len);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
363	[BUG]  [BUGGY]  int  count  =  this.in.read(dests);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(dests);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(dests);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
364	[BUG]  [BUGGY]  int  destOffs  =  readInt();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  readInt();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  readInt();	  int    destOffs    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
365	[BUG]  [BUGGY]  char  destOffs  =  offs;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  offs;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
366	[BUG]  [BUGGY]  char  destOffs  =  len;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  len;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
367	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_yy  +  1;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
368	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_1;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
369	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_length;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
370	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readDataBytes(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readDataBytes(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readDataBytes(hi);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
371	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(this.temp_charArray2d);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(this.temp_charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(this.temp_charArray2d);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
372	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readDataRef();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readDataRef();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readDataRef();	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
373	[BUG]  [BUGGY]  int  destOffs  =  len  +  offs  +  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  +  offs  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  offs  +  hi;	  int    destOffs    =    len    +    offs;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
374	[BUG]  [BUGGY]  int  destOffs  =  n  +  offs;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  n  +  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  n  +  offs;	  int    destOffs    =    len    +    offs;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
375	[BUG]  [BUGGY]  int  destOffs  =  n  *  len;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  n  *  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  n  *  len;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
376	[BUG]  [BUGGY]  int  destOffs  =  cftab.length  *  len;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  cftab.length  *  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  cftab.length  *  len;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
377	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi  +  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi  +  1);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
378	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi  +  1,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi  +  1,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi  +  1,  len);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
379	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi,  len);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
380	[BUG]  [BUGGY]  int  hi  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  0;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
381	[BUG]  [BUGGY]  int  hi  =  this.in;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  this.in;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  this.in;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
382	[BUG]  [BUGGY]  int  hi  =  read0();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  read0();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  read0();	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
383	[BUG]  [BUGGY]  int  hi  =  alphaSize100k;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  alphaSize100k;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  alphaSize100k;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
384	[BUG]  [BUGGY]  int  hiOffs  =  offs  +  hi;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hiOffs  =  offs  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hiOffs  =  offs  +  hi;	  int    destOffs    =    hi    +    offs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
385	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(hi  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(hi  -  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(hi  -  1);	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
386	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(width)-  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(width)-  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(width)-  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
387	[BUG]  [BUGGY]  int  destOffs  =  len  -  offs  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  len  -  offs  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  -  offs  +  1;	  int    destOffs    =    len    -    offs;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
388	[BUG]  [BUGGY]  int  destOffs  =  ons  -  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  ons  -  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  ons  -  len;	  int    destOffs    =    len    -    offs;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
389	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy()  +  hi;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy()  +  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy()  +  hi;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
390	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy()  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy()  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy()  +  1;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
391	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_xy();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_xy();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_xy();	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
392	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest_offs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest_offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest_offs);	  int    destOffs    =    this.in.read(offs);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
393	[BUG]  [BUGGY]  int  destOffs  =  1L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  1L;	  int    destOffs    =    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
394	[BUG]  [BUGGY]  int  destOffs  =  1  <  <  len;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  1  <  <  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  1  <  <  len;	  int    destOffs    =    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
395	[BUG]  [BUGGY]  int  destOffs  =  0,  len  =  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  0,  len  =  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  0,  len  =  0;	  int    destOffs    =    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
396	[BUG]  [BUGGY]  char  destOffs  =  len  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char  destOffs  =  len  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  len  -  1;	  int    destOffs    =    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
397	[BUG]  [BUGGY]  int  destOffs  =  n  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  n  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  n  -  1;	  int    destOffs    =    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
398	[BUG]  [BUGGY]  int  count  =  this.in.read(dest,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =  this.in.read(dest,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read(dest,  offs);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
399	[BUG]  [BUGGY]  int  count  =(this.in!=  null)?  0  :  this.in.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =(this.in!=  null)?  0  :  this.in.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =(this.in!=  null)?  0  :  this.in.read();	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
400	[BUG]  [BUGGY]  int  count  =(this.in!=  null)?  this.in.read()  :  hi;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =(this.in!=  null)?  this.in.read()  :  hi;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =(this.in!=  null)?  this.in.read()  :  hi;	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
401	[BUG]  [BUGGY]  int  count  =(this.in!=  null)?  this.in.read()  :  dest.length;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  count  =(this.in!=  null)?  this.in.read()  :  dest.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =(this.in!=  null)?  this.in.read()  :  dest.length;	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
402	[BUG]  [BUGGY]  int  destOffs  =  nInUse  *  len;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  *  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  *  len;	  int    destOffs    =    offs    *    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
403	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy,  offs);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
404	[BUG]  [BUGGY]  byte[][]  dest  =  this.getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.getAndMoveToFrontDecode_yy;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.getAndMoveToFrontDecode_yy;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
405	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(this.blockSize100k);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(this.blockSize100k);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(this.blockSize100k);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
406	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest.length);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest.length);	  int    destOffs    =    this.in.read(false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
407	[BUG]  [BUGGY]  byte  destOffs  =  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  0;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  0;	  int    destOffs    =    0L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
408	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs,  offs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs,  offs);	  int    destOffs    =(int)Math.rint((    int)destOffs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
409	[BUG]  [BUGGY]  int  hi  =  offs  -  len;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  hi  =  offs  -  len;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  offs  -  len;	  int    hi    =    hi;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
410	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy()  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy()  +  1;	  byte[][]    dest    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
411	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs  -  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs  -  1);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
412	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs  -  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  offs  -  hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs  -  hi);	  int    destOffs    =    this.in.read(dest,    offs);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
413	[BUG]  [BUGGY]  int  destOffs  =  offs  -  len  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  -  len  +  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  len  +  1;	  int    destOffs    =    offs    -    len;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
414	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
415	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs.length;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs.length;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs.length;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
416	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
417	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read1();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read1();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read1();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
418	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  dest.length;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  dest.length;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  dest.length;  ++i)  {  dest[i]  =  read0();  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
419	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(dest,  offs);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(dest,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(dest,  offs);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
420	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(width,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readBytes(width,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(width,  len);	  byte[][]    dest    =    this.in.readBytes(hi);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
421	[BUG]  [BUGGY]  int[]  bsLive  =  this.in.readAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  this.in.readAndMoveToFrontDecode_yy;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  this.in.readAndMoveToFrontDecode_yy;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
422	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_BLOCK_STATE;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_BLOCK_STATE;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_BLOCK_STATE;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
423	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_BLOCK;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_BLOCK;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_BLOCK;	  int[]    bsLive    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
424	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest.length);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(dest.length);	  byte[][]    dest    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
425	[BUG]  [BUGGY]  int  destOffs  =  1  <  <  dest.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  1  <  <  dest.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  1  <  <  dest.length;	  int    destOffs    =    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
426	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  hi  *  offs;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read()  -  hi  *  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  hi  *  offs;	  int    destOffs    =    this.in.read()    -    hi;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
427	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read(this.charArray2d);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =  this.in.read(this.charArray2d);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read(this.charArray2d);	  int[][]    dest    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
428	[BUG]  [BUGGY]  int  destOffs  =(destOffs  <  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(destOffs  <  0)?  0  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(destOffs  <  0)?  0  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
429	[BUG]  [BUGGY]  int  destOffs  =(len  <  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =(len  <  0)?  0  :  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(len  <  0)?  0  :  1;	  int    destOffs    =(hi    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
430	[BUG]  [BUGGY]  while((  offs  +  hi)>  dest.length)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  while((  offs  +  hi)>  dest.length)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	while((  offs  +  hi)>  dest.length)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i],    offs[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
431	[BUG]  [BUGGY]  int  destOffs  =  hi  -  this.in.currentState;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  hi  -  this.in.currentState;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  this.in.currentState;	  int    destOffs    =    hi    -    nInUse;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
432	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest)-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest)-  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest)-  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
433	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(this.blockSize100k)-  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(this.blockSize100k)-  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(this.blockSize100k)-  1;	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
434	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(this.blockSize100k  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(this.blockSize100k  -  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(this.blockSize100k  -  1);	  int    destOffs    =    this.in.read()    -    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
435	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(offs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy(offs);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
436	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy(len);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
437	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy(destOffs);	  int[]    bsLive    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
438	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(width,  len  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(width,  len  +  1);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(width,  len  +  1);	  int    destOffs    =    this.in.read(width,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
439	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  getAndMoveToFrontDecode_yy();	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
440	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  getAndMoveToFrontDecode_yy.read();	  int    b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
441	[BUG]  [BUGGY]  int  destOffs  =  nInUse  -  1L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  nInUse  -  1L;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  -  1L;	  int    destOffs    =    offs    -    1L;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
442	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][0]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
444	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[0][i]);  }	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
445	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  dest[0][0]);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  System.arraycopy(dest,  0,  dest[0][0]);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	System.arraycopy(dest,  0,  dest[0][0]);	  if(offs    >    hi)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    dest[i][i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
446	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  dest.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  dest.length);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  dest.length);	  int    destOffs    =    this.in.read(dest,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
447	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.readLine();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(int[][])this.in.readLine();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.readLine();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
448	[BUG]  [BUGGY]  char[][]  dest  =(char[][])this.in.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  char[][]  dest  =(char[][])this.in.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char[][]  dest  =(char[][])this.in.read();	  int[][]    dest    =(int[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
449	[BUG]  [BUGGY]  int  destOffs  =  offs  +  hi.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  hi.length;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  hi.length;	  int    destOffs    =    hi.length;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
450	[BUG]  [BUGGY]  int  destOffs  =  offs  +  nInUse  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  nInUse  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  nInUse  -  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
451	[BUG]  [BUGGY]  int  destOffs  =  offs  +  len  *  MIN_BLOCK_STATE  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  offs  +  len  *  MIN_BLOCK_STATE  -  1;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  len  *  MIN_BLOCK_STATE  -  1;	  int    destOffs    =    offs    +    len    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
452	[BUG]  [BUGGY]  t  destOffs  =  hi  +  nInUse;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  t  destOffs  =  hi  +  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	t  destOffs  =  hi  +  nInUse;	  int    destOffs    =    nInUse    +    hi;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
453	[BUG]  [BUGGY]  Integer  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  Integer  destOffs  =  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	Integer  destOffs  =  nInUse;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
454	[BUG]  [BUGGY]  Character  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  Character  destOffs  =  nInUse;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	Character  destOffs  =  nInUse;	  char    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
455	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  len,  offs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  this.in.read(dest,  len,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  len,  offs);	  int    destOffs    =    this.in.read(dest,    len);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
456	[BUG]  [BUGGY]  byte  destOffs  =  this.in.nextByte();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  this.in.nextByte();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  this.in.nextByte();	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
457	[BUG]  [BUGGY]  byte  destOffs  =  this.in.nextInt(hi);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte  destOffs  =  this.in.nextInt(hi);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  this.in.nextInt(hi);	  byte    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
458	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_lattice;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_lattice;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_lattice;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
459	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  +  offs;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy  +  offs;  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_yy  +  offs;	  int    destOffs    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
460	[BUG]  [BUGGY]  int[][]  dest  =(byte[][])this.in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  int[][]  dest  =(byte[][])this.in.read();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(byte[][])this.in.read();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
461	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.readLine();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =(byte[][])this.in.readLine();  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.readLine();	  byte[][]    dest    =(byte[][])this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
462	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(width,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(width,  len);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(width,  len);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
463	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData(dest,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;      [BUGGY]  byte[][]  dest  =  this.in.readData(dest,  offs);  [BUGGY]      int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData(dest,  offs);	  byte[][]    dest    =    this.in.readData();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
