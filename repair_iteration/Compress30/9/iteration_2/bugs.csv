bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  destOffs  =  offs  +  hi;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  +  hi;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  hi;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  int  destOffs  =  hi  +  len;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi  +  len;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  len;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  int  destOffs  =  offs  +  nInUse;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  +  nInUse;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  nInUse;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  int  destOffs  =  offs  +  len  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  +  len  +  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  len  +  1;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  int  destOffs  =  offs  +  len  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  +  len  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  len  -  1;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  int  destOffs  =  offs  /  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  /  len;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  len;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(hi);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(hi);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(dest);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(offs);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(offs);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  int  destOffs  =  this.in.readInt();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.readInt();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readInt();	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  int  destOffs  =  this.in.readShort();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.readShort();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.readShort();	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  hi;  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read()  -  hi;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  hi;	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  int  destOffs  =  hi  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi  +  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  1;	  int    destOffs    =    offs    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  int  destOffs  =  offs  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  +  2;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  +  2;	  int    destOffs    =    offs    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  int  destOffs  =  len  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  len  +  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  1;	  int    destOffs    =    offs    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  nInUse  +  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  1;	  int    destOffs    =    offs    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  int  b  =  read0();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  b  =  read0();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  b  =  read0();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i],  offs[i][i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  dest[i][i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int[]  bsLive  =  getAndMoveToFrontDecode_yy;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[]  bsLive  =  getAndMoveToFrontDecode_yy;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  int  b  =  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	if(offs  >  hi)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i]  =  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  int  destOffs  =  len  -  offs;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  len  -  offs;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  -  offs;	  int    destOffs    =    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  int  destOffs  =  hi.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi.length;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length;	  int    destOffs    =    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  char  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  char  destOffs  =  nInUse;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	char  destOffs  =  nInUse;	  int    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  byte  destOffs  =  nInUse;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte  destOffs  =  nInUse;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte  destOffs  =  nInUse;	  int    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  int  destOffs  =  nInUse  +  hi;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  nInUse  +  hi;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  +  hi;	  int    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  int  destOffs  =  hi  -  nInUse;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi  -  nInUse;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  nInUse;	  int    destOffs    =    nInUse;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  int  destOffs  =  hi  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  int  destOffs  =  len  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  len  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  -  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  int  destOffs  =  nInUse  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  nInUse  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  nInUse  -  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  int  destOffs  =  offs  -  hi;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  -  hi;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  hi;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  int  destOffs  =  hi.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi.length  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi.length  -  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  int  destOffs  =  offs  -  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  -  2;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  2;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  int  destOffs  =  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  1;	  int    destOffs    =    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  int  destOffs  =  0L;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  0L;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  0L;	  int    destOffs    =    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  int  destOffs  =  hi  -  offs;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi  -  offs;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  -  offs;	  int    destOffs    =    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  int  destOffs  =  hi  +  offs;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  hi  +  offs;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  hi  +  offs;	  int    destOffs    =    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  int  hi  =  hi;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  hi  =  hi;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  hi  =  hi;	  int    destOffs    =    hi;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(len);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(len);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(len);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(false);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(false);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(false);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(width);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(width);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(width);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  int  destOffs  =  offs  -  1L;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  -  1L;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  1L;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  getAndMoveToFrontDecode_yy;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  getAndMoveToFrontDecode_yy;	  int    destOffs    =    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  int  destOffs  =(hi  <  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =(hi  <  0)?  0  :  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(hi  <  0)?  0  :  1;	  int    destOffs    =    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  int  destOffs  =  this.in.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.length;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.length;	  int    destOffs    =    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  int  destOffs  =  len  +  offs;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  len  +  offs;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  len  +  offs;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  int  destOffs  =  offs  *  len;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  *  len;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  *  len;	  int    destOffs    =    offs    +    len;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy(hi);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  byte[][]  dest  =(byte[][])this.in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =(byte[][])this.in.read();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =(byte[][])this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =  getAndMoveToFrontDecode_yy;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  getAndMoveToFrontDecode_yy;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readBytes(hi);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =  this.in.readBytes(hi);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readBytes(hi);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =(int)Math.rint((  int)destOffs);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =(int)Math.rint((  int)destOffs);	  int    destOffs    =    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  int  destOffs  =  dest.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  dest.length  +  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  dest.length  +  1;	  int    destOffs    =    offs    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  int  destOffs  =  offs  -  len;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  -  len;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  -  len;	  int    destOffs    =    len;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  int[][]  dest  =(int[][])this.in.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int[][]  dest  =(int[][])this.in.read();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =(int[][])this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =  this.in.read();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  byte[][]  dest  =  this.in.readData();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  byte[][]  dest  =  this.in.readData();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	byte[][]  dest  =  this.in.readData();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  int  count  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  count  =  this.in.read();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  count  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  int[][]  dest  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int[][]  dest  =  this.in.read();  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int[][]  dest  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  offs);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(dest,  offs);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  offs);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(dest,  len);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  len);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(width,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(width,  len);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(width,  len);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read(dest,  0,  len);  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read(dest,  0,  len);	  int    destOffs    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  int  destOffs  =  this.in.read()  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  this.in.read()  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  this.in.read()  -  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  int  destOffs  =  ons  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  ons  -  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  ons  -  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  int  destOffs  =  offs  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  if  (offs  +  len  >  dest.length)  {  throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;    [BUGGY]  int  destOffs  =  offs  /  1;  [BUGGY]    int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	170	170	1	replace	int  destOffs  =  offs  /  1;	  int    destOffs    =    offs    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
