bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  destOffs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(len,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
2	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(offs,  destOffs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(offs,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(offs,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(len,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
3	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  destOffs,  b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  destOffs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(len,  destOffs,  b);	  c    =    getAndMoveToFrontDecode_yy(len,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
4	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  len  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  len  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  b);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  destOffs);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
11	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
12	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
13	[BUG]  [BUGGY]  Integer  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
14	[BUG]  [BUGGY]  count(destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  0,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  0,  len);	  count(destOffs,    0);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
15	[BUG]  [BUGGY]  count(destOffs,  0,  destOffs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  0,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  0,  destOffs);	  count(destOffs,    0);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
16	[BUG]  [BUGGY]  count(destOffs,  1,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  1,  0);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  1,  0);	  count(destOffs,    0);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
17	[BUG]  [BUGGY]  count(destOffs,  1,  len);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  1,  len);	  count(destOffs,    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
18	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  b);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  b);	  c    =    getAndMoveToFrontDecode_yy(len,    b);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
19	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  len,  b);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  len,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  len,  b);	  c    =    getAndMoveToFrontDecode_yy(len,    b);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
20	[BUG]  [BUGGY]  b  =  read0()  +  destOffs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read0()  +  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read0()  +  destOffs;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
21	[BUG]  [BUGGY]  b  =  read0()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read0()  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read0()  +  1;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
22	[BUG]  [BUGGY]  b  =  read1();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read1();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read1();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  b  =  read0()  +  offs;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read0()  +  offs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read0()  +  offs;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  b  =  this.in.read0();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  this.in.read0();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  this.in.read0();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
25	[BUG]  [BUGGY]  b  =  read0()  +  hi;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read0()  +  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read0()  +  hi;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
26	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  2);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  2);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  c  =  in.readAndMoveToFrontDecode_yy[destOffs++];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  in.readAndMoveToFrontDecode_yy[destOffs++];  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  in.readAndMoveToFrontDecode_yy[destOffs++];	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
32	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++]  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++]  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++]  +  1;	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
33	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  getAndMoveToFrontDecode_yy[b++];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  getAndMoveToFrontDecode_yy[b++];  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  getAndMoveToFrontDecode_yy[b++];	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
34	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  hi;	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
35	[BUG]  [BUGGY]  count(destOffs,  destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  destOffs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  destOffs  +  1);	  count(destOffs,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  count(destOffs,  destOffs  -  offs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  destOffs  -  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  destOffs  -  offs);	  count(destOffs,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  destOffs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs  +  destOffs);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
38	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  offs  +  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  offs  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  offs  +  len);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
39	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs  +  len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
40	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs  +  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs  +  len);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
41	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs  +  hi);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  1,  b);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  1,  offs);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  1,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  1,  len);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  2,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  2,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  2,  len);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  hi);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  1,  hi);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
47	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs,  destOffs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(b,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
48	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs,  hi);	  c    =    getAndMoveToFrontDecode_yy(b,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
49	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  offs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  offs,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
51	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs,  len  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs,  len  +  1);	  c    =    getAndMoveToFrontDecode_yy(b,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
52	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    len);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
53	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    len);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
54	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_ch2,  b,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_ch2,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_ch2,  b,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    len);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
55	[BUG]  [BUGGY]  c  =  hi  +  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  hi  +  getAndMoveToFrontDecode_yy;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  hi  +  getAndMoveToFrontDecode_yy;	  c    =    getAndMoveToFrontDecode_yy    +    hi;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  hi  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  hi  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  hi  +  1;	  c    =    getAndMoveToFrontDecode_yy    +    hi;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
57	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  str;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  str;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  str;	  c    =    getAndMoveToFrontDecode_yy    +    hi;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
58	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++]  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++]  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++]  +  1;	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
59	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++],  b;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++],  b;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++],  b;	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
60	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++],  len;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++],  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++],  len;	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
61	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++]  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++]  +  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++]  +  2;	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
62	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs,  b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi,    b);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
63	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi,    b);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
64	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi,    b);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
65	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  hi);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi,    b);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
66	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
67	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
68	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
69	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len,  b);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
70	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs  +  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs  +  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
71	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
72	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  destOffs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
73	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
74	[BUG]  [BUGGY]  count(destOffs,  destOffs,  b);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  destOffs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  destOffs,  b);	  count(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  count(destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  b,  len);	  count(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  count(destOffs,  b,  offs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  b,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  b,  offs);	  count(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  count(destOffs,  offs,  b);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  offs,  b);	  count(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
78	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
79	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
80	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
81	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
82	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(destOffs);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
83	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(hi);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
84	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  +  destOffs;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  +  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy()  +  destOffs;	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
85	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy()  +  1;	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
86	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(b);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
87	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_ch2);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
88	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  hi;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
89	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  b  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  b  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  b  +  1;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
90	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  destOffs;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
91	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  len;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  len;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
92	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  b,  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  b,  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  b,  len;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  str;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  str;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  str;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi)+  destOffs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi)+  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi)+  destOffs;	  c    =    getAndMoveToFrontDecode_yy()    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
95	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  +  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  +  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy()  +  hi;	  c    =    getAndMoveToFrontDecode_yy()    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
96	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  +  offs;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  +  offs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy()  +  offs;	  c    =    getAndMoveToFrontDecode_yy()    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
97	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  *  destOffs;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  *  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy()  *  destOffs;	  c    =    getAndMoveToFrontDecode_yy()    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
98	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi  +  destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi  +  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi  +  destOffs);	  c    =    getAndMoveToFrontDecode_yy()    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
99	[BUG]  [BUGGY]  while(this.in!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(this.in!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(this.in!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
100	[BUG]  [BUGGY]  if(destOffs  ==  hi)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(destOffs  ==  hi)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(destOffs  ==  hi)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
101	[BUG]  [BUGGY]  if(this.in  ==  null)  {  throw  new  IllegalStateException( "stream  closed ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in  ==  null)  {  throw  new  IllegalStateException( "stream  closed ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in  ==  null)  {  throw  new  IllegalStateException( "stream  closed ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
102	[BUG]  [BUGGY]  if(this.in!=  null)  {  throw  new  IllegalStateException( "stream  closed ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  throw  new  IllegalStateException( "stream  closed ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  throw  new  IllegalStateException( "stream  closed ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
103	[BUG]  [BUGGY]  while(this.in  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(this.in  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(this.in  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
104	[BUG]  [BUGGY]  if(this.in  ==  null)  {  throw  new  IllegalStateException( "Stream  closed ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in  ==  null)  {  throw  new  IllegalStateException( "Stream  closed ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in  ==  null)  {  throw  new  IllegalStateException( "Stream  closed ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
105	[BUG]  [BUGGY]  if(this.in!=  null)  {  throw  new  IllegalStateException( "Stream  closed ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  throw  new  IllegalStateException( "Stream  closed ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  throw  new  IllegalStateException( "Stream  closed ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
106	[BUG]  [BUGGY]  count(len,  destOffs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(len,  destOffs);	  count(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  count(destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  offs,  len);	  count(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  count(destOffs,  len,  b);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  len,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  len,  b);	  count(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
110	[BUG]  [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
111	[BUG]  [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	safeAdd(seqToUnseq)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
112	[BUG]  [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
113	[BUG]  [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  destOffs;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  destOffs;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	safeAdd(seqToUnseq)  {  for(int  i  =  offs;  i  <  destOffs;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
114	[BUG]  [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(seqToUnseq)  {  for(int  i  =  offs  +  len;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
115	[BUG]  [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
116	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  su_rNToGo);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  su_rNToGo);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  su_rNToGo);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo,    b);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
117	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  su_rNToGo);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  su_rNToGo);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  su_rNToGo);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo,    b);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
118	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo,    b);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
119	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  offs  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  offs  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  offs  +  1;	  c    =    getAndMoveToFrontDecode_yy    +    offs;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
120	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destoffs;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destoffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  destoffs;	  c    =    getAndMoveToFrontDecode_yy    +    offs;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
121	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  offs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    len);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
122	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    len);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
123	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
124	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
125	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
126	[BUG]  [BUGGY]  safeAdd(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  safeAdd(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	safeAdd(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
127	[BUG]  [BUGGY]  count(destOffs  -  offs,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  -  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  -  offs,  len);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]  count(destOffs  -  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  -  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  -  hi);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  count(destOffs  -  offs  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  -  offs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  -  offs  +  1);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  count(destOffs  -  destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  -  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  -  destOffs);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
131	[BUG]  [BUGGY]  count(len  -  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(len  -  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(len  -  offs);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  count(destOffs  -  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  -  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  -  len);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
133	[BUG]  [BUGGY]  count(len  -  destOffs);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(len  -  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(len  -  destOffs);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
134	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(li,  destOffs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(li,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(li,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
135	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++]  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++]  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++]  +  1;	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
136	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  hi;	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
137	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  b;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  b;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  b;	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
138	[BUG]  [BUGGY]  c  =  this.in.getAndMoveToFrontDecode_yy[destOffs++];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.getAndMoveToFrontDecode_yy[destOffs++];  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.getAndMoveToFrontDecode_yy[destOffs++];	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
139	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
140	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
141	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
142	[BUG]  [BUGGY]  Integer  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
143	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
144	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
145	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
146	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  0);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  0);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  0);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
147	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
148	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  destOffs  +  1;	  c    =    getAndMoveToFrontDecode_yy    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
149	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs  *  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs  *  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  destOffs  *  2;	  c    =    getAndMoveToFrontDecode_yy    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
150	[BUG]  [BUGGY]  c  =  strAndMoveToFrontDecode_yy  +  destOffs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  strAndMoveToFrontDecode_yy  +  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  strAndMoveToFrontDecode_yy  +  destOffs;	  c    =    getAndMoveToFrontDecode_yy    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
151	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs,  len;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs,  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  destOffs,  len;	  c    =    getAndMoveToFrontDecode_yy    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
152	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  hi;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  hi;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
153	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  len;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  len;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
154	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  str;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  str;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  str;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
155	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs.length;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs.length;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
156	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  (hi  <  <  destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  (hi  <  <  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  (hi  <  <  destOffs);	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
157	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
158	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
159	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
160	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
161	[BUG]  [BUGGY]  count(destOffs  +  1,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  1,  len);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
162	[BUG]  [BUGGY]  count(destOffs  +  1,  offs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  1,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  1,  offs);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
163	[BUG]  [BUGGY]  count(destOffs  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  2);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  2);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
164	[BUG]  [BUGGY]  count(destOffs  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  1,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  1,  destOffs);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
165	[BUG]  [BUGGY]  count(destOffs  +  1,  b);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  1,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  1,  b);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
166	[BUG]  [BUGGY]  count(destOffs  +  2,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  2,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  2,  len);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
167	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  destOffs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
168	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
169	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  offs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
170	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
171	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi  +  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  hi  +  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
172	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  b);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
173	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
174	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
175	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
176	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
177	[BUG]  [BUGGY]  nInUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  nInUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	nInUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
178	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
179	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
180	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
181	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  0);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  0);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  b,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  b,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  b,  offs);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  offs,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  b,  offs,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  b,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  b,  offs,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
185	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  b,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
186	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  len,  b);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  len,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  len,  b);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  offs,  b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  offs,  b);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  offs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  offs,  hi);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  offs,  len,  b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  offs,  len,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  offs,  len,  b);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(cftab,  0,  destOffs,  offs,  len);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
191	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
192	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
193	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
194	[BUG]  [BUGGY]  Integer  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
195	[BUG]  [BUGGY]  while(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
198	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
199	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  offs;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  offs;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  offs;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
200	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
201	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  1,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  offs  +  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  offs  +  1,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
202	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  destOffs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  destOffs  +  1);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
203	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  offs  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  offs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  offs  +  1);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
204	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  offs  +  1);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
205	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  4;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  4;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  4;	  c    =    getAndMoveToFrontDecode_yy    +    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray,  0,  destOffs,  b,  len);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray,  0,  destOffs,  offs,  len);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(temp_charArray2,  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray2,  0,  destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray2,  0,  destOffs,  b,  len);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  offs,  b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray,  0,  destOffs,  offs,  b);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray,  0,  destOffs,  destOffs,  len);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(temp_charArray2,  0,  destOffs,  offs,  b);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray2,  0,  destOffs,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray2,  0,  destOffs,  offs,  b);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
212	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rTPos);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rTPos);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rTPos);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
213	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destoffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destoffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destoffs);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
214	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  1;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
215	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  4;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  4;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  4;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
216	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  3;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  3;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  3;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
217	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  1;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
218	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  destOffs,  len);	  c    =    getAndMoveToFrontDecode_yy(hi,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
219	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(hi,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  hi);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  hi);	  c    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
221	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  offs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
222	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(2);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(2);	  c    =    getAndMoveToFrontDecode_yy(1);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
223	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  1);	  c    =    getAndMoveToFrontDecode_yy(1);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
224	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(0);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(0);	  c    =    getAndMoveToFrontDecode_yy(1);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
225	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  2);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  2);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
226	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  offs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  0,  offs);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  0,  b);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  0,  hi);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
230	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  0,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  0,  len);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
231	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  len  -  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  len  -  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  0,  len  -  offs);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  len  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  0,  len  +  1);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
233	[BUG]  [BUGGY]  count(destOffs,  offs  +  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  offs  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  offs  +  len);	  count(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
234	[BUG]  [BUGGY]  count(destOffs,  offs  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  offs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  offs  +  1);	  count(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
235	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  decompressConcatenated;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  decompressConcatenated;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  decompressConcatenated;	  c    =    getAndMoveToFrontDecode_yy    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
236	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  len  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  len  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    len);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
237	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len++,  destOffs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len++,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(len++,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    len);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
238	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  detOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  detOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  detOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    len);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
239	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  cftab);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  cftab);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  cftab);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    unzftab);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
240	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab,  b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    unzftab);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
241	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  offs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi,    len);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
242	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  2;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
243	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  2;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
244	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  2;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
245	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  destOffs;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  destOffs;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
246	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  1;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
247	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  -  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  -  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  -  hi;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
248	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  -  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  -  1;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
249	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  offs;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  offs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  offs;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
250	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  &  hi;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  &  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  &  hi;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
251	[BUG]  [BUGGY]  count(destOffs,  hi,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  hi,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  hi,  len);	  count(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
252	[BUG]  [BUGGY]  count(destOffs,  destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  destOffs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  destOffs,  hi);	  count(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
253	[BUG]  [BUGGY]  count(destOffs,  hi,  b);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  hi,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  hi,  b);	  count(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
254	[BUG]  [BUGGY]  count(destOffs,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  offs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  offs,  hi);	  count(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
255	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
256	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  hi);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
257	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  b);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
258	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  offs,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  offs,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
259	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
260	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
261	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  destOffs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
262	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
263	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
264	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  len,  offs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  len,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  len,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
265	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    len);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
266	[BUG]  [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
267	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
268	[BUG]  [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
269	[BUG]  [BUGGY]  Integer  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Integer  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Integer  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
270	[BUG]  [BUGGY]  b  =  read(destOffs,  offs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read(destOffs,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read(destOffs,  offs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
271	[BUG]  [BUGGY]  b  =  read(destOffs,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read(destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read(destOffs,  len);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
272	[BUG]  [BUGGY]  b  =  readByte(destOffs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  readByte(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  readByte(destOffs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
273	[BUG]  [BUGGY]  b  =  read(destOffs,  b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read(destOffs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read(destOffs,  b);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
274	[BUG]  [BUGGY]  b  =  read(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read(destOffs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read(destOffs  +  1);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
275	[BUG]  [BUGGY]  b  =  readBytes(destOffs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  readBytes(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  readBytes(destOffs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
276	[BUG]  [BUGGY]  b  =  readShort(destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  readShort(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  readShort(destOffs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
277	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode(destOffs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode(destOffs);	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
278	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode(b);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode(b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode(b);	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
279	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode(hi);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode(hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode(hi);	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
280	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode(destOffs,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode(destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode(destOffs,  len);	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
281	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode(0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode(0);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode(0);	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
284	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
285	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  destOffs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
286	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  offs;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  offs;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  offs;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  offs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  0,  len  =  offs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  0,  len  =  offs.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
288	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  len;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  *  len;	  c    =    getAndMoveToFrontDecode_yy    +    len;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
289	[BUG]  [BUGGY]  in.readFully(destOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.readFully(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.readFully(destOffs);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
290	[BUG]  [BUGGY]  in.read(destOffs,  b);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(destOffs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(destOffs,  b);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
291	[BUG]  [BUGGY]  in.read(destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(destOffs,  0,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(destOffs,  0,  len);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
292	[BUG]  [BUGGY]  in.read(destOffs,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(destOffs,  len);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
293	[BUG]  [BUGGY]  in.read(destOffs,  offs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(destOffs,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(destOffs,  offs);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
294	[BUG]  [BUGGY]  in.read(destOffs,  destOffs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(destOffs,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(destOffs,  destOffs);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
295	[BUG]  [BUGGY]  in.read(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(hi,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(hi,  destOffs);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
296	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy()  +  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy()  +  1;	  c    =    getAndMoveToFrontDecode_yy()    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
297	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  3);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  3);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
298	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  4);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  4);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i]  [len];  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i]  [len];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i]  [len];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[0][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[0];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  det[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  det[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  det[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][0]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][0]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][0]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i]  [offs][0];  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i]  [offs][0];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i]  [offs][0];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
306	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  offs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
307	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  hi);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  hi);	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
308	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  getAndMoveToFrontDecode_yy);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  getAndMoveToFrontDecode_yy);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  getAndMoveToFrontDecode_yy);	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
309	[BUG]  [BUGGY]  in.skip(destOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.skip(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.skip(destOffs);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
310	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(len,  offs);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo,    offs);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
311	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
312	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
313	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  getAndMoveToFrontDecode_yy();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  getAndMoveToFrontDecode_yy();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
314	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  getAndMoveToFrontDecode_yy(b);	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
315	[BUG]  [BUGGY]  b  =  getAndMoveToUnseq();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  getAndMoveToUnseq();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  getAndMoveToUnseq();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
316	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
317	[BUG]  [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  offs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray,  0,  destOffs,  offs,  hi);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
318	[BUG]  [BUGGY]  System.arraycopy(temp_charArray2,  0,  destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray2,  0,  destOffs,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray2,  0,  destOffs,  destOffs,  len);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
319	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
320	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  offs  +  len;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  offs  +  len;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  offs  +  len;	  c    =    getAndMoveToFrontDecode_yy    +    offs;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
321	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  2;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
322	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  b;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  b;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  b;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
323	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
324	[BUG]  [BUGGY]  while(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
325	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
326	[BUG]  [BUGGY]  count(destOffs,  hi  +  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  hi  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  hi  +  len);	  count(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
327	[BUG]  [BUGGY]  count(destOffs,  hi  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  hi  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  hi  +  1);	  count(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
328	[BUG]  [BUGGY]  count(destOffs,  3);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  3);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  3);	  count(destOffs,    2);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
329	[BUG]  [BUGGY]  count(destOffs  +  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  3);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  3);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
330	[BUG]  [BUGGY]  count(destOffs  +  offs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  offs);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
331	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  hi);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(len,  hi);	  c    =    getAndMoveToFrontDecode_yy(len,    b);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
332	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
333	[BUG]  [BUGGY]  if(destOffs  >=  hi)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(destOffs  >=  hi)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(destOffs  >=  hi)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
334	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][0]  =  0;  }	  if(this.in!=    null)    {    for(int    i    =    0,    len    =    this.in.length;    i    <    len;    ++i)    {    dest[i][0]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
335	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
336	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  1,  offs);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  1,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  1,  offs);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
337	[BUG]  [BUGGY]  System.arraycopy(crc,  0,  destOffs,  1,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(crc,  0,  destOffs,  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(crc,  0,  destOffs,  1,  len);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
338	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  len  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(dest,  0,  destOffs,  1,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(dest,  0,  destOffs,  1,  len  +  1);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
339	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  destOffs,  b);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  destOffs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  destOffs,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
340	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  hi);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
341	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
342	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  in.read();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  in.read();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  in.read();	  c    =    getAndMoveToFrontDecode_yy    +    hi;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
343	[BUG]  [BUGGY]  c  =(this.seqToUnseq[destOffs++]  <  <  1)?  1  :  this.seqToUnseq[destOffs++];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =(this.seqToUnseq[destOffs++]  <  <  1)?  1  :  this.seqToUnseq[destOffs++];  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =(this.seqToUnseq[destOffs++]  <  <  1)?  1  :  this.seqToUnseq[destOffs++];	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
344	[BUG]  [BUGGY]  System.arraycopy(data[destOffs,  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data[destOffs,  0,  destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data[destOffs,  0,  destOffs,  b,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
345	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  b,  offs);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  b,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  b,  offs);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
346	[BUG]  [BUGGY]  System.arraycopy(data[destOffs],  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data[destOffs],  0,  destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data[destOffs],  0,  destOffs,  b,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
347	[BUG]  [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(cftab,  0,  destOffs,  b,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
348	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(li,  b);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(li,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(li,  b);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo,    b);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
349	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  1L;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  1L;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  1L;	  c    =    getAndMoveToFrontDecode_yy    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
350	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  3;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  +  3;	  c    =    getAndMoveToFrontDecode_yy    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
351	[BUG]  [BUGGY]  count(destOffs,  len  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  len  +  1);	  count(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
352	[BUG]  [BUGGY]  count(destOffs,  len  -  offs);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  len  -  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  len  -  offs);	  count(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
353	[BUG]  [BUGGY]  b  =  read0(destOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read0(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read0(destOffs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
354	[BUG]  [BUGGY]  b  =  read(0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read(0);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read(0);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
355	[BUG]  [BUGGY]  b  =  read2(destOffs);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read2(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read2(destOffs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
356	[BUG]  [BUGGY]  b  =  read(b);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  read(b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  read(b);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
357	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    read0();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
358	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
359	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  2;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  *  2;	  c    =    getAndMoveToFrontDecode_yy    +    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
360	[BUG]  [BUGGY]  if(destOffs  <  hi)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(destOffs  <  hi)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(destOffs  <  hi)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
361	[BUG]  [BUGGY]  if(this.in!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(this.in!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(this.in!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
362	[BUG]  [BUGGY]  if(destOffs  >=  hi)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(destOffs  >=  hi)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(destOffs  >=  hi)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
363	[BUG]  [BUGGY]  if(b  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(b  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(b  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
364	[BUG]  [BUGGY]  count(destOffs,  b  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  b  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  b  +  1);	  count(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
365	[BUG]  [BUGGY]  c  =  computedBlockCRC[destOffs++]  +  destOffs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  computedBlockCRC[destOffs++]  +  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  computedBlockCRC[destOffs++]  +  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
366	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  b  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
367	[BUG]  [BUGGY]  count(offs  -  destOffs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(offs  -  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(offs  -  destOffs);	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
368	[BUG]  [BUGGY]  count(destOffs  -  offs)+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  -  offs)+  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  -  offs)+  1;	  count(destOffs    -    offs);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
369	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  b,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  b,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_rNToGo,  b,  len);	  c    =    getAndMoveToFrontDecode_yy(b,    len);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
370	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  hi);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  b,  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi,    b);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
371	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  HEAD_BLOCK_STATE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  HEAD_BLOCK_STATE;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  HEAD_BLOCK_STATE;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
372	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  dest;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  dest;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  dest;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
373	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs,  hi  +  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs,  hi  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  offs,  hi  +  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    len);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
374	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode(su_z);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode(su_z);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode(su_z);	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
375	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(len  +  1);	  c    =    getAndMoveToFrontDecode_yy(len);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
376	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  1L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  1L;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  1L;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
377	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  0,  offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  0,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  0,  offs);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(crc,  0,  destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(crc,  0,  destOffs,  0,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(crc,  0,  destOffs,  0,  len);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
380	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(inUse)  {  inUse  =  true;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
381	[BUG]  [BUGGY]  count(destOffs,  offs  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  offs  -  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  offs  -  1);	  count(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
382	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(1);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
383	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  -  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy()  -  1;	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
384	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    unzftab);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
385	[BUG]  [BUGGY]  System.arraycopy(data[destOffs],  0,  destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data[destOffs],  0,  destOffs,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data[destOffs],  0,  destOffs,  offs,  len);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
386	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  offs,  hi);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
387	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  b);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  offs,  b);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
388	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  hi);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  hi);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  hi);	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
389	[BUG]  [BUGGY]  bsLive  =  read(destOffs);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  bsLive  =  read(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	bsLive  =  read(destOffs);	  b    =    read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
390	[BUG]  [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  len,  offs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(temp_charArray,  0,  destOffs,  len,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(temp_charArray,  0,  destOffs,  len,  offs);	  System.arraycopy(temp_charArray2,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
391	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  *  1;	  c    =    getAndMoveToFrontDecode_yy    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
392	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_tPos,  b);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(su_tPos,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(su_tPos,  b);	  c    =    getAndMoveToFrontDecode_yy(su_rNToGo,    b);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
393	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  hi;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  hi;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  *  hi;	  c    =    getAndMoveToFrontDecode_yy    +    hi;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
394	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  b;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  b;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  b;	  c    =    getAndMoveToFrontDecode_yy[destOffs++],    b;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
395	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  offs,  b);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(len,  offs,  b);	  c    =    getAndMoveToFrontDecode_yy(len,    b);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
396	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(offs,  b);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(offs,  b);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(offs,  b);	  c    =    getAndMoveToFrontDecode_yy(len,    b);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
397	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  destOffs;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
398	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  &  destOffs;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  &  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  &  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
399	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  destOffs;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  /  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
400	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  destOffs;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  *  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
401	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    destOffs;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
402	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  len  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b,  len  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(b,  len  +  1);	  c    =    getAndMoveToFrontDecode_yy(b,    offs    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
403	[BUG]  [BUGGY]  if(destOffs  ==  offs)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(destOffs  ==  offs)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(destOffs  ==  offs)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
404	[BUG]  [BUGGY]  while(destOffs  <  hi)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(destOffs  <  hi)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(destOffs  <  hi)  {  throw  new  IllegalStateException( " ");  }	  if(this.in    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
405	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  offs;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  offs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  *  offs;	  c    =    getAndMoveToFrontDecode_yy    +    offs;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
406	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  destOffs;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy  *  destOffs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy  *  destOffs;	  c    =    getAndMoveToFrontDecode_yy    +    offs;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
407	[BUG]  [BUGGY]  count(destOffs,  destOffs  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  destOffs  -  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  destOffs  -  1);	  count(destOffs,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
408	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  unzftab);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  unzftab);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  unzftab);	  c    =    getAndMoveToFrontDecode_yy(destOffs++,    hi);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
409	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
410	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_rNToGo);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_rNToGo);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_rNToGo);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
411	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(len);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
412	[BUG]  [BUGGY]  if(len  <  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  if(len  <  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	if(len  <  offs)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i];  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
413	[BUG]  [BUGGY]  Dest[i][b]  =  data[i];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  Dest[i][b]  =  data[i];  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	Dest[i][b]  =  data[i];	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
414	[BUG]  [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i].length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i].length;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(seqToUnseq)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][b]  =  data[i].length;  }	  if(seqToUnseq)    {    for(int    i    =    offs;    i    <    len;    ++i)    {    dest[i][b]    =    data[i];    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
415	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  offs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
416	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(str,  destOffs);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(str,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(str,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(len,    destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
417	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i,    len);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
418	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  &  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  &  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  &  1;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
419	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  1,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  1,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    offs    +    len);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
420	[BUG]  [BUGGY]  count(destOffs,  b,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs,  b,  0);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs,  b,  0);	  count(destOffs,    b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
421	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  b.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  b.length;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  b.length;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
422	[BUG]  [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  1,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  1,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(cftab,  0,  destOffs,  1,  len);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
423	[BUG]  [BUGGY]  System.arraycopy(crc,  0,  destOffs,  1,  offs);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(crc,  0,  destOffs,  1,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(crc,  0,  destOffs,  1,  offs);	  System.arraycopy(dest,    0,    destOffs,    1,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
424	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
425	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
426	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  1;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  -  1;	  c    =    getAndMoveToFrontDecode_yy[destOffs++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
427	[BUG]  [BUGGY]  bsBuff  =  read0();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  bsBuff  =  read0();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	bsBuff  =  read0();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
428	[BUG]  [BUGGY]  b  =  readUnseq();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  b  =  readUnseq();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	b  =  readUnseq();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
429	[BUG]  [BUGGY]  System.arraycopy(len,  0,  destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(len,  0,  destOffs,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(len,  0,  destOffs,  destOffs,  len);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
430	[BUG]  [BUGGY]  System.arraycopy(str,  0,  destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(str,  0,  destOffs,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(str,  0,  destOffs,  destOffs,  len);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
431	[BUG]  [BUGGY]  System.arraycopy(c,  0,  destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(c,  0,  destOffs,  offs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(c,  0,  destOffs,  offs,  len);	  System.arraycopy(dest,    0,    destOffs,    offs,    len);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
432	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++],  destOffs++];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++],  destOffs++];  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++],  destOffs++];	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
433	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++],  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++],  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++],  len);	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
434	[BUG]  [BUGGY]  c  =  this.seqToUnseq[destOffs++],  offs;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.seqToUnseq[destOffs++],  offs;  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.seqToUnseq[destOffs++],  offs;	  c    =    this.seqToUnseq[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
435	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(li  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  getAndMoveToFrontDecode_yy(li  +  1,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  getAndMoveToFrontDecode_yy(li  +  1,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
436	[BUG]  [BUGGY]  inUse  =  false;  for(int  i  =  offs  +  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  inUse  =  false;  for(int  i  =  offs  +  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	inUse  =  false;  for(int  i  =  offs  +  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
437	[BUG]  [BUGGY]  in.read();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read();	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
438	[BUG]  [BUGGY]  in.read(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  in.read(destOffs  +  1);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	in.read(destOffs  +  1);	  in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
439	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  len);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++],  len);	  c    =    this.in.readAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
440	[BUG]  [BUGGY]  System.arraycopy(b,  0,  destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(b,  0,  destOffs,  destOffs,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(b,  0,  destOffs,  destOffs,  len);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
441	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  len,  destOffs);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(data,  0,  destOffs,  len,  destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(data,  0,  destOffs,  len,  destOffs);	  System.arraycopy(dest,    0,    destOffs,    b,    len);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
442	[BUG]  [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(cftab,  0,  destOffs,  0,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(cftab,  0,  destOffs,  0,  len);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
443	[BUG]  [BUGGY]  System.arraycopy(crc,  0,  destOffs,  0,  offs);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(crc,  0,  destOffs,  0,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(crc,  0,  destOffs,  0,  offs);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
444	[BUG]  [BUGGY]  System.arraycopy(st,  0,  destOffs,  0,  offs);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  System.arraycopy(st,  0,  destOffs,  0,  offs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	System.arraycopy(st,  0,  destOffs,  0,  offs);	  System.arraycopy(dest,    0,    destOffs,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
445	[BUG]  [BUGGY]  c  =  readAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  readAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  readAndMoveToFrontDecode_yy(destOffs);	  c    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
446	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
447	[BUG]  [BUGGY]  nInUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  nInUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	nInUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
448	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy(destOffs++,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy(destOffs++,  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy(destOffs++,  len);	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
449	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++],  len);	  c    =    this.getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
450	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  getAndMoveToFrontDecode_yy;  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    0,    len    =    offs;    i    <    len;    ++i)    {    dest[i][i]    =    getAndMoveToFrontDecode_yy;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
451	[BUG]  [BUGGY]  count(destOffs  +  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  count(destOffs  +  len);  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	count(destOffs  +  len);	  count(destOffs    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
452	[BUG]  [BUGGY]  c  =  readAndMoveToFrontDecode();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  c  =  readAndMoveToFrontDecode();  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	c  =  readAndMoveToFrontDecode();	  c    =    getAndMoveToFrontDecode();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
453	[BUG]  [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	while(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
454	[BUG]  [BUGGY]  nInUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;      [BUGGY]  nInUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }  [BUGGY]      }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	1.0	174	174	1	replace	nInUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i  +  1,  b);  }	  if(inUse)    {    inUse    =    false;    for(int    i    =    offs;    i    <    len;    ++i)    {    System.arraycopy(dest,    0,    destOffs,    i    +    1,    b);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
