projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70parent!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random!=null||random.equals(""))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random!=null||random.equals(Random.class))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer());
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random.nextDouble();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&RandomUtils.isEmpty(random)){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansplusPlus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,NUMBER_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.GREGOR);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer(){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70[Delete]
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add("MeansPlusPlusClusterer()isnotanexception.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newLinkedHashMap<String,Object>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=random;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableClusterStrategy.notNull(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newArrayList<String>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_SYNTHETIC,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_SYNTHETIC,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_SYNTHETIC,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random),this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random),false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutableValues=newArrayList<Random>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutableValues=random.nextValue();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator!=null?null:random.mutator();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,2);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,3);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutator<?>mutator==null&&(random!=null||random.equals(Random.class))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutatorUtils.isEmpty(random)){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator!=null&&RandomUtils.isEmpty(random)){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null||RandomUtils.isEmpty(random)){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random),newEmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE),false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,null,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(null,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(null,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random,EmptyClusterStrategy.LARGEST_VARIANCE,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random,EmptyClusterStrategy.LARGEST_VARIANCE,true);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,2);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,random,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,KEY_SECOND);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlus(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newLinkedList<String>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator!=null&&random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null||random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutators.add("MeansPlusPlusClusterer()isnotanexception.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add("KMeansPlusPlusClusterer()isnotanexception.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,newRandom(random));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutators.add(newKMeansPlusPlusClusterer());
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()-1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()+1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()),0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class,true);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class,random.type);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,null,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,2);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,random,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()-1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()+1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()-2));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.asList()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random),false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeInit(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,NUMBER_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(null,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(null,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer(){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.class,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.class,random.type);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.class,random.getValueType());
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=newMutableMeansPlusPlusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=newMutableMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=EmptyClusterStrategy.NONE;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=EmptyClusterStrategy.LARGEST_VARIANCE;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansplus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansplus(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansplusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutators.add("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.GREGOR,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.GREGOR,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(this.random,EmptyClusterStrategy.GREGOR);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableClusterStrategy.notEmpty(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableClusterStrategy.notNull(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableClusterStrategy.notNull(this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newArrayList<String,Object>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()),false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getKey()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random.nextDouble()+1;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random.nextDouble()-1;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random.nextDouble()/2;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70parent==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.parent!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutableValues=newLinkedHashMap<String,Object>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,true);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEEST_VARIANCE,true);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()+1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getKey()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()),false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,true);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=EmptyClusterStrategy.LARGEST_VARIANCE;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.valueOf(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=EmptyClusterStrategy.NONE;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newHashMap<Random,EmptyClusterStrategy>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,null,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()+1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()-1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutator<?>mutator==null&&(random!=null||random.equals(""))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random!=null||random.equals("_"))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getKey()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutator<Object>mutator==null&&(random!=null||random.equals(""))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,0,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random}null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.RANGE_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC+1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,KMeansPlusPlusClusterer.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,KMeansPlusPlusPrettyPrinter.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(this));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(null,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.GREGOR_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.GREGOR_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=newKMeansPlusPlusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustnotbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClustererisnotinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustnotbeinitialized");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random)+1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random+1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random.valueOf(random));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()+2));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,Random.class,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,KMeansPlusPlusPlusClusterer.DEFAULT);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(0));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newHashMap<Random,EmptyClusterStrategy.LARGEST_VARIANCE;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,2);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC+1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(null,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutator<Object>mutator==null&&(random!=null||random.equals(Random.class))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.RANGE_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableClusterStrategy.notNull(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAccess(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()-1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()+1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random,KMeansPlusPlusPlusClusterer);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.class,KMeansPlusPlusPlusClusterer.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random.nextToken()){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,random,1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,random,this);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70}elseif(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70}elseif(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add("KMeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=newKMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,newObject[]{});
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(null,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random-1));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansplusPlus(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newRandom();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE),null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.ALWAYS_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer(){thrownewIllegalArgumentException("MeansplusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safe(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random,1);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_SYNTHETIC,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutator{null&&random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutatorUtils.isNotEmpty(random)){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,4);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70Mutators=newLinkedHashMap<String,Object>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random==null||random.equals(Random.class))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newArrayList<String>(System.arraycopy(random,0,mutators,0,random.length));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random!=null||random.equals("null"))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,random,KMeansPlusPlusPlusClusterer);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,random,KMeansPlusPlusPlusClusterer());
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()),random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random!=null){thrownewIllegalArgumentException("MeanPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported:");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.DECEMBER);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70}elseif(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.".);}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeAdd(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()),random);
