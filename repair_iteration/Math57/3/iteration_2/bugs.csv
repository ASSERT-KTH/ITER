bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  clusters  =  Collections.emptyList();  [CE]  cannot  find  symbol  Collections  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  clusters  =  Collections.emptyList();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	clusters  =  Collections.emptyList();	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  Collections	12	None	replace
2	[BUG]  [BUGGY]  if(clusters!=  null)  {  clusters  =  Collections.EMPTY_LIST;  }  [CE]  cannot  find  symbol  Collections  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  clusters  =  Collections.EMPTY_LIST;  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  clusters  =  Collections.EMPTY_LIST;  }	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  Collections	12	None	replace
3	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [CE]  cannot  find  symbol  newClusters  [FE]    NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }	  return    null;    	non-compiled	[CE]  cannot  find  symbol  newClusters	16	None	replace
4	[BUG]  [BUGGY]  if(clusters  ==  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [CE]  cannot  find  symbol  newClusters  [FE]      NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }	  return    null;    	non-compiled	[CE]  cannot  find  symbol  newClusters	16	None	replace
5	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  new  HashMap();  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  new  HashMap();  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  new  HashMap();  }	  return    null;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
6	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters!=  '  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters!=  '  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters!=  '	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  illegal  line  end  in  character  literal	19	None	replace
7	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters!=  ')'  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters!=  ')'  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters!=  ')'	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  ')'  expected	19	None	replace
8	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  ==  '  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  ==  '	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  illegal  line  end  in  character  literal	19	None	replace
9	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  ==  ')'  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  ==  ')'  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  ==  ')'	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  ')'  expected	19	None	replace
10	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).as  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).as  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).as	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).assignPointsToClusters(    	non-compiled	[CE]  ')'  expected	21	None	replace
11	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsTo  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsTo  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsTo	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).assignPointsToClusters(    	non-compiled	[CE]  ')'  expected	21	None	replace
12	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsToClusters  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsToClusters  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsToClusters	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).assignPointsToClusters(    	non-compiled	[CE]  ')'  expected	21	None	replace
13	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assign  [CE]  ')'  expected  [FE]                      AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assign  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assign	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).assignPointsToClusters(    	non-compiled	[CE]  ')'  expected	21	None	replace
14	[BUG]  [BUGGY]  clusters  =  new  HashMap();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  clusters  =  new  HashMap();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	clusters  =  new  HashMap();	      if(clusters!=    null)    {    clusters    =    new    HashMap();    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
15	[BUG]  [BUGGY]  Clusters  clusters  =  new  HashMap();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  clusters  =  new  HashMap();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  clusters  =  new  HashMap();	      if(clusters!=    null)    {    clusters    =    new    HashMap();    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
16	[BUG]  [BUGGY]  if(clusters  ==  null)  {  clusters  =  new  HashMap();  }  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  clusters  =  new  HashMap();  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  clusters  =  new  HashMap();  }	      if(clusters!=    null)    {    clusters    =    new    HashMap();    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
17	[BUG]  [BUGGY]  Clusters  <  AssertionError>  clusters  =  new  HashSet  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  <  AssertionError>  clusters  =  new  HashSet  <  AssertionError>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  <  AssertionError>  clusters  =  new  HashSet  <  AssertionError>();	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    else    {    clusters.addAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  clusters  =  new  HashSet  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  clusters  =  new  HashSet  <  AssertionError>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	clusters  =  new  HashSet  <  AssertionError>();	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    else    {    clusters.addAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  Clusters  <  AssertionError>  clusters  =  new  LinkedHashSet  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  <  AssertionError>  clusters  =  new  LinkedHashSet  <  AssertionError>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  <  AssertionError>  clusters  =  new  LinkedHashSet  <  AssertionError>();	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    else    {    clusters.addAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  lusters  =  new  HashSet  <  AssertionError>();  [CE]  cannot  find  symbol  lusters  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  lusters  =  new  HashSet  <  AssertionError>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	lusters  =  new  HashSet  <  AssertionError>();	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    else    {    clusters.addAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol  lusters	7	None	replace
21	[BUG]  [BUGGY]  lusters  =  Collections.emptyList();  [CE]  cannot  find  symbol  lusters  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  lusters  =  Collections.emptyList();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	lusters  =  Collections.emptyList();	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    else    {    Clusters.sort(clusters);    }    	non-compiled	[CE]  cannot  find  symbol  lusters	11	None	replace
22	[BUG]  [BUGGY]  Clusters.sort(clusters);  [CE]  cannot  find  symbol  Clusters  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters.sort(clusters);  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters.sort(clusters);	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    else    {    Clusters.sort(clusters);    }    	non-compiled	[CE]  cannot  find  symbol  Clusters	11	None	replace
23	[BUG]  [BUGGY]  Clusters  clusters  =  Collections.emptyList();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  clusters  =  Collections.emptyList();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  clusters  =  Collections.emptyList();	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    else    {    Clusters.sort(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
24	[BUG]  [BUGGY]  return  this.clusters.values();  [CE]  cannot  find  symbol  clusters  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  this.clusters.values();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return  this.clusters.values();	  return    clusters.values();    	non-compiled	[CE]  cannot  find  symbol  clusters	4	None	replace
25	[BUG]  [BUGGY]  return  clusters.values(),  points);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  clusters.values(),  points);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return  clusters.values(),  points);	  return    clusters.values();    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  return  newClusters.values();  [CE]  cannot  find  symbol  newClusters  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  newClusters.values();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return  newClusters.values();	  return    clusters.values();    	non-compiled	[CE]  cannot  find  symbol  newClusters	4	None	replace
27	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  ')'  expected	20	None	replace
28	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  ')'  expected	20	None	replace
29	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  clusters  =  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  clusters  =  new  HashMap  <  String,Object>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	clusters  =  new  HashMap  <  String,Object>();	      if(clusters!=    null)    {    clusters    =    new    HashMap    <    String,Object>();    }    else    {    clusters.putAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
31	[BUG]  [BUGGY]  Clusters  <  String,Object>  clusters  =  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  <  String,Object>  clusters  =  new  HashMap  <  String,Object>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  <  String,Object>  clusters  =  new  HashMap  <  String,Object>();	      if(clusters!=    null)    {    clusters    =    new    HashMap    <    String,Object>();    }    else    {    clusters.putAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
32	[BUG]  [BUGGY]  Clusters  clusters  =  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  clusters  =  new  HashMap  <  String,Object>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  clusters  =  new  HashMap  <  String,Object>();	      if(clusters!=    null)    {    clusters    =    new    HashMap    <    String,Object>();    }    else    {    clusters.putAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
33	[BUG]  [BUGGY]  lusters  =  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  lusters  [FE]                    AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  lusters  =  new  HashMap  <  String,Object>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	lusters  =  new  HashMap  <  String,Object>();	      if(clusters!=    null)    {    clusters    =    new    HashMap    <    String,Object>();    }    else    {    clusters.putAll(clusters);    }    	non-compiled	[CE]  cannot  find  symbol  lusters	9	None	replace
34	[BUG]  [BUGGY]  clusters  =  newClusters;  [CE]  cannot  find  symbol  newClusters  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  clusters  =  newClusters;  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	clusters  =  newClusters;	      if(clusters!=    null)    {    clusters    =    newClusters;    }    	non-compiled	[CE]  cannot  find  symbol  newClusters	10	None	replace
35	[BUG]  [BUGGY]  if(clusters  ==  null)  {  clusters  =  newClusters;  }  [CE]  cannot  find  symbol  newClusters  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  clusters  =  newClusters;  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  clusters  =  newClusters;  }	      if(clusters!=    null)    {    clusters    =    newClusters;    }    	non-compiled	[CE]  cannot  find  symbol  newClusters	10	None	replace
36	[BUG]  [BUGGY]  Clusters  newClusters  =  null;  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  newClusters  =  null;  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  newClusters  =  null;	      if(clusters!=    null)    {    clusters    =    newClusters;    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
37	[BUG]  [BUGGY]  assignPointsToClusters(newClusters,  points);  [CE]  cannot  find  symbol  newClusters  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  assignPointsToClusters(newClusters,  points);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	assignPointsToClusters(newClusters,  points);	      	non-compiled	[CE]  cannot  find  symbol  newClusters	5	None	replace
38	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  <  AssertionError>  error  :  clusters.values())  {  clusters.add(error);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  <  AssertionError>  error  :  clusters.values())  {  clusters.add(error);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  <  AssertionError>  error  :  clusters.values())  {  clusters.add(error);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  <  AssertionError>  error  :  clusters.values())  {  clusters  =  newClusters;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  <  AssertionError>  error  :  clusters.values())  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  <  AssertionError>  error  :  clusters.values())  {  clusters  =  newClusters;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  <  Cluster>  error  :  clusters.values())  {  clusters.add(error);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  <  Cluster>  error  :  clusters.values())  {  clusters.add(error);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  <  Cluster>  error  :  clusters.values())  {  clusters.add(error);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  return  this.newClusters;  [CE]  cannot  find  symbol  newClusters  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  this.newClusters;  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return  this.newClusters;	  return    newClusters;    	non-compiled	[CE]  cannot  find  symbol  newClusters	2	None	replace
42	[BUG]  [BUGGY]  Clusters  <  AssertionError>  clusters  =  new  TreeSet  <  AssertionError>();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters  <  AssertionError>  clusters  =  new  TreeSet  <  AssertionError>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters  <  AssertionError>  clusters  =  new  TreeSet  <  AssertionError>();	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    else    {    clusters    =    new    HashSet    <    AssertionError>();    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
43	[BUG]  [BUGGY]  this.clusters  =  clusters;  [CE]  cannot  find  symbol  clusters  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  this.clusters  =  clusters;  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	this.clusters  =  clusters;	      this.clusters    =    newClusters;    	non-compiled	[CE]  cannot  find  symbol  clusters	14	None	replace
44	[BUG]  [BUGGY]  this.clusters  =  Collections.emptyList();  [CE]  cannot  find  symbol  clusters  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  this.clusters  =  Collections.emptyList();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	this.clusters  =  Collections.emptyList();	      this.clusters    =    newClusters;    	non-compiled	[CE]  cannot  find  symbol  clusters	14	None	replace
45	[BUG]  [BUGGY]  this.clusters  =  Collections.EMPTY_LIST;  [CE]  cannot  find  symbol  clusters  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  this.clusters  =  Collections.EMPTY_LIST;  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	this.clusters  =  Collections.EMPTY_LIST;	      this.clusters    =    newClusters;    	non-compiled	[CE]  cannot  find  symbol  clusters	14	None	replace
46	[BUG]  [BUGGY]  return  false;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  false;  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return  false;	  return    true;    	non-compiled	[CE]  incompatible  types	22	None	replace
47	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  false;  }  else  {  clusters  =  newClusters;  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  false;  }  else  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  false;  }  else  {  clusters  =  newClusters;  }	  return    true;    	non-compiled	[CE]  incompatible  types	22	None	replace
48	[BUG]  [BUGGY]  if(clusters  ==  null)  {  return  false;  }  else  {  clusters  =  newClusters;  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  return  false;  }  else  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  return  false;  }  else  {  clusters  =  newClusters;  }	  return    true;    	non-compiled	[CE]  incompatible  types	22	None	replace
49	[BUG]  [BUGGY]  return  null;  if(clusters!=  null)  {  return  null;  }  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters!=  null)  {  return  null;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters!=  null)  {  return  null;  }	  	non-compiled	[CE]  unreachable  statement	15	None	add
50	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  return  null;  }  [CE]  unreachable  statement  [FE]      NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  return  null;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  return  null;  }	  	non-compiled	[CE]  unreachable  statement	15	None	add
51	[BUG]  [BUGGY]  return  null;  if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [CE]  cannot  find  symbol  newClusters  [FE]        NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters!=  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }	  	non-compiled	[CE]  cannot  find  symbol  newClusters	15	None	add
52	[BUG]  [BUGGY]  return  null;  this.clusters  =  newClusters;  [CE]  cannot  find  symbol  clusters  [FE]          NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  this.clusters  =  newClusters;  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    this.clusters  =  newClusters;	  	non-compiled	[CE]  cannot  find  symbol  clusters	15	None	add
53	[BUG]  [BUGGY]  return  null;  if(clusters!=  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clusters[i]  =  newClusters[points.get(i);  }  [CE]  ']'  expected  [FE]            NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters!=  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clusters[i]  =  newClusters[points.get(i);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters!=  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clusters[i]  =  newClusters[points.get(i);  }	  	non-compiled	[CE]  ']'  expected	15	None	add
54	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
55	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
56	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(0));  }  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(0));  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(0));  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
57	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1)  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1)	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  ')'  expected	18	None	replace
58	[BUG]  [BUGGY]  return(this.clusters!=  null)?  null  :  this.clusters;  [CE]  cannot  find  symbol  clusters  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(this.clusters!=  null)?  null  :  this.clusters;  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(this.clusters!=  null)?  null  :  this.clusters;	  return    this;    	non-compiled	[CE]  cannot  find  symbol  clusters	3	None	replace
59	[BUG]  [BUGGY]  return(clusters!=  null)?  null  :  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters!=  null)?  null  :  new  HashMap  <  String,Object>();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters!=  null)?  null  :  new  HashMap  <  String,Object>();	  return    this;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
60	[BUG]  [BUGGY]  return(clusters  ==  null)?  null  :  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters  ==  null)?  null  :  new  HashMap  <  String,Object>();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters  ==  null)?  null  :  new  HashMap  <  String,Object>();	  return    this;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
61	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
62	[BUG]  [BUGGY]  Cluster[]  newClusters  =  this.clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  this.clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  this.clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
63	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
64	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.remove(newClusters.get(i);  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.remove(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.remove(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
65	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    null;    	non-compiled	[CE]  incompatible  types	16	None	replace
66	[BUG]  [BUGGY]  if(clusters  ==  null)  {  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  return  this;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    null;    	non-compiled	[CE]  incompatible  types	16	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  clusters;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	add	if(clusters!=  null)  {  return  clusters;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    null;    	compilable	  [FE]  AssertionError  	16	1	replace
68	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  clusters;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  clusters;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  clusters;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    null;    	compilable	  [FE]  AssertionError  	16	1	replace
69	[BUG]  [BUGGY]  return  _clusters.values();  [CE]  cannot  find  symbol  _clusters  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  _clusters.values();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return  _clusters.values();	  return    clusters.values();    	non-compiled	[CE]  cannot  find  symbol  _clusters	4	None	replace
70	[BUG]  [BUGGY]  if(clusters  ==  null)  {  clusters  =  new  HashSet  <  AssertionError>();  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  clusters  =  new  HashSet  <  AssertionError>();  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  clusters  =  new  HashSet  <  AssertionError>();  }	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
71	[BUG]  [BUGGY]  lusters  =  newClusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  lusters  =  newClusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	lusters  =  newClusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
72	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[0]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[0]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[0]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
73	[BUG]  [BUGGY]  electedClusters  =  new  HashSet  <  AssertionError>();  [CE]  cannot  find  symbol  electedClusters  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  electedClusters  =  new  HashSet  <  AssertionError>();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	electedClusters  =  new  HashSet  <  AssertionError>();	      if(clusters!=    null)    {    clusters    =    new    HashSet    <    AssertionError>();    }    else    {    clusters    =    new    HashSet    <    AssertionError>();    }    	non-compiled	[CE]  cannot  find  symbol  electedClusters	6	None	replace
74	[BUG]  [BUGGY]  if(clusters!=  null)  {  clusters  =  newClusters;  }  else  {  assignPointsToClusters(newClusters,  points);  }  [CE]  cannot  find  symbol  newClusters  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  clusters  =  newClusters;  }  else  {  assignPointsToClusters(newClusters,  points);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  clusters  =  newClusters;  }  else  {  assignPointsToClusters(newClusters,  points);  }	      	non-compiled	[CE]  cannot  find  symbol  newClusters	5	None	replace
75	[BUG]  [BUGGY]  }  else  if(clusters!=  null)  {  clusters  =  newClusters;  }  else  {  assignPointsToClusters(newClusters,  points);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  }  else  if(clusters!=  null)  {  clusters  =  newClusters;  }  else  {  assignPointsToClusters(newClusters,  points);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	}  else  if(clusters!=  null)  {  clusters  =  newClusters;  }  else  {  assignPointsToClusters(newClusters,  points);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  System.err.println( "AssertionError: "  +  statement);  [CE]  cannot  find  symbol  statement  [FE]                    AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  System.err.println( "AssertionError: "  +  statement);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	System.err.println( "AssertionError: "  +  statement);	      	non-compiled	[CE]  cannot  find  symbol  statement	5	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(clusters,  0,  newClusters,  0,  0);  [CE]  cannot  find  symbol  newClusters  [FE]                      AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  System.arraycopy(clusters,  0,  newClusters,  0,  0);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	System.arraycopy(clusters,  0,  newClusters,  0,  0);	      	non-compiled	[CE]  cannot  find  symbol  newClusters	5	None	replace
78	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clusters  =  newClusters[i];  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clusters  =  newClusters[i];  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clusters  =  newClusters[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
79	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [CE]  cannot  find  symbol  newClusters  [FE]      NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  return  null;  }  else  {  clusters  =  newClusters;  }	  	non-compiled	[CE]  cannot  find  symbol  newClusters	15	None	add
80	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clustersToClusters(i,  points);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clustersToClusters(i,  points);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  i++)  {  clustersToClusters(i,  points);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
81	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  false;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  false;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  false;  }	  return    true;    	non-compiled	[CE]  incompatible  types	22	None	replace
82	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  clusters;  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  clusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  clusters;  }	  return    true;    	non-compiled	[CE]  missing  return  statement	22	None	replace
83	[BUG]  [BUGGY]  if(clusters  ==  null)  {  clusters  =  Collections.emptyList();  }  [CE]  cannot  find  symbol  Collections  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)  {  clusters  =  Collections.emptyList();  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)  {  clusters  =  Collections.emptyList();  }	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    	non-compiled	[CE]  cannot  find  symbol  Collections	12	None	replace
84	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  >>  ')'  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  >>  ')'  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  >>  ')'	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  ')'  expected	19	None	replace
85	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  ')'  expected	19	None	replace
86	[BUG]  [BUGGY]  return(clusters!=  null)?  null  :  clusters.values();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters!=  null)?  null  :  clusters.values();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters!=  null)?  null  :  clusters.values();	  return    this;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
87	[BUG]  [BUGGY]  return(clusters!=  null)?  null  :  new  HashMap  <  Integer,Object>();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters!=  null)?  null  :  new  HashMap  <  Integer,Object>();  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters!=  null)?  null  :  new  HashMap  <  Integer,Object>();	  return    this;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
88	[BUG]  [BUGGY]  Cluster[]  newClusters  =  this.clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [CE]  cannot  find  symbol  clusters  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  this.clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  this.clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  cannot  find  symbol  clusters	18	None	replace
89	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[0]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[0]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[0]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
90	[BUG]  [BUGGY]  Clusters[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsTo  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsTo  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsTo	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).assignPointsToClusters(    	non-compiled	[CE]  ')'  expected	21	None	replace
91	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  >>  '  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  >>  '	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  illegal  line  end  in  character  literal	20	None	replace
92	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [Delete]  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [Delete]  '  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [Delete]  '	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  illegal  line  end  in  character  literal	20	None	replace
93	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters.add(error);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters.add(error);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters.add(error);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters  =  newClusters;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters  =  newClusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters  =  newClusters;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.keySet())  {  clusters.add(error);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.keySet())  {  clusters.add(error);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  error  :  clusters.keySet())  {  clusters.add(error);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters.addAll(errors);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters.addAll(errors);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  for(AssertionError  error  :  clusters.values())  {  clusters.addAll(errors);  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  if(clusters  ==  null)return  null;  if(clusters!=  null)  {  return  clusters;  }  [CE]  missing  return  statement  [FE]    NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters  ==  null)return  null;  if(clusters!=  null)  {  return  clusters;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters  ==  null)return  null;  if(clusters!=  null)  {  return  clusters;  }	  return    null;    	non-compiled	[CE]  missing  return  statement	16	None	replace
98	[BUG]  [BUGGY]  }  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  }  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	}  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
99	[BUG]  [BUGGY]  }  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  }  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	}  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
100	[BUG]  [BUGGY]  }  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  }  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	}  else  if(clusters!=  null)  {  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
101	[BUG]  [BUGGY]  return(clusters  ==  null)?  null  :  clusters.toArray(new  Class[clusters.size()  ]);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters  ==  null)?  null  :  clusters.toArray(new  Class[clusters.size()  ]);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters  ==  null)?  null  :  clusters.toArray(new  Class[clusters.size()  ]);	  return    this;    	non-compiled	[CE]  incompatible  types	3	None	replace
102	[BUG]  [BUGGY]  return(clusters!=  null)?  null  :  clusters.toArray(new  Class[clusters.size()  ]);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters!=  null)?  null  :  clusters.toArray(new  Class[clusters.size()  ]);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters!=  null)?  null  :  clusters.toArray(new  Class[clusters.size()  ]);	  return    this;    	non-compiled	[CE]  incompatible  types	3	None	replace
103	[BUG]  [BUGGY]  return(clusters  ==  null)?  null  :  clusters.toArray(new  String[clusters.size()  ]);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return(clusters  ==  null)?  null  :  clusters.toArray(new  String[clusters.size()  ]);  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return(clusters  ==  null)?  null  :  clusters.toArray(new  String[clusters.size()  ]);	  return    this;    	non-compiled	[CE]  incompatible  types	3	None	replace
104	[BUG]  [BUGGY]  Cluster[]  clusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [CE]  variable  clusters  is  already  defined  in  method  cluster(Collection<T>,int,int)  [FE]          AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  clusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  clusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i  +  1));  }	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i    +    1));    }    	non-compiled	[CE]  variable  clusters  is  already  defined  in  method  cluster(Collection<T>,int,int)	18	None	replace
105	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i);  }	  	non-compiled	[CE]  ')'  expected	15	None	add
106	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  return  this;  }  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  return  this;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  return  this;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
107	[BUG]  [BUGGY]  return  null;  if(clusters!=  null)  {  return  this;  }  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters!=  null)  {  return  this;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters!=  null)  {  return  this;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
108	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newPoints.size();  ++i)  {  clusters.add(newPoints[i]);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newPoints.size();  ++i)  {  clusters.add(newPoints[i]);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newPoints.size();  ++i)  {  clusters.add(newPoints[i]);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
109	[BUG]  [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  ClusterTraversal.traverse(compiler,  this);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  return  null;  if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  ClusterTraversal.traverse(compiler,  this);  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	return    null;    if(clusters  ==  null)  {  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  ClusterTraversal.traverse(compiler,  this);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
110	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  >=  ')'  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  >=  ')'  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters  >=  ')'	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters    	non-compiled	[CE]  ')'  expected	19	None	replace
111	[BUG]  [BUGGY]  if(clusters!=  null)  {  return  true;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  if(clusters!=  null)  {  return  true;  }  [BUGGY]    }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	if(clusters!=  null)  {  return  true;  }	  return    true;    	non-compiled	[CE]  incompatible  types	22	None	replace
112	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  }  '  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  }  '  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  }  '	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  ')'  expected	20	None	replace
113	[BUG]  [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Cluster[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  +  1]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).asS	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).asS    	non-compiled	[CE]  ')'  expected	20	None	replace
114	[BUG]  [BUGGY]  Clusters[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsToClusters  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  Clusters[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsToClusters  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	Clusters[]  newClusters  =  clusters.toArray(new  Cluster[clusters.size()  ]);  for(int  i  =  0;  i  <  newClusters.size();  ++i)  {  clusters.add(newClusters.get(i).assignPointsToClusters	      if(clusters!=    null)    {    Cluster[]    newClusters    =    clusters.toArray(new    Cluster[clusters.size()    ]);    for(int    i    =    0;    i    <    newClusters.size();    ++i)    {    clusters.add(newClusters.get(i).assignPointsToClusters(    	non-compiled	[CE]  ')'  expected	21	None	replace
115	[BUG]  [BUGGY]  lusters  =  Clusters.emptyList();  [CE]  cannot  find  symbol  lusters  [FE]        AssertionError    [CONTEXT]    return  clusters;  }  assignPointsToClusters(newClusters,  points);  clusters  =  newClusters;  }    [BUGGY]  lusters  =  Clusters.emptyList();  [BUGGY]    return  clusters;  }      [CLASS]  	projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	0.5773502691896258	134	134	1	replace	lusters  =  Clusters.emptyList();	      if(clusters!=    null)    {    clusters    =    Collections.emptyList();    }    else    {    Clusters.sort(clusters);    }    	non-compiled	[CE]  cannot  find  symbol  lusters	11	None	replace
