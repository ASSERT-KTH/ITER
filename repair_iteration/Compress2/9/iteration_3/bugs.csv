bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
2	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
3	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
4	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
5	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  read);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  read);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
6	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  4);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  4);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  4);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
7	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  2);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  2);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
8	[BUG]  [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1);    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	59	None	replace
9	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1].getBytes();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1].getBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1].getBytes();	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
10	[BUG]  [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1);  [CE]  ']'  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1);	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1);    	non-compiled	[CE]  ']'  expected	59	None	replace
11	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1);  [CE]  ']'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1);	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1);    	non-compiled	[CE]  ']'  expected	59	None	replace
12	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	24	None	add
13	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  Final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  Final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    Final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];	  	non-compiled	[CE]  not  a  statement	24	None	add
14	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realization  =  new  byte[expected.length  *  2  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realization  =  new  byte[expected.length  *  2  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realization  =  new  byte[expected.length  *  2  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	24	None	add
15	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  3  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  3  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realized  =  new  byte[expected.length  *  3  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	24	None	add
16	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    byte[]  realized  =  new  byte[expected.length  *  2  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	24	None	add
17	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	24	None	add
18	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realized  =  new  byte[expected.length  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realized  =  new  byte[expected.length  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    4];    final  byte[]  realized  =  new  byte[expected.length  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	12	None	add
19	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  Final  byte[]  realized  =  new  byte[expected.length  +  4];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  Final  byte[]  realized  =  new  byte[expected.length  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    4];    Final  byte[]  realized  =  new  byte[expected.length  +  4];	  	non-compiled	[CE]  not  a  statement	12	None	add
20	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realized  =  new  byte[expected.length  +  5];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realized  =  new  byte[expected.length  +  5];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    4];    final  byte[]  realized  =  new  byte[expected.length  +  5];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	12	None	add
21	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realization  =  new  byte[expected.length  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realization  =  new  byte[expected.length  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    4];    final  byte[]  realization  =  new  byte[expected.length  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	12	None	add
22	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realized  =  new  byte[expected.length  +  6];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  final  byte[]  realized  =  new  byte[expected.length  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    4];    final  byte[]  realized  =  new  byte[expected.length  +  6];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	12	None	add
23	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  byte[]  realized  =  new  byte[expected.length  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  byte[]  realized  =  new  byte[expected.length  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    4];    byte[]  realized  =  new  byte[expected.length  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	12	None	add
24	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[1];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
25	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[1];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[1];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
26	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[size()  ];  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[size()  ];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[size()  ];	  final    byte[]    realized    =    new    byte[0];    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
27	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[2];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
28	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[2];  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[2];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
29	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[256];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[256];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
30	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[256];  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[256];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[256];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
31	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realized  =  new  byte[0];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realized  =  new  byte[0];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    final  byte[]  realized  =  new  byte[0];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	41	None	add
32	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  Final  byte[]  realized  =  new  byte[0];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  Final  byte[]  realized  =  new  byte[0];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    Final  byte[]  realized  =  new  byte[0];	  	non-compiled	[CE]  not  a  statement	41	None	add
33	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realization  =  new  byte[0];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realization  =  new  byte[0];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    final  byte[]  realization  =  new  byte[0];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	41	None	add
34	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realized  =  new  byte[1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realized  =  new  byte[1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    final  byte[]  realized  =  new  byte[1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	41	None	add
35	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  byte[]  realized  =  new  byte[0];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  byte[]  realized  =  new  byte[0];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    byte[]  realized  =  new  byte[0];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	41	None	add
36	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  incompatible  types	60	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  AssertionFailedError  	60	1	replace
38	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  +  1];  [FE]  AssertionFailedError  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  AssertionFailedError  	60	1	replace
39	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	60	2	replace
40	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  +  1];  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	60	2	replace
41	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  int[expected.length  +  1];  [CE]  incompatible  types  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  int[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  int[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  incompatible  types	60	None	replace
42	[BUG]  [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  +  2];  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	Final  byte[]  realized  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    Final    byte[]    realized    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  not  a  statement	27	None	replace
43	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  -  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  -  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  byte[]  realized  =  new  byte[expected.length  -  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
44	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  Final  byte[]  realized  =  new  byte[expected.length  -  3];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  Final  byte[]  realized  =  new  byte[expected.length  -  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    Final  byte[]  realized  =  new  byte[expected.length  -  3];	  	non-compiled	[CE]  not  a  statement	65	None	add
45	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realization  =  new  byte[expected.length  -  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realization  =  new  byte[expected.length  -  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  byte[]  realization  =  new  byte[expected.length  -  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
46	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  int[]  realized  =  new  byte[expected.length  -  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  int[]  realized  =  new  byte[expected.length  -  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  int[]  realized  =  new  byte[expected.length  -  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
47	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  byte[]  realized  =  new  byte[expected.length  -  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  byte[]  realized  =  new  byte[expected.length  -  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    byte[]  realized  =  new  byte[expected.length  -  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
48	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
49	[BUG]  [BUGGY]  final  int  expectedLength  =  this.groupid.length();  [CE]  cannot  find  symbol  groupid  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  this.groupid.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  this.groupid.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  groupid	49	None	replace
50	[BUG]  [BUGGY]  final  int  expectedLength  =  required.length();  [CE]  cannot  find  symbol  required  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  required.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  required.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  required	49	None	replace
51	[BUG]  [BUGGY]  final  int  expectedLength  =  this.filemode.length();  [CE]  cannot  find  symbol  filemode  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  this.filemode.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  this.filemode.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  filemode	49	None	replace
52	[BUG]  [BUGGY]  final  int  expectedLength  =  offset.length();  [CE]  long  cannot  be  dereferenced  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  offset.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  offset.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  long  cannot  be  dereferenced	49	None	replace
53	[BUG]  [BUGGY]  final  int  expectLength  =  expected.length();  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectLength  =  expected.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectLength  =  expected.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
54	[BUG]  [BUGGY]  final  int  expectedLength  =  expectLength();  [CE]  cannot  find  symbol  [FE]                                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expectLength();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expectLength();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
55	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
56	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
57	[BUG]  [BUGGY]  final  byte  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte  expected  =  ArArchiveEntry.HEADER.getBytes(offset);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
58	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(expected);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(expected);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(expected);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
59	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(length);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
60	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
61	[BUG]  [BUGGY]  final  int[]  realized  =  new  int[expected.length  +  1];  [CE]  no  suitable  method  found  for  read(int[])  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int[]  realized  =  new  int[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int[]  realized  =  new  int[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    int[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  no  suitable  method  found  for  read(int[])	71	None	replace
62	[BUG]  [BUGGY]  final  int[]  realized  =  new  byte[expected.length  +  1];  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    int[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  incompatible  types	71	None	replace
63	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  incompatible  types	50	None	replace
64	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	50	2	replace
65	[BUG]  [BUGGY]  byte[]  realized  =  new  byte[expected.length  +  1];  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	50	2	replace
66	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  /  4];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
67	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  4];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  /  4];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
68	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  4  +  1];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
69	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  1];  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  4  +  1];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
70	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  4  +  2];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
71	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  2];  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  4  +  2];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
72	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  1  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    	compilable	  [FE]  IOException  	64	2	replace
73	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1  +  1];  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  1  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    	compilable	  [FE]  IOException  	64	2	replace
74	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[computeSize];  [CE]  cannot  find  symbol  computeSize  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[computeSize];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[computeSize];	  final    byte[]    realized    =    new    byte[size];    	non-compiled	[CE]  cannot  find  symbol  computeSize	39	None	replace
75	[BUG]  [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	Final  byte[]  realized  =  new  byte[expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    Final    byte[]    realized    =    new    byte[expected.length    *    2];    	non-compiled	[CE]  not  a  statement	33	None	replace
76	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	byte[]  realized  =  new  byte[expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    Final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	33	2	replace
77	[BUG]  [BUGGY]  byte[]  realized  =  new  byte[expected.length  *  2];  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  realized  =  new  byte[expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    Final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	33	2	replace
78	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
79	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
80	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
81	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSize();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSize();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
82	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
83	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  discovered  =  new  byte[expected.length  +  1];  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  discovered  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  discovered  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    discovered    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  incompatible  types	58	None	replace
84	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  discovered  =  new  int[expected.length  +  1];  [CE]  incompatible  types  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  discovered  =  new  int[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  discovered  =  new  int[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    discovered    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  incompatible  types	58	None	replace
85	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  incompatible  types  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    3];    	non-compiled	[CE]  incompatible  types	34	None	replace
86	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  int[expected.length  *  3];  [CE]  incompatible  types  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  int[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  int[expected.length  *  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    3];    	non-compiled	[CE]  incompatible  types	34	None	replace
87	[BUG]  [BUGGY]  final  int[]  realized  =  new  byte[expected.length  +  2];  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int[]  realized  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    int[]    realized    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  incompatible  types	67	None	replace
88	[BUG]  [BUGGY]  final  int[]  realized  =  new  int[expected.length  +  2];  [CE]  no  suitable  method  found  for  read(int[])  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int[]  realized  =  new  int[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int[]  realized  =  new  int[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    int[]    realized    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  no  suitable  method  found  for  read(int[])	67	None	replace
89	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  /  3];	  final    byte[]    realized    =    new    byte[expected.length    *    3];    	compilable	  [FE]  IOException  	23	2	replace
90	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  3];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  /  3];	  final    byte[]    realized    =    new    byte[expected.length    *    3];    	compilable	  [FE]  IOException  	23	2	replace
91	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  3  +  1];	  final    byte[]    realized    =    new    byte[expected.length    *    3];    	compilable	  [FE]  IOException  	23	2	replace
92	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3  +  1];  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  3  +  1];	  final    byte[]    realized    =    new    byte[expected.length    *    3];    	compilable	  [FE]  IOException  	23	2	replace
93	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8)+  1;  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8)+  1;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8)+  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(Offset.UTF8);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	69	None	replace
94	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  Offset.UTF8);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  Offset.UTF8);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  Offset.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(Offset.UTF8);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	69	None	replace
95	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8),  offset;  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8),  offset;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8),  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(Offset.UTF8);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	69	None	replace
96	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8),  offset  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8),  offset  +  1;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8),  offset  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(Offset.UTF8);    	non-compiled	[CE]  ';'  expected	69	None	replace
97	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realized  =  new  byte[expected.length  -  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    final  byte[]  realized  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
98	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  Final  byte[]  realized  =  new  byte[expected.length  -  2];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  Final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    Final  byte[]  realized  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  not  a  statement	1	None	add
99	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realization  =  new  byte[expected.length  -  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realization  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    final  byte[]  realization  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
100	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  int[]  realized  =  new  byte[expected.length  -  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  int[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    final  int[]  realized  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
101	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  byte[]  realized  =  new  byte[expected.length  -  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    byte[]  realized  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
102	[BUG]  [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  +  2];  [CE]  cannot  find  symbol  realized  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realization  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    byte[]    realization    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  cannot  find  symbol  realized	28	None	replace
103	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2)];  [CE]  ']'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2)];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    2)];    	non-compiled	[CE]  ']'  expected	36	None	replace
104	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	5	2	replace
105	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1];  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	5	2	replace
106	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	5	2	replace
107	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  1];  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	5	2	replace
108	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	46	None	replace
109	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	46	None	replace
110	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	47	None	replace
111	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	47	None	replace
112	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	47	None	replace
113	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	47	None	replace
114	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	47	None	replace
115	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [CE]  incompatible  types  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  incompatible  types	52	None	replace
116	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realized  =  new  byte[expected.length  /  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
117	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realized  =  new  byte[expected.length  /  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
118	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  Final  byte[]  realized  =  new  byte[expected.length  /  1];  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  Final  byte[]  realized  =  new  byte[expected.length  /  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    Final  byte[]  realized  =  new  byte[expected.length  /  1];	  	non-compiled	[CE]  not  a  statement	3	None	add
119	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realization  =  new  byte[expected.length  /  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realization  =  new  byte[expected.length  /  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realization  =  new  byte[expected.length  /  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
120	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realized  =  new  byte[expected.length  /  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
121	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  3/  1];  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  3/  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realized  =  new  byte[expected.length  3/  1];	  	non-compiled	[CE]  ']'  expected	3	None	add
122	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1)];  [CE]  ']'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  1)];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    1)];    	non-compiled	[CE]  ']'  expected	57	None	replace
123	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  int[expected.length  +  1)];  [CE]  ']'  expected  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  int[expected.length  +  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  int[expected.length  +  1)];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    1)];    	non-compiled	[CE]  ']'  expected	57	None	replace
124	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1)];  [CE]  ']'  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1)];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realized    =    new    byte[expected.length    +    1)];    	non-compiled	[CE]  ']'  expected	57	None	replace
125	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    	compilable	  [FE]  IOException  	25	2	replace
126	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    	compilable	  [FE]  IOException  	25	2	replace
127	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  2  +  6];	  final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    	compilable	  [FE]  IOException  	25	2	replace
128	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  6];  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2  +  6];	  final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    	compilable	  [FE]  IOException  	25	2	replace
129	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  -  4];	  final    byte[]    realized    =    new    byte[expected.length    -    2];    	compilable	  [FE]  IOException  	2	2	replace
130	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  4];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  4];	  final    byte[]    realized    =    new    byte[expected.length    -    2];    	compilable	  [FE]  IOException  	2	2	replace
131	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  6];	  final    byte[]    realized    =    new    byte[expected.length    +    6];    	compilable	  [FE]  IOException  	31	2	replace
132	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  6];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  6];	  final    byte[]    realized    =    new    byte[expected.length    +    6];    	compilable	  [FE]  IOException  	31	2	replace
133	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  7];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  7];	  final    byte[]    realized    =    new    byte[expected.length    +    6];    	compilable	  [FE]  IOException  	31	2	replace
134	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  7];  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  7];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  7];	  final    byte[]    realized    =    new    byte[expected.length    +    6];    	compilable	  [FE]  IOException  	31	2	replace
135	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	63	None	add
136	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realized  =  new  byte[expected.length  -  1  +  1);	  	non-compiled	[CE]  ']'  expected	63	None	add
137	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realized  =  new  byte[expected.length  +  1  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	63	None	add
138	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  Final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  Final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    Final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];	  	non-compiled	[CE]  not  a  statement	63	None	add
139	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realization  =  new  byte[expected.length  -  1  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realization  =  new  byte[expected.length  -  1  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realization  =  new  byte[expected.length  -  1  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	63	None	add
140	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  2  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  2  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realized  =  new  byte[expected.length  -  2  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	63	None	add
141	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    4];    final  byte[]  realized  =  new  byte[expected.length  *  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	20	None	add
142	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  Final  byte[]  realized  =  new  byte[expected.length  *  4];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  Final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    4];    Final  byte[]  realized  =  new  byte[expected.length  *  4];	  	non-compiled	[CE]  not  a  statement	20	None	add
143	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realization  =  new  byte[expected.length  *  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realization  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    4];    final  byte[]  realization  =  new  byte[expected.length  *  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	20	None	add
144	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    4];    final  byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	20	None	add
145	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realized  =  new  byte[expected.length  *  5];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  final  byte[]  realized  =  new  byte[expected.length  *  5];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    4];    final  byte[]  realized  =  new  byte[expected.length  *  5];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	20	None	add
146	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  byte[]  realized  =  new  byte[expected.length  *  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    4];    byte[]  realized  =  new  byte[expected.length  *  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	20	None	add
147	[BUG]  [BUGGY]  final  byte[]  real  =  new  byte[expected.length  +  2];  [CE]  cannot  find  symbol  realized  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  real  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  real  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    byte[]    real    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  cannot  find  symbol  realized	56	None	replace
148	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  /  2  +  1];	  final    byte[]    realized    =    new    byte[expected.length    /    2];    	compilable	  [FE]  IOException  	19	2	replace
149	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2  +  1];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  /  2  +  1];	  final    byte[]    realized    =    new    byte[expected.length    /    2];    	compilable	  [FE]  IOException  	19	2	replace
150	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  realized  =  new  byte[expected.length  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    3];    final  byte[]  realized  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	10	None	add
151	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  Final  byte[]  realized  =  new  byte[expected.length  +  3];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  Final  byte[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    3];    Final  byte[]  realized  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  not  a  statement	10	None	add
152	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  realization  =  new  byte[expected.length  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  realization  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    3];    final  byte[]  realization  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	10	None	add
153	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  realized  =  new  byte[expected.length  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  realized  =  new  byte[expected.length  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    3];    final  byte[]  realized  =  new  byte[expected.length  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	10	None	add
154	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  int[]  realized  =  new  byte[expected.length  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  int[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    3];    final  int[]  realized  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	10	None	add
155	[BUG]  [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	Final  byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    Final    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  not  a  statement	6	None	replace
156	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    Final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	6	2	replace
157	[BUG]  [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    Final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	6	2	replace
158	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  5];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  5];	  final    byte[]    realized    =    new    byte[expected.length    +    3];    	compilable	  [FE]  IOException  	11	2	replace
159	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  5];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  5];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  5];	  final    byte[]    realized    =    new    byte[expected.length    +    3];    	compilable	  [FE]  IOException  	11	2	replace
160	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realization  =  new  byte[expectedLength  -  1];  [CE]  cannot  find  symbol  realized  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realization  =  new  byte[expectedLength  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realization  =  new  byte[expectedLength  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realization    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  realized	7	None	replace
161	[BUG]  [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  -  1];  [CE]  cannot  find  symbol  realized  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realization  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realization    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  realized	7	None	replace
162	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realization  =  new  byte[expected.length  -  1];  [CE]  cannot  find  symbol  realized  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realization  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realization  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realization    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  realized	7	None	replace
163	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realized  =  new  byte[expected.length  +  6];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realized  =  new  byte[expected.length  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    6];    final  byte[]  realized  =  new  byte[expected.length  +  6];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	30	None	add
164	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  Final  byte[]  realized  =  new  byte[expected.length  +  6];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  Final  byte[]  realized  =  new  byte[expected.length  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    6];    Final  byte[]  realized  =  new  byte[expected.length  +  6];	  	non-compiled	[CE]  not  a  statement	30	None	add
165	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realized  =  new  byte[expected.length  +  7];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realized  =  new  byte[expected.length  +  7];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    6];    final  byte[]  realized  =  new  byte[expected.length  +  7];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	30	None	add
166	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realization  =  new  byte[expected.length  +  6];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realization  =  new  byte[expected.length  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    6];    final  byte[]  realization  =  new  byte[expected.length  +  6];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	30	None	add
167	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  byte[]  realized  =  new  byte[expected.length  +  6];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  byte[]  realized  =  new  byte[expected.length  +  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    6];    byte[]  realized  =  new  byte[expected.length  +  6];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	30	None	add
168	[BUG]  [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  +  1];  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  Final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	Final  byte[]  realized  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    Final    byte[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  not  a  statement	51	None	replace
169	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    3];    final  byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	22	None	add
170	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  Final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  Final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    3];    Final  byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  not  a  statement	22	None	add
171	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    3];    final  byte[]  realized  =  new  byte[expected.length  *  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	22	None	add
172	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realization  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realization  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    3];    final  byte[]  realization  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	22	None	add
173	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    3];    final  byte[]  realized  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	22	None	add
174	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    3];    byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	22	None	add
175	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  2];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    2];    	compilable	  [FE]  IOException  	8	2	replace
176	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  2];  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  2];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    2];    	compilable	  [FE]  IOException  	8	2	replace
177	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  2];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    2];    	compilable	  [FE]  IOException  	8	2	replace
178	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  2];  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expected.length  -  2];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    2];    	compilable	  [FE]  IOException  	8	2	replace
179	[BUG]  [BUGGY]  final  int[]  realized  =  new  int[offset];  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int[]  realized  =  new  int[offset];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int[]  realized  =  new  int[offset];	  final    byte[]    realized    =    new    byte[offset];    	non-compiled	[CE]  possible  loss  of  precision	38	None	replace
180	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[offset  +  1];  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[offset  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[offset  +  1];	  final    byte[]    realized    =    new    byte[offset];    	non-compiled	[CE]  possible  loss  of  precision	38	None	replace
181	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	61	None	add
182	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  Final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  Final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    Final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];	  	non-compiled	[CE]  not  a  statement	61	None	add
183	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  5];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  5];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  5];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	61	None	add
184	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realization  =  new  byte[expected.length  *  2  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realization  =  new  byte[expected.length  *  2  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    final  byte[]  realization  =  new  byte[expected.length  *  2  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	61	None	add
185	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    byte[]  realized  =  new  byte[expected.length  *  2  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	61	None	add
186	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4],  expected;  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4],  expected;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  4],  expected;	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	61	None	add
187	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  incompatible  types	73	None	replace
188	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  int[expected.length  *  4];  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  int[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  *  2];  final  byte[]  realized  =  new  int[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  incompatible  types	73	None	replace
189	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2],  expected.length  *  2];  [CE]  ';'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2],  expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2],  expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    2];    	non-compiled	[CE]  ';'  expected	32	None	replace
190	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1)];  [CE]  ']'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1)];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
191	[BUG]  [BUGGY]  final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  int[expected.length  -  1)];  [CE]  ']'  expected  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  int[expected.length  -  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  realized  =  new  int[expected.length  -  1];  final  byte[]  realized  =  new  int[expected.length  -  1)];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
192	[BUG]  [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  [CE]  ']'  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
193	[BUG]  [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  +  1];  [CE]  cannot  find  symbol  realized  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realization  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    realization    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  cannot  find  symbol  realized	53	None	replace
194	[BUG]  [BUGGY]  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
195	[BUG]  [BUGGY]  byte[]  expected  =  arArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  arArchiveEntry.HEADER.getBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  arArchiveEntry.HEADER.getBytes();	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
196	[BUG]  [BUGGY]  final  int  expected.length  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected.length  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected.length  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  ';'  expected	9	None	replace
197	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  System.arraycopy(expected,  0,  realized,  0,  expected.length  -  1]);  [CE]  ')'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  System.arraycopy(expected,  0,  realized,  0,  expected.length  -  1]);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1];  System.arraycopy(expected,  0,  realized,  0,  expected.length  -  1]);	  final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  ')'  expected	9	None	replace
198	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  this.realized  =  new  byte[expected.length  -  1];  [CE]  cannot  find  symbol  realized  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  this.realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1];  this.realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  realized	9	None	replace
199	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	16	None	add
200	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  Final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  Final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    Final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];	  	non-compiled	[CE]  not  a  statement	16	None	add
201	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realization  =  new  byte[expected.length  *  2  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realization  =  new  byte[expected.length  *  2  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realization  =  new  byte[expected.length  *  2  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	16	None	add
202	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	16	None	add
203	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1);  [CE]  ']'  expected  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  1);	  	non-compiled	[CE]  ']'  expected	16	None	add
204	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1],  expected;  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1],  expected;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  1],  expected;	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	16	None	add
205	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  3);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  3);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  3);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset    +    1);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	70	None	replace
206	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  2);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  2);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset    +    1);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	70	None	replace
207	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  4);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  4);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  4);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset    +    1);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	70	None	replace
208	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1,  offset  +  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1,  offset  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset    +    1);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	70	None	replace
209	[BUG]  [BUGGY]  final  byte  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte  expected  =  ArArchiveEntry.HEADER.getBytes();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
210	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.length();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.length();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
211	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getHeaderCount();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getHeaderCount();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getHeaderCount();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
212	[BUG]  [BUGGY]  final  long  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  long  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  long  expected  =  ArArchiveEntry.HEADER.getBytes();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
213	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    final  byte[]  realized  =  new  byte[expected.length  *  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	14	None	add
214	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    final  byte[]  realized  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	14	None	add
215	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  Final  byte[]  realized  =  new  byte[expected.length  *  1];  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  Final  byte[]  realized  =  new  byte[expected.length  *  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    Final  byte[]  realized  =  new  byte[expected.length  *  1];	  	non-compiled	[CE]  not  a  statement	14	None	add
216	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realization  =  new  byte[expected.length  *  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realization  =  new  byte[expected.length  *  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    final  byte[]  realization  =  new  byte[expected.length  *  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	14	None	add
217	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  1);  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    final  byte[]  realized  =  new  byte[expected.length  *  1);	  	non-compiled	[CE]  ']'  expected	14	None	add
218	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    final  byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	14	None	add
219	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    final  byte[]  realized  =  new  byte[expected.length  /  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	18	None	add
220	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  Final  byte[]  realized  =  new  byte[expected.length  /  2];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  Final  byte[]  realized  =  new  byte[expected.length  /  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    Final  byte[]  realized  =  new  byte[expected.length  /  2];	  	non-compiled	[CE]  not  a  statement	18	None	add
221	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realization  =  new  byte[expected.length  /  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realization  =  new  byte[expected.length  /  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    final  byte[]  realization  =  new  byte[expected.length  /  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	18	None	add
222	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    final  byte[]  realized  =  new  byte[expected.length  /  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	18	None	add
223	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  2);  [CE]  ']'  expected  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  2);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    final  byte[]  realized  =  new  byte[expected.length  /  2);	  	non-compiled	[CE]  ']'  expected	18	None	add
224	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    final  byte[]  realized  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	18	None	add
225	[BUG]  [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  *  2];  [CE]  cannot  find  symbol  realized  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realization  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realization  =  new  byte[expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realization    =    new    byte[expected.length    *    2];    	non-compiled	[CE]  cannot  find  symbol  realized	35	None	replace
226	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[wrapped.length  -  1];  [CE]  cannot  find  symbol  wrapped  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[wrapped.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[wrapped.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  wrapped	5	None	replace
227	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[length  -  1];  [CE]  cannot  find  symbol  length  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
228	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realized  =  new  byte[expected.length  *  4  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	24	None	add
229	[BUG]  [BUGGY]  if(expected.length!=  0)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  [CE]  ']'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  if(expected.length!=  0)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	if(expected.length!=  0)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
230	[BUG]  [BUGGY]  if(expected!=  null)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  [CE]  ']'  expected  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  if(expected!=  null)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	if(expected!=  null)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
231	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1)];  [CE]  ']'  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1)];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
232	[BUG]  [BUGGY]  if(expected.length!=  0)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  else  {  System.arraycopy(expected,  0,  realized,  0,  expected.length  -  1);  }  [CE]  ']'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  if(expected.length!=  0)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  else  {  System.arraycopy(expected,  0,  realized,  0,  expected.length  -  1);  }  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	if(expected.length!=  0)  {  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  }  else  {  System.arraycopy(expected,  0,  realized,  0,  expected.length  -  1);  }	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1)];    	non-compiled	[CE]  ']'  expected	72	None	replace
233	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  discovered  =  new  byte[expected.length  -  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  discovered  =  new  byte[expected.length  -  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    final  byte[]  discovered  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
234	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    final  byte[]  realized  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
235	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  *  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  *  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realized  =  new  byte[expected.length  *  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
236	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	73	2	replace
237	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expected.length  *  4];  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	73	2	replace
238	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expectedLength  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expectedLength  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	73	2	replace
239	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expectedLength  *  4];  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expectedLength  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  *  2;  final  byte[]  realized  =  new  byte[expectedLength  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	73	2	replace
240	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[wrapped.length  *  4];  [CE]  cannot  find  symbol  wrapped  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[wrapped.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[wrapped.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  cannot  find  symbol  wrapped	73	None	replace
241	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
242	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
243	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
244	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[6];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
245	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[6];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[6];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
246	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[4];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
247	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[4];  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[4];	  final    byte[]    realized    =    new    byte[0];    	compilable	  [FE]  IOException  	42	2	replace
248	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[length  +  1];  [CE]  cannot  find  symbol  length  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    Final    byte[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  cannot  find  symbol  length	51	None	replace
249	[BUG]  [BUGGY]  final  int  expectedLength  =  needed.length();  [CE]  cannot  find  symbol  needed  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  needed.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  needed.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  needed	49	None	replace
250	[BUG]  [BUGGY]  final  int  expectedLength  =  expecting.length();  [CE]  cannot  find  symbol  expecting  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expecting.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expecting.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  expecting	49	None	replace
251	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
252	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8)+  2;  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8)+  2;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8)+  2;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(Offset.UTF8);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	69	None	replace
253	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.SHORT);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.SHORT);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.SHORT);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(Offset.UTF8);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	69	None	replace
254	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  byte[]  realized  =  new  byte[expectedLength  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  int  expectedLength  =  expected.length  -  1;  byte[]  realized  =  new  byte[expectedLength  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	9	2	replace
255	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  byte[]  realized  =  new  byte[expectedLength  -  1];  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  byte[]  realized  =  new  byte[expectedLength  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  byte[]  realized  =  new  byte[expectedLength  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	9	2	replace
256	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]    realized    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	9	None	replace
257	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  real  =  new  byte[0];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  real  =  new  byte[0];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    final  byte[]  real  =  new  byte[0];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	41	None	add
258	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  int[]  realized  =  new  byte[0];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  int[]  realized  =  new  byte[0];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    final  int[]  realized  =  new  byte[0];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	41	None	add
259	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
260	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
261	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[wrapped.length  *  2];  [CE]  cannot  find  symbol  wrapped  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[wrapped.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[wrapped.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realization    =    new    byte[expected.length    *    2];    	non-compiled	[CE]  cannot  find  symbol  wrapped	35	None	replace
262	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realized  =  new  byte[expected.length  +  8];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  final  byte[]  realized  =  new  byte[expected.length  +  8];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    6];    final  byte[]  realized  =  new  byte[expected.length  +  8];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	30	None	add
263	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	47	None	replace
264	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getHeaderSize();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getHeaderSize();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getHeaderSize();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
265	[BUG]  [BUGGY]  final  int  expected  =  this.arArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  this.arArchiveEntry.HEADER.getBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  this.arArchiveEntry.HEADER.getBytes();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
266	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getValue(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getValue(offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getValue(offset);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
267	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1].;  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1].;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  1].;	  	non-compiled	[CE]  <identifier>  expected	16	None	add
268	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  -  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  -  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  byte[]  realized  =  new  byte[expected.length  -  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
269	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  discovered  =  new  byte[expected.length  -  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  discovered  =  new  byte[expected.length  -  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  byte[]  discovered  =  new  byte[expected.length  -  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
270	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  byte[]  realized  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
271	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  -  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  -  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realization    =    new    byte[expected.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	7	None	replace
272	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  4  +  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  4  +  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    final  byte[]  realized  =  new  byte[expected.length  *  4  +  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	61	None	add
273	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1);  [CE]  ']'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length  -  1;  final  byte[]  realized  =  new  byte[expectedLength  -  1);	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    -    1);    	non-compiled	[CE]  ']'  expected	59	None	replace
274	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)  +  1];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realized  =  new  byte[expected.length  -  1)  +  1];	  	non-compiled	[CE]  ']'  expected	63	None	add
275	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  -  6];	  final    byte[]    realized    =    new    byte[expected.length    -    3];    	compilable	  [FE]  IOException  	66	2	replace
276	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  6];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  6];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  6];	  final    byte[]    realized    =    new    byte[expected.length    -    3];    	compilable	  [FE]  IOException  	66	2	replace
277	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  discovered  =  new  byte[expected.length  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  final  byte[]  discovered  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    3];    final  byte[]  discovered  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	10	None	add
278	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  +  1];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    Final    byte[]    realized    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	51	None	replace
279	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  1)];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  final  byte[]  realized  =  new  byte[expected.length  *  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    1];    final  byte[]  realized  =  new  byte[expected.length  *  1)];	  	non-compiled	[CE]  ']'  expected	14	None	add
280	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length  +  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length  +  1)];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	60	2	replace
281	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length  +  1)];  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length  +  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length  +  1)];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	60	2	replace
282	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length  *  4),  expected.length  *  4];  [CE]  ']'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length  *  4),  expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Math.max(expected.length  *  4),  expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  ']'  expected	73	None	replace
283	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  *  4];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	73	None	replace
284	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(0,  expected.length  *  4]);  [CE]  ')'  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(0,  expected.length  *  4]);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Math.max(0,  expected.length  *  4]);	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  ')'  expected	73	None	replace
285	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[length  *  4];  [CE]  cannot  find  symbol  length  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[length  *  4];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    4];    	non-compiled	[CE]  cannot  find  symbol  length	73	None	replace
286	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    2];    final  byte[]  realized  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
287	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getLength();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getLength();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getLength();	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	45	None	replace
288	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  +  2];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    byte[]    real    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	56	None	replace
289	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Offset];  [CE]  cannot  find  symbol  Offset  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Offset];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Offset];	  final    byte[]    realized    =    new    byte[width];    	non-compiled	[CE]  cannot  find  symbol  Offset	40	None	replace
290	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1)];  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1    +    1];    final  byte[]  realized  =  new  byte[expected.length  -  1  +  1)];	  	non-compiled	[CE]  ']'  expected	63	None	add
291	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  1);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  final  byte[]  realized  =  new  byte[expected.length  /  1);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    1];    final  byte[]  realized  =  new  byte[expected.length  /  1);	  	non-compiled	[CE]  ']'  expected	3	None	add
292	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  8];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  8];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
293	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  8];  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  8];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  8];	  final    byte[]    realized    =    new    byte[expected.length    *    4];    	compilable	  [FE]  IOException  	21	2	replace
294	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  *  2];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    Final    byte[]    realized    =    new    byte[expected.length    *    2];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	33	None	replace
295	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length  *  2);  [CE]  ']'  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length  *  2);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Math.max(expected.length  *  2);	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    3];    	non-compiled	[CE]  ']'  expected	34	None	replace
296	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
297	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	43	None	replace
298	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1,  length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1,  length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset    +    1);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	70	None	replace
299	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  2)];  [CE]  ']'  expected  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  final  byte[]  realized  =  new  byte[expected.length  /  2)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    /    2];    final  byte[]  realized  =  new  byte[expected.length  /  2)];	  	non-compiled	[CE]  ']'  expected	18	None	add
300	[BUG]  [BUGGY]  final  byte[]  discovered  =  new  byte[expected.length  +  1];  [CE]  cannot  find  symbol  realized  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  discovered  =  new  byte[expected.length  +  1];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  discovered  =  new  byte[expected.length  +  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    final    byte[]    discovered    =    new    byte[expected.length    +    1];    	non-compiled	[CE]  cannot  find  symbol  realized	58	None	replace
301	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	68	None	replace
302	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length  *  2),  expected.length  *  2];  [CE]  ']'  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length  *  2),  expected.length  *  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Math.max(expected.length  *  2),  expected.length  *  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    2];    	non-compiled	[CE]  ']'  expected	32	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length)];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  AssertionFailedError  	32	1	replace
304	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length)];  [FE]  AssertionFailedError  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length)];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[Math.max(expected.length,  expected.length)];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  AssertionFailedError  	32	1	replace
305	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator();	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
306	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSize();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSize();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSize();	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
307	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderBytes();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderBytes();	  byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	44	None	replace
308	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  }  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  }  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    1];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  }	  	non-compiled	[CE]  illegal  start  of  type	16	None	add
309	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);	  final    int    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	48	None	replace
310	[BUG]  [BUGGY]  final  int  expectedLength  =  expected.length;  [CE]  cannot  find  symbol  realized  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expected.length;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expected.length;	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  realized	49	None	replace
311	[BUG]  [BUGGY]  final  int  expectedLength  =  expect.length();  [CE]  cannot  find  symbol  expect  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  int  expectedLength  =  expect.length();  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  expect.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  expect	49	None	replace
312	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  }  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  }  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    4];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  }	  	non-compiled	[CE]  illegal  start  of  type	61	None	add
313	[BUG]  [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  +  3];  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  expected  =  new  byte[expected.length  +  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  new  byte[expected.length  +  3];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    byte[]    realized    =    new    byte[expected.length    +    3];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	29	None	replace
314	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    3];    final  byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	65	None	add
315	[BUG]  [BUGGY]  final  byte[]  discovered  =  new  byte[expected.length  +  2];  [CE]  cannot  find  symbol  realized  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  discovered  =  new  byte[expected.length  +  2];  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  discovered  =  new  byte[expected.length  +  2];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    final    byte[]    discovered    =    new    byte[expected.length    +    2];    	non-compiled	[CE]  cannot  find  symbol  realized	55	None	replace
316	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2);  [CE]  ']'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2);  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2);	  final    byte[]    realized    =    new    byte[expected.length    *    2];    final    byte[]    realized    =    new    byte[expected.length    *    2);    	non-compiled	[CE]  ']'  expected	37	None	replace
317	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realized  =  new  byte[0].;  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[0];  final  byte[]  realized  =  new  byte[0].;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[0];    final  byte[]  realized  =  new  byte[0].;	  	non-compiled	[CE]  <identifier>  expected	41	None	add
318	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3].;  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3].;  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  3].;	  	non-compiled	[CE]  <identifier>  expected	24	None	add
319	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  }  [CE]  illegal  start  of  type  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();      [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  }  [BUGGY]      final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2    +    3];    final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  }	  	non-compiled	[CE]  illegal  start  of  type	24	None	add
