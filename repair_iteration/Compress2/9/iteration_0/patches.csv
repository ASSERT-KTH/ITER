bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  1];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
2	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  [FE]  IOException  [FE]    AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  1];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
3	[BUG]  [BUGGY]  [FE]  IOException  [FE]      AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  -  1];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
4	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  [FE]  IOException  [FE]      AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
5	[BUG]  [BUGGY]  [FE]  IOException  [FE]        AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  2];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
6	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  [FE]  IOException  [FE]        AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
7	[BUG]  [BUGGY]  [FE]  IOException  [FE]          AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  2];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
8	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  [FE]  IOException  [FE]          AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  2];	final  byte[]  realized  =  new  byte[expected.length];  	compilable	  [FE]  IOException  	17	2	replace
9	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[length];  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]  final  byte[]  realized  =  new  byte[length];  [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[length];	final  byte[]  realized  =  new  byte[expected.length];  	non-compiled	[CE]  cannot  find  symbol  length	17	None	replace
10	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  realized  [FE]              AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    [BUGGY]  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	  	final  byte[]  realized  =  new  byte[expected.length];  	non-compiled	[CE]  cannot  find  symbol  realized	17	None	replace
