bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  -  2];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	4	2	replace
2	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  2];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	4	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  /  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  AssertionFailedError  	4	1	replace
4	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  /  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  AssertionFailedError  	4	1	replace
5	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    final  byte[]  realized  =  new  byte[expected.length  -  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
6	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  Final  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  Final  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    Final  byte[]  realized  =  new  byte[expected.length  -  1];	  	non-compiled	[CE]  not  a  statement	3	None	add
7	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realization  =  new  byte[expected.length  -  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realization  =  new  byte[expected.length  -  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    final  byte[]  realization  =  new  byte[expected.length  -  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
8	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    final  byte[]  realized  =  new  byte[expected.length  -  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
9	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  byte[]  realized  =  new  byte[expected.length  -  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    byte[]  realized  =  new  byte[expected.length  -  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
10	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  3];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	2	2	replace
11	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  3];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	2	2	replace
12	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  4];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	2	2	replace
13	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  4];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  IOException  	2	2	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  AssertionFailedError  	2	1	replace
15	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  [FE]  AssertionFailedError  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  1];	  final    byte[]    realized    =    new    byte[expected.length    +    1];    	compilable	  [FE]  AssertionFailedError  	2	1	replace
16	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
17	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2  +  1];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
18	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  /  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
19	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  /  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  /  2];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
20	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
21	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
22	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
23	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  [FE]  IOException  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
24	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
25	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [FE]  IOException  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2  +  3];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
26	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    final  byte[]  realized  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	7	None	add
27	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  Final  byte[]  realized  =  new  byte[expected.length  +  2];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  Final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    Final  byte[]  realized  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  not  a  statement	7	None	add
28	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  realization  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  realization  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    final  byte[]  realization  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	7	None	add
29	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  realized  =  new  byte[expected.length  +  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  realized  =  new  byte[expected.length  +  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    final  byte[]  realized  =  new  byte[expected.length  +  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	7	None	add
30	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  +  6];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    	compilable	  [FE]  IOException  	8	2	replace
31	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  6];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  +  6];	  final    byte[]    realized    =    new    byte[expected.length    +    2];    	compilable	  [FE]  IOException  	8	2	replace
32	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    final  byte[]  realized  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	5	None	add
33	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  Final  byte[]  realized  =  new  byte[expected.length  *  2];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  Final  byte[]  realized  =  new  byte[expected.length  *  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    Final  byte[]  realized  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  not  a  statement	5	None	add
34	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    final  byte[]  realized  =  new  byte[expected.length  *  3];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	5	None	add
35	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realization  =  new  byte[expected.length  *  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realization  =  new  byte[expected.length  *  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    final  byte[]  realization  =  new  byte[expected.length  *  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	5	None	add
36	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  2)];  [CE]  ']'  expected  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  2)];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    final  byte[]  realized  =  new  byte[expected.length  *  2)];	  	non-compiled	[CE]  ']'  expected	5	None	add
37	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  2);  [CE]  ']'  expected  [FE]              IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  2);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    final  byte[]  realized  =  new  byte[expected.length  *  2);	  	non-compiled	[CE]  ']'  expected	5	None	add
38	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[offset];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[offset];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[offset];	  final    byte[]    realized    =    new    byte[length];    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
39	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[size];  [CE]  cannot  find  symbol  size  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[size];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[size];	  final    byte[]    realized    =    new    byte[length];    	non-compiled	[CE]  cannot  find  symbol  size	9	None	replace
40	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[width];  [CE]  cannot  find  symbol  width  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[width];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[width];	  final    byte[]    realized    =    new    byte[length];    	non-compiled	[CE]  cannot  find  symbol  width	9	None	replace
41	[BUG]  [BUGGY]  [FE]  IOException  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[0];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[0];	  final    byte[]    realized    =    new    byte[length];    	compilable	  [FE]  IOException  	9	2	replace
42	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[0];  [FE]  IOException  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[0];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[0];	  final    byte[]    realized    =    new    byte[length];    	compilable	  [FE]  IOException  	9	2	replace
43	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
44	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
45	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes();	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
46	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset);	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
47	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset);	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
48	[BUG]  [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expected  =  ArArchiveEntry.HEADER.getBytes(offset);	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
49	[BUG]  [BUGGY]  final  int  expectedLength  =  filemode.length();  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  int  expectedLength  =  filemode.length();  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  int  expectedLength  =  filemode.length();	      	non-compiled	[CE]  cannot  find  symbol  filemode	10	None	replace
50	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    final  byte[]  realized  =  new  byte[expected.length  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
51	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  Final  byte[]  realized  =  new  byte[expected.length  +  1];  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  Final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    Final  byte[]  realized  =  new  byte[expected.length  +  1];	  	non-compiled	[CE]  not  a  statement	1	None	add
52	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    final  byte[]  realized  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
53	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realization  =  new  byte[expected.length  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realization  =  new  byte[expected.length  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    final  byte[]  realization  =  new  byte[expected.length  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
54	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[left];  [CE]  cannot  find  symbol  left  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[left];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[left];	  final    byte[]    realized    =    new    byte[length];    	non-compiled	[CE]  cannot  find  symbol  left	9	None	replace
55	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  discovered  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  discovered  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    final  byte[]  discovered  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	7	None	add
56	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  real  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  byte[]  real  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    final  byte[]  real  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	7	None	add
57	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1)];  [CE]  ']'  expected  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  realized  =  new  byte[expected.length  +  1)];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    final  byte[]  realized  =  new  byte[expected.length  +  1)];	  	non-compiled	[CE]  ']'  expected	1	None	add
58	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  discovered  =  new  byte[expected.length  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  byte[]  discovered  =  new  byte[expected.length  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    final  byte[]  discovered  =  new  byte[expected.length  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
59	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1);  [CE]  ']'  expected  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    final  byte[]  realized  =  new  byte[expected.length  -  1);	  	non-compiled	[CE]  ']'  expected	3	None	add
60	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    final  byte[]  realized  =  new  byte[expected.length  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	3	None	add
61	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
62	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  *  2  +  4];	  final    byte[]    realized    =    new    byte[expected.length    *    2];    	compilable	  [FE]  IOException  	6	2	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  AssertionFailedError  	4	1	replace
64	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  1  +  1];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  AssertionFailedError  	4	1	replace
65	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	final  byte[]  realized  =  new  byte[expected.length  -  3];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	4	2	replace
66	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  3];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  realized  =  new  byte[expected.length  -  3];	  final    byte[]    realized    =    new    byte[expected.length    -    1];    	compilable	  [FE]  IOException  	4	2	replace
67	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  int[]  realized  =  new  byte[expected.length  +  2];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  2];  final  int[]  realized  =  new  byte[expected.length  +  2];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    2];    final  int[]  realized  =  new  byte[expected.length  +  2];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	7	None	add
68	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
69	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8);	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
70	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset  +  1);	      	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	10	None	replace
71	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  int[]  realized  =  new  byte[expected.length  +  1];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  +  1];  final  int[]  realized  =  new  byte[expected.length  +  1];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    +    1];    final  int[]  realized  =  new  byte[expected.length  +  1];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	1	None	add
72	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  [CE]  ']'  expected  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  -  1];  final  byte[]  realized  =  new  byte[expected.length  -  1)];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    -    1];    final  byte[]  realized  =  new  byte[expected.length  -  1)];	  	non-compiled	[CE]  ']'  expected	3	None	add
73	[BUG]  [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();    [BUGGY]  final  byte[]  realized  =  new  byte[expected.length  *  2];  final  byte[]  realized  =  new  byte[expected.length  *  4];  [BUGGY]    final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	final    byte[]    realized    =    new    byte[expected.length    *    2];    final  byte[]  realized  =  new  byte[expected.length  *  4];	  	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	5	None	add
