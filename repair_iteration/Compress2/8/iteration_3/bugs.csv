bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(1);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(0);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
2	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  1);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(0);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
3	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  ';'  expected	16	None	replace
4	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset,  offset);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  ';'  expected	16	None	replace
5	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset,  offset;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset,  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset,  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
6	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  *  offset;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  *  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  *  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
7	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName()  +  offset;  [CE]  package  arArchiveEntry  does  not  exist  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	16	None	replace
8	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset+1;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset+1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset+1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
9	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	8	None	replace
11	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
12	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  read);  [CE]  cannot  find  symbol  read  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  read	8	None	replace
13	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(null);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(pInput);  [CE]  cannot  find  symbol  pInput  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(pInput);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(pInput);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	8	None	replace
15	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
16	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModified();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModified();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModified();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
17	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeader();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
18	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getValue();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getValue();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
19	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEnd();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEnd();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEnd();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
20	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getStart();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getStart();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getStart();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
21	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getRawOffset();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getRawOffset();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getRawOffset();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
22	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.getArEntry();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	60	None	replace
23	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getArEntry();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	60	None	replace
24	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntry(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntry(offset);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	60	None	replace
25	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.header.getArEntry();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	60	None	replace
26	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupid.getNext();  [CE]  cannot  find  symbol  groupid  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupid.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupid.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  groupid	71	None	replace
27	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	71	None	replace
28	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getNext();  [CE]  cannot  find  symbol  arEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  arEntry	71	None	replace
29	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rEntry.getNext();  [CE]  cannot  find  symbol  rEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rEntry.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rEntry.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  rEntry	71	None	replace
30	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupmode.getNext();  [CE]  cannot  find  symbol  groupmode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupmode.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupmode.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  groupmode	71	None	replace
31	[BUG]  [BUGGY]  final  byte[]  expected  =  this.filemode.getNext();  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.filemode.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.filemode.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  filemode	71	None	replace
32	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
33	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	14	None	replace
34	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  length	14	None	replace
35	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
36	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  source	14	None	replace
37	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  name);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  name	14	None	replace
38	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset,  offset);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	1	None	replace
39	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	1	None	replace
40	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(input,  offset);  [CE]  no  suitable  method  found  for  getBytes(InputStream,long)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(InputStream,long)	1	None	replace
41	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	1	None	replace
42	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length,  offset);  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
43	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
44	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes(offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes(offset);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	97	None	replace
45	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset,  offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset,  offset);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	97	None	replace
46	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset,  length);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  length	97	None	replace
47	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(filemode);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	97	None	replace
48	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset  +  1);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset  +  1);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	97	None	replace
49	[BUG]  [BUGGY]  final  int  expectedLength  =  offset.length;  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  offset.length;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  offset.length;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	65	None	replace
50	[BUG]  [BUGGY]  final  int  expectedLength  =  input.length  -  1;  [CE]  cannot  find  symbol  length  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  input.length  -  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  input.length  -  1;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	65	None	replace
51	[BUG]  [BUGGY]  final  int  expectedLength  =  this.input.length;  [CE]  cannot  find  symbol  length  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  this.input.length;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  this.input.length;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	65	None	replace
52	[BUG]  [BUGGY]  final  int  expectedLength  =  output.length;  [CE]  cannot  find  symbol  output  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  output.length;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  output.length;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  output	65	None	replace
53	[BUG]  [BUGGY]  final  int  expectedLength  =  input.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  input.length  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  input.length  +  1;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	65	None	replace
54	[BUG]  [BUGGY]  final  int  expectedLength  =  filemode.length;  [CE]  cannot  find  symbol  filemode  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  filemode.length;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  filemode.length;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	65	None	replace
55	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getArEntryBytes();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
56	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.header.getArEntryBytes();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
57	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntryBytes();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
58	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntryBytes();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
59	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryBytes();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
60	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArgument();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArgument();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArgument();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextParent();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
61	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextParent();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNextParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextParent();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	73	None	replace
62	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntryBytes.getArEntryBytes();  [CE]  cannot  find  symbol  arEntryBytes  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntryBytes.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntryBytes.getArEntryBytes();	  final    byte[]    expected    =    this.header.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arEntryBytes	86	None	replace
63	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupid.getArEntryBytes();  [CE]  cannot  find  symbol  groupid  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupid.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupid.getArEntryBytes();	  final    byte[]    expected    =    this.header.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  groupid	86	None	replace
64	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rEntryBytes.getArEntryBytes();  [CE]  cannot  find  symbol  rEntryBytes  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rEntryBytes.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rEntryBytes.getArEntryBytes();	  final    byte[]    expected    =    this.header.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  rEntryBytes	86	None	replace
65	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntryBytes();  [CE]  cannot  find  symbol  arEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getArEntryBytes();	  final    byte[]    expected    =    this.header.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arEntry	86	None	replace
66	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry1();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry1();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry1();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry2();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
67	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry0();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry0();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry0();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry2();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
68	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry3();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry3();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry3();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry2();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
69	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry2(offset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry2(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry2(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry2();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
70	[BUG]  [BUGGY]  final  int  expectedLength  =  offset.length();  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  offset.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  offset.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
71	[BUG]  [BUGGY]  final  int  expectedLength  =  this.groupid.length();  [CE]  cannot  find  symbol  groupid  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  this.groupid.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  this.groupid.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  groupid	20	None	replace
72	[BUG]  [BUGGY]  final  int  expectedLength  =  this.filemode.length();  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  this.filemode.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  this.filemode.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  filemode	20	None	replace
73	[BUG]  [BUGGY]  final  int  expectedLength  =  path.length();  [CE]  cannot  find  symbol  path  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  path.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  path.length();	  final    int    expectedLength    =    filemode.length();    	non-compiled	[CE]  cannot  find  symbol  path	20	None	replace
74	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.source);  [CE]  cannot  find  symbol  source  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    source);    	non-compiled	[CE]  cannot  find  symbol  source	59	None	replace
75	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  line);  [CE]  cannot  find  symbol  line  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  line);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  line);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    source);    	non-compiled	[CE]  cannot  find  symbol  line	59	None	replace
76	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width);  [CE]  cannot  find  symbol  width  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  width	70	None	replace
77	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this.groupid);  [CE]  cannot  find  symbol  groupid  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this.groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this.groupid);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  groupid	70	None	replace
78	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(Offset.OFFSET);  [CE]  cannot  find  symbol  Offset  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(Offset.OFFSET);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(Offset.OFFSET);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  Offset	70	None	replace
79	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
80	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(Offset.ZERO);  [CE]  cannot  find  symbol  Offset  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(Offset.ZERO);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(Offset.ZERO);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  Offset	70	None	replace
81	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getBytes(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(length);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	66	None	replace
82	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width);  [CE]  cannot  find  symbol  width  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(length);    	non-compiled	[CE]  cannot  find  symbol  width	66	None	replace
83	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.OFFSET);  [CE]  cannot  find  symbol  Offset  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.OFFSET);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.OFFSET);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(length);    	non-compiled	[CE]  cannot  find  symbol  Offset	66	None	replace
84	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName(offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
85	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName()  +  offset;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
86	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryName();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	15	None	replace
87	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntryName();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
88	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName()  +  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName()  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName()  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
89	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.header.getNext();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
90	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.Header.getNext();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
91	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HeADER.getNext();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
92	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.heADER.getNext();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
93	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.length.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.length.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.length.getNext();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
94	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	54	None	replace
95	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  length);  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  length	54	None	replace
96	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  len);  [CE]  cannot  find  symbol  len  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  len);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset,  len);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  len	54	None	replace
97	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	77	None	replace
98	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupid.getNextArEntry();  [CE]  cannot  find  symbol  groupid  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupid.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupid.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  groupid	77	None	replace
99	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getNextArEntry();  [CE]  cannot  find  symbol  arEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arEntry	77	None	replace
100	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rEntry.getNextArEntry();  [CE]  cannot  find  symbol  rEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rEntry.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  rEntry	77	None	replace
101	[BUG]  [BUGGY]  final  byte[]  expected  =  this.filemode.getNextArEntry();  [CE]  cannot  find  symbol  filemode  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.filemode.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.filemode.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
102	[BUG]  [BUGGY]  final  byte[]  expected  =  this.nextArEntry.getNextArEntry();  [CE]  cannot  find  symbol  nextArEntry  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.nextArEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.nextArEntry.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  nextArEntry	77	None	replace
103	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry(offset);  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry(offset);	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
104	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNext();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNext();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
105	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getPreviousArEntry();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getPreviousArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getPreviousArEntry();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
106	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry(0);  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry(0);	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
107	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getLastArEntry();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getLastArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getLastArEntry();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
108	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntrySize();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntrySize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntrySize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextAREntry();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
109	[BUG]  [BUGGY]  final  byte[]  expected  =  ARArchiveEntry.HEADER.getNextArEntry(offset);  [CE]  package  ARArchiveEntry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ARArchiveEntry.HEADER.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ARArchiveEntry.HEADER.getNextArEntry(offset);	  final    byte[]    expected    =    ARArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  ARArchiveEntry  does  not  exist	105	None	replace
110	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.header.getNextArEntry();	  final    byte[]    expected    =    ARArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	105	None	replace
111	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  len);  [CE]  cannot  find  symbol  len  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  len);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  len);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    length);    	non-compiled	[CE]  cannot  find  symbol  len	7	None	replace
112	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  line);  [CE]  cannot  find  symbol  line  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  line);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  line);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    length);    	non-compiled	[CE]  cannot  find  symbol  line	7	None	replace
113	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getHeaderSeparator();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
114	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getRawSeparator();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getRawSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getRawSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
115	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getBase();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getBase();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getBase();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
116	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEndSeparator();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEndSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEndSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
117	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getSeparator();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
118	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderData(offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderData(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderData(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
119	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderData();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderData();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderData();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	107	None	replace
120	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataByName(offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataByName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataByName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
121	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_DATA;  [CE]  cannot  find  symbol  HEADER_DATA  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_DATA;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_DATA;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol  HEADER_DATA	107	None	replace
122	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataReference();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataReference();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataReference();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
123	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
124	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(null,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(null,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(null,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
125	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
126	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
127	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  offset,  null);  [CE]  cannot  find  symbol  width  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  offset,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  offset,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol  width	58	None	replace
128	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  false);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  false);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  false);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
129	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol  filemode	58	None	replace
130	[BUG]  [BUGGY]  final  byte[]  expected  =  this.Header.getNextArEntry();  [CE]  cannot  find  symbol  Header  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.Header.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.Header.getNextArEntry();	  final    byte[]    expected    =    this.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  Header	79	None	replace
131	[BUG]  [BUGGY]  final  byte[]  expected  =  this.heADER.getNextArEntry();  [CE]  cannot  find  symbol  heADER  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.heADER.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.heADER.getNextArEntry();	  final    byte[]    expected    =    this.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  heADER	79	None	replace
132	[BUG]  [BUGGY]  final  byte[]  expected  =  this.heaDER.getNextArEntry();  [CE]  cannot  find  symbol  heaDER  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.heaDER.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.heaDER.getNextArEntry();	  final    byte[]    expected    =    this.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  heaDER	79	None	replace
133	[BUG]  [BUGGY]  final  byte[]  expected  =  this.HEADER.getNextArEntry(offset);  [CE]  cannot  find  symbol  HEADER  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.HEADER.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.HEADER.getNextArEntry(offset);	  final    byte[]    expected    =    this.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  HEADER	79	None	replace
134	[BUG]  [BUGGY]  final  byte[]  expected  =  this.first.getNextArEntry();  [CE]  cannot  find  symbol  first  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.first.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.first.getNextArEntry();	  final    byte[]    expected    =    this.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  first	79	None	replace
135	[BUG]  [BUGGY]  final  int  expected.length  =  read(groupid);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(groupid);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
136	[BUG]  [BUGGY]  final  int  expected.length  =  read(offset);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(offset);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
137	[BUG]  [BUGGY]  final  int  expected.length  =  read(groupid,  offset);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(groupid,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(groupid,  offset);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
138	[BUG]  [BUGGY]  final  int  expected.length  =  read(input);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(input);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
139	[BUG]  [BUGGY]  final  int  expected.length  =  read(width);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(width);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(width);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
140	[BUG]  [BUGGY]  final  int  expected.length  =  read(false);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(false);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(false);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
141	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  filemode	99	None	replace
142	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode  +  1);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  filemode	99	None	replace
143	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  length);  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	99	None	replace
144	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  name	99	None	replace
145	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length  +  1);  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	99	None	replace
146	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(input,  offset  +  1);  [CE]  no  suitable  method  found  for  getBytes(InputStream,long)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(input,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(input,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(InputStream,long)	99	None	replace
147	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  size);  [CE]  cannot  find  symbol  size  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  size);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  size);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  size	99	None	replace
148	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND;  [CE]  cannot  find  symbol  HEADER_SECOND  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND;	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SECOND	27	None	replace
149	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND,  offset.getHeaderSeparator();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND,  offset.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND,  offset.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	27	None	replace
150	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SCALE.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SCALE  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SCALE.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SCALE.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SCALE	27	None	replace
151	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_QUOTE.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_QUOTE  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_QUOTE.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_QUOTE.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_QUOTE	27	None	replace
152	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_CONSTRUCTOR.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_CONSTRUCTOR  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_CONSTRUCTOR.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_CONSTRUCTOR.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_CONSTRUCTOR	27	None	replace
153	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_STATEMENT.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_STATEMENT  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_STATEMENT.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_STATEMENT.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_STATEMENT	27	None	replace
154	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset);  [CE]  cannot  find  symbol  arInput  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  arInput	100	None	replace
155	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	100	None	replace
156	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  length	100	None	replace
157	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  read);  [CE]  cannot  find  symbol  read  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  read	100	None	replace
158	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(pInput,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(pInput,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(pInput,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	100	None	replace
159	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(InputStream.DEFAULT,  input,  offset);  [CE]  cannot  find  symbol  DEFAULT  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(InputStream.DEFAULT,  input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(InputStream.DEFAULT,  input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	100	None	replace
160	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
161	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeader(offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeader(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
162	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asRaw();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asRaw();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asRaw();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
163	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asPath();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asPath();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asPath();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
164	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asFileHeader();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asFileHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asFileHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
165	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asBase();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asBase();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asBase();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
166	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.length.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.length.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.length.getArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	84	None	replace
167	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntry(offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntry(offset);	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	84	None	replace
168	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	84	None	replace
169	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	84	None	replace
170	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  /  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  /  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  /  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
171	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
172	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  2;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  2;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
173	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  2  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  2  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
174	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  3;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  3;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  3;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
175	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  filemode	69	None	replace
176	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    input);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
177	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.input);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    input);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
178	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.heADER.getNextArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	78	None	replace
179	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HeADER.getNextArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	78	None	replace
180	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.Header.getNextArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	78	None	replace
181	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntry(offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntry(offset);	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	78	None	replace
182	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
183	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol  length	42	None	replace
184	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	42	None	replace
185	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(range);  [CE]  cannot  find  symbol  range  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(range);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(range);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol  range	42	None	replace
186	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset)+  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset)+  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset)+  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
187	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  read);  [CE]  cannot  find  symbol  read  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol  read	42	None	replace
188	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getValue();  [CE]  package  arArchiveEntry  does  not  exist  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getValue();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getValue();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	94	None	replace
189	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getKey();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getKey();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getKey();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
190	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.setValue(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.setValue(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.setValue(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
191	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(Offset.MIN_VALUE);  [CE]  cannot  find  symbol  Offset  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(Offset.MIN_VALUE);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(Offset.MIN_VALUE);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol  Offset	94	None	replace
192	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(Offset.DEFAULT);  [CE]  cannot  find  symbol  Offset  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(Offset.DEFAULT);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(Offset.DEFAULT);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol  Offset	94	None	replace
193	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
194	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	101	None	replace
195	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  cannot  find  symbol  length	101	None	replace
196	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  cannot  find  symbol  name	101	None	replace
197	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  cannot  find  symbol  source	101	None	replace
198	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset));	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  ';'  expected	101	None	replace
199	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry1();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry1();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry1();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry2();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
200	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry0();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry0();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry0();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry2();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
201	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry3();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry3();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry3();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry2();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
202	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry4();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry4();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry4();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry2();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
203	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arArchiveEntry.HEADER,  offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arArchiveEntry.HEADER,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arArchiveEntry.HEADER,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	88	None	replace
204	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  offset,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  width  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  offset,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  offset,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  width	88	None	replace
205	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ARArchiveEntry.HEADER,  offset);  [CE]  cannot  find  symbol  ARArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ARArchiveEntry.HEADER,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ARArchiveEntry.HEADER,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  ARArchiveEntry	88	None	replace
206	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(RawArchiveEntry.HEADER,  offset);  [CE]  cannot  find  symbol  RawArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(RawArchiveEntry.HEADER,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(RawArchiveEntry.HEADER,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  RawArchiveEntry	88	None	replace
207	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(range,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  range  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(range,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(range,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  range	88	None	replace
208	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  ArArchiveEntry.HEADER,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  ArArchiveEntry.HEADER,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  ArArchiveEntry.HEADER,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  filemode	88	None	replace
209	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getArEntryName();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
210	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.header.getArEntryName();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
211	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName(offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName(offset);	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
212	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HeADER.getArEntryName();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
213	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.heADER.getArEntryName();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
214	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryName();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
215	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntry(offset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntry(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPreviousArEntry();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
216	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getPreviousArEntry();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getPreviousArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getPreviousArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPreviousArEntry();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	12	None	replace
217	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.setPreviousArEntry(offset);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.setPreviousArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.setPreviousArEntry(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPreviousArEntry();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
218	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastArEntry();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPreviousArEntry();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
219	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  set);  [CE]  cannot  find  symbol  set  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  set);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  set);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    read);    	non-compiled	[CE]  cannot  find  symbol  set	57	None	replace
220	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.filemode);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    read);    	non-compiled	[CE]  cannot  find  symbol  filemode	57	None	replace
221	[BUG]  [BUGGY]  final  byte[]  expected  =  getNextArEntry();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  getNextArEntry();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  incompatible  types	33	None	replace
222	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(offset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getInputStream(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInputStream(offset);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
223	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(),  offset);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getInputStream(),  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInputStream(),  offset);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  ';'  expected	23	None	replace
224	[BUG]  [BUGGY]  InputStream  input  =  getOutputStream();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getOutputStream();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getOutputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
225	[BUG]  [BUGGY]  InputStream  input  =  this.getInputStream();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  this.getInputStream();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  this.getInputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
226	[BUG]  [BUGGY]  InputStream  input  =  getArInputStream();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getArInputStream();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getArInputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
227	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry();  [CE]  incompatible  types  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getNextArEntry();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  incompatible  types	23	None	replace
228	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(pInput,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(pInput,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(pInput,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  pInput	67	None	replace
229	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  filemode	67	None	replace
230	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode,  input);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  filemode	67	None	replace
231	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  offset);  [CE]  no  suitable  method  found  for  getBytes(long,InputStream,long)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,InputStream,long)	67	None	replace
232	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  input.length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  input.length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  input.length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
233	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  offset,  input);  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
234	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryId(offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryId(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryId(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
235	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
236	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryId();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	76	None	replace
237	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getArEntryId();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getArEntryId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getArEntryId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  ';'  expected	76	None	replace
238	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryHandler();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryHandler();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryHandler();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
239	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.getNextArEntry();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	9	None	replace
240	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntry(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntry(offset);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	9	None	replace
241	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
242	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(2);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(2);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
243	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName(0);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	18	None	replace
244	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName(0);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
245	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getHeaderSeparator();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	30	None	replace
246	[BUG]  [BUGGY]  final  byte[]  expected  =  getNextArEntry().getHeaderSeparator();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  getNextArEntry().getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  getNextArEntry().getHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
247	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getRawSeparator();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getRawSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getRawSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	30	None	replace
248	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getRawHeaderSeparator();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getRawHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getRawHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	30	None	replace
249	[BUG]  [BUGGY]  final  byte[]  expected  =  filemode.getHeaderSeparator();  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  filemode.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  filemode.getHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  filemode	30	None	replace
250	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextHeader();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
251	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawHeader(offset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawHeader(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
252	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getRawHeader();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getRawHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getRawHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	46	None	replace
253	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValueHeader();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValueHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValueHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
254	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastHeader();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
255	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	19	None	replace
256	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	19	None	replace
257	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(arrangement);  [CE]  cannot  find  symbol  arrangement  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(arrangement);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(arrangement);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  arrangement	19	None	replace
258	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(range);  [CE]  cannot  find  symbol  range  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(range);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(range);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol  range	19	None	replace
259	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(null);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
260	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset,  offset);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
261	[BUG]  [BUGGY]  int  expected.length  =  read(offset);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(offset);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
262	[BUG]  [BUGGY]  int  expected.length  =  read(groupid);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(groupid);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
263	[BUG]  [BUGGY]  int  expected.length  =  read(filemode,  offset);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(filemode,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(filemode,  offset);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
264	[BUG]  [BUGGY]  int  expected.length  =  read(lastmodified);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(lastmodified);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(lastmodified);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
265	[BUG]  [BUGGY]  int  expected.length  =  read(input);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(input);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
266	[BUG]  [BUGGY]  int  expected.length  =  read(filemode,  offset  +  1);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(filemode,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(filemode,  offset  +  1);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
267	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	47	None	replace
268	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(width,  offset);  [CE]  cannot  find  symbol  width  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  width	47	None	replace
269	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(arrangement);  [CE]  cannot  find  symbol  arrangement  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(arrangement);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(arrangement);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  arrangement	47	None	replace
270	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(length);  [CE]  cannot  find  symbol  length  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  length	47	None	replace
271	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	47	None	replace
272	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(range);  [CE]  cannot  find  symbol  range  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(range);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(range);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  range	47	None	replace
273	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	48	None	replace
274	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
275	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	48	None	replace
276	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  read);  [CE]  cannot  find  symbol  read  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  read	48	None	replace
277	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(length);  [CE]  cannot  find  symbol  length  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
278	[BUG]  [BUGGY]  File  filemode  =  getFilemode(offset);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode(offset);	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
279	[BUG]  [BUGGY]  File  filemode  =  getFilemode().getAbsolutePath();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode().getAbsolutePath();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode().getAbsolutePath();	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
280	[BUG]  [BUGGY]  File  filemode  =  getFilemode().getParent();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode().getParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode().getParent();	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
281	[BUG]  [BUGGY]  File  filemode  =  getFilemode(0);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode(0);	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
282	[BUG]  [BUGGY]  File  filemode  =  getFilemode().replace('',  '/');  [CE]  empty  character  literal  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode().replace('',  '/');  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode().replace('',  '/');	  File    filemode    =    getFilemode();    	non-compiled	[CE]  empty  character  literal	24	None	replace
283	[BUG]  [BUGGY]  File  filemode  =  getFilemode().replace('n',  '/');  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode().replace('n',  '/');  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode().replace('n',  '/');	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
284	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
285	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	44	None	replace
286	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  length	44	None	replace
287	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  read);  [CE]  cannot  find  symbol  read  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  read	44	None	replace
288	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  source	44	None	replace
289	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  this.groupid);  [CE]  cannot  find  symbol  groupid  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  this.groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  this.groupid);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  groupid	44	None	replace
290	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(0);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
291	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(0);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
292	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry0;  [CE]  cannot  find  symbol  getArEntry0  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry0;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry0;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(0);    	non-compiled	[CE]  cannot  find  symbol  getArEntry0	61	None	replace
293	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(0);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
294	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(groupid,  offset);  [CE]  cannot  find  symbol  groupid  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(groupid,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(groupid,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  groupid	4	None	replace
295	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width,  offset);  [CE]  cannot  find  symbol  width  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	4	None	replace
296	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(range,  offset);  [CE]  cannot  find  symbol  range  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(range,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(range,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  range	4	None	replace
297	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(arrangement,  offset);  [CE]  cannot  find  symbol  arrangement  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(arrangement,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(arrangement,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  arrangement	4	None	replace
298	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width,  length);  [CE]  cannot  find  symbol  width  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(width,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	4	None	replace
299	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  offset;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  *  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
300	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  ';'  expected	41	None	replace
301	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  /  offset;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  /  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  /  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
302	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset,  offset);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  ';'  expected	41	None	replace
303	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset,  offset;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset,  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset,  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
304	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset  +  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
305	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
306	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	96	None	replace
307	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
308	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	96	None	replace
309	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(pInput);  [CE]  cannot  find  symbol  pInput  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(pInput);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(pInput);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	96	None	replace
310	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(width,  offset);  [CE]  cannot  find  symbol  width  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol  width	96	None	replace
311	[BUG]  [BUGGY]  final  int  expectedLength  =  offset();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  offset();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  offset();	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
312	[BUG]  [BUGGY]  final  int  expectedLength  =  length()  -  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  length()  -  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  length()  -  1;	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
313	[BUG]  [BUGGY]  final  int  expectedLength  =  length()  +  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  length()  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  length()  +  1;	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
314	[BUG]  [BUGGY]  final  int  expectedLength  =  this.length();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  this.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  this.length();	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
315	[BUG]  [BUGGY]  final  int  expectedLength  =  length()  -  offset;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  length()  -  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  length()  -  offset;	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
316	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  height);  [CE]  cannot  find  symbol  height  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  height);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  height);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(length,    offset);    	non-compiled	[CE]  cannot  find  symbol  height	6	None	replace
317	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getNextArEntry();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  filemode.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
318	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  getNextArEntry();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
319	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEndArEntry();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEndArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getEndArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
320	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getFirstChronology();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getFirstChronology();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getFirstChronology();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
321	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModifiedName();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModifiedName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModifiedName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
322	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupid.getArEntryName();  [CE]  cannot  find  symbol  groupid  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupid.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupid.getArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  groupid	75	None	replace
323	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntryName.getArEntryName();  [CE]  cannot  find  symbol  arEntryName  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntryName.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntryName.getArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arEntryName	75	None	replace
324	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rEntryName.getArEntryName();  [CE]  cannot  find  symbol  rEntryName  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rEntryName.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rEntryName.getArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  rEntryName	75	None	replace
325	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntryName();  [CE]  cannot  find  symbol  arEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arEntry	75	None	replace
326	[BUG]  [BUGGY]  final  byte[]  expected  =  this.ararchy.getArEntryName();  [CE]  cannot  find  symbol  ararchy  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.ararchy.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.ararchy.getArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  ararchy	75	None	replace
327	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryImpl(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryImpl(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryImpl(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryImpl();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
328	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryImpl();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryImpl();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryImpl();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryImpl();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
329	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryImpl();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryImpl();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryImpl();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryImpl();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	106	None	replace
330	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getPrevious();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getPrevious();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getPrevious();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPrevious();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	36	None	replace
331	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastModified();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastModified();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getLastModified();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
332	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.setPrevious(offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.setPrevious(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.setPrevious(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
333	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getPrevious();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getPrevious();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getPrevious();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPrevious();    	non-compiled	[CE]  ';'  expected	36	None	replace
334	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
335	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  File.separatorChar);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  File.separatorChar);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  File.separatorChar);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
336	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName()  +  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
337	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName(),  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName(),  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName(),  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
338	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getFilemode());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getFilemode());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getFilemode());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
339	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getRawName());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getRawName());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getRawName());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
340	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize(offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntrySize();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
341	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize()  +  offset;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntrySize();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
342	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntrySize();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntrySize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntrySize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntrySize();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	90	None	replace
343	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize(0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntrySize();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
344	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames(offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
345	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryNames();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryNames();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryNames();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
346	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryNames();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryNames();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryNames();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	102	None	replace
347	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames()  +  offset;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
348	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames2();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames2();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames2();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
349	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  length	98	None	replace
350	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
351	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	98	None	replace
352	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(width,  offset);  [CE]  cannot  find  symbol  width  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	98	None	replace
353	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
354	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	83	None	replace
355	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol  source	83	None	replace
356	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol  length	83	None	replace
357	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  name);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol  name	83	None	replace
358	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  input);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
359	[BUG]  [BUGGY]  final  int  expectedLength  =  read(groupid);  [CE]  cannot  find  symbol  groupid  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(groupid);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	25	None	replace
360	[BUG]  [BUGGY]  final  int  expectedLength  =  read(offset);  [CE]  no  suitable  method  found  for  read(long)  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(offset);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	25	None	replace
361	[BUG]  [BUGGY]  final  int  expectedLength  =  read(groupid.length);  [CE]  cannot  find  symbol  groupid  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(groupid.length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(groupid.length);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	25	None	replace
362	[BUG]  [BUGGY]  final  int  expectedLength  =  read(width);  [CE]  cannot  find  symbol  width  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(width);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(width);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  width	25	None	replace
363	[BUG]  [BUGGY]  final  int  expectedLength  =  read(length);  [CE]  cannot  find  symbol  length  [FE]                                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(length);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
364	[BUG]  [BUGGY]  final  int  expectedLength  =  read(expected.length);  [CE]  cannot  find  symbol  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(expected.length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(expected.length);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  expected	25	None	replace
365	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECONDS;  [CE]  cannot  find  symbol  HEADER_SECONDS  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECONDS;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECONDS;	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SECONDS	28	None	replace
366	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_COMMA.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_COMMA  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_COMMA.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_COMMA.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_COMMA	28	None	replace
367	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  this.groupid);  [CE]  cannot  find  symbol  groupid  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  this.groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  this.groupid);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	2	None	replace
368	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  name	2	None	replace
369	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  set);  [CE]  cannot  find  symbol  set  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  set);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  set);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  set	2	None	replace
370	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ARRAY_ENTRY.getNextArEntry();  [CE]  cannot  find  symbol  ARRAY_ENTRY  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ARRAY_ENTRY.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.ARRAY_ENTRY.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  ARRAY_ENTRY	11	None	replace
371	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ERROR.getNextArEntry();  [CE]  cannot  find  symbol  ERROR  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ERROR.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.ERROR.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  ERROR	11	None	replace
372	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ArEntry.getNextArEntry();  [CE]  cannot  find  symbol  ArEntry  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ArEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.ArEntry.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  ArEntry	11	None	replace
373	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HeADER.getNextArEntry(offset);  [CE]  cannot  find  symbol  HeADER  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HeADER.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HeADER.getNextArEntry(offset);	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  HeADER	11	None	replace
374	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.EAGER.getNextArEntry();  [CE]  cannot  find  symbol  EAGER  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.EAGER.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.EAGER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  EAGER	11	None	replace
375	[BUG]  [BUGGY]  final  int  expectedLength  =  read(groupmode);  [CE]  cannot  find  symbol  groupmode  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(groupmode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(groupmode);	  final    int    expectedLength    =    read(lastmodified);    	non-compiled	[CE]  cannot  find  symbol  groupmode	26	None	replace
376	[BUG]  [BUGGY]  final  int  expected.length  =  read(filemode,  offset);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(filemode,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(filemode,  offset);	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
377	[BUG]  [BUGGY]  final  int  expected.length  =  read(groupid,  filemode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(groupid,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(groupid,  filemode);	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
378	[BUG]  [BUGGY]  final  byte  expected.length  =  read(filemode);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte  expected.length  =  read(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte  expected.length  =  read(filemode);	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
379	[BUG]  [BUGGY]  final  int  expected.length  =  read(filemode,  offset  +  1);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(filemode,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(filemode,  offset  +  1);	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
380	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
381	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	31	None	replace
382	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
383	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  false);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  false);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  false);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
384	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol  source	31	None	replace
385	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  header);  [CE]  cannot  find  symbol  header  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  header);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  header);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol  header	31	None	replace
386	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(offset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
387	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryBytes();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	50	None	replace
388	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(Offset.UTF8);  [CE]  cannot  find  symbol  Offset  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(Offset.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(Offset.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  Offset	50	None	replace
389	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(2);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(2);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
390	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(1);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
391	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(Offset.zero());  [CE]  cannot  find  symbol  Offset  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(Offset.zero());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(Offset.zero());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  Offset	50	None	replace
392	[BUG]  [BUGGY]  InputStream  input  =  this.getInput();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  this.getInput();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  this.getInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
393	[BUG]  [BUGGY]  InputStream  input  =  getArEntry();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getArEntry();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
394	[BUG]  [BUGGY]  InputStream  input  =  getInput().getArEntry();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getInput().getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInput().getArEntry();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
395	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupid.getHeaderSeparator();  [CE]  cannot  find  symbol  groupid  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupid.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupid.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  groupid	87	None	replace
396	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupSeparator.getHeaderSeparator();  [CE]  cannot  find  symbol  groupSeparator  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupSeparator.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupSeparator.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  groupSeparator	87	None	replace
397	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rEntrySeparator.getHeaderSeparator();  [CE]  cannot  find  symbol  rEntrySeparator  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rEntrySeparator.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rEntrySeparator.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  rEntrySeparator	87	None	replace
398	[BUG]  [BUGGY]  final  byte[]  expected  =  this.filemode.getHeaderSeparator();  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.filemode.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.filemode.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  filemode	87	None	replace
399	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getHeaderSeparator();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	87	None	replace
400	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntrySeparator.getHeaderSeparator();  [CE]  cannot  find  symbol  arEntrySeparator  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntrySeparator.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntrySeparator.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  arEntrySeparator	87	None	replace
401	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR,  offset.getHeaderSeparator();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR,  offset.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR,  offset.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	29	None	replace
402	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSize();  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	29	None	replace
403	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR;  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR;	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	29	None	replace
404	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getWrappedHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getWrappedHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getWrappedHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	29	None	replace
405	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getNextArEntry();  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	29	None	replace
406	[BUG]  [BUGGY]  final  int  expectedLength  =  this.input.length();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  this.input.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  this.input.length();	  final    int    expectedLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
407	[BUG]  [BUGGY]  final  int  expectedLength  =  input.length()  -  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  input.length()  -  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  input.length()  -  1;	  final    int    expectedLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
408	[BUG]  [BUGGY]  final  int  expectedLength  =  input.length()  -  offset;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  input.length()  -  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  input.length()  -  offset;	  final    int    expectedLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
409	[BUG]  [BUGGY]  final  int  expectedLength  =  output.length();  [CE]  cannot  find  symbol  output  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  output.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  output.length();	  final    int    expectedLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  output	63	None	replace
410	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.getArEntryBytes();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	49	None	replace
411	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(this.groupid);  [CE]  cannot  find  symbol  groupid  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(this.groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(this.groupid);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	3	None	replace
412	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(4);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(4);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(4);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(2);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
413	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(3);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(3);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(3);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(2);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
414	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupid.getHeader();  [CE]  cannot  find  symbol  groupid  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupid.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupid.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  groupid	81	None	replace
415	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	81	None	replace
416	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getHeader();  [CE]  cannot  find  symbol  arEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arEntry	81	None	replace
417	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rEntry.getHeader();  [CE]  cannot  find  symbol  rEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rEntry.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rEntry.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  rEntry	81	None	replace
418	[BUG]  [BUGGY]  final  byte[]  expected  =  this.filemode.getHeader();  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.filemode.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.filemode.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  filemode	81	None	replace
419	[BUG]  [BUGGY]  final  byte[]  expected  =  this.groupmode.getHeader();  [CE]  cannot  find  symbol  groupmode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.groupmode.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.groupmode.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  groupmode	81	None	replace
420	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset.UTF8);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  long  cannot  be  dereferenced	51	None	replace
421	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  ArArchiveEntry.UTF8);  [CE]  cannot  find  symbol  UTF8  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  ArArchiveEntry.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  ArArchiveEntry.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  UTF8	51	None	replace
422	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(System.currentTimeMillis());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(System.currentTimeMillis());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(System.currentTimeMillis());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
423	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(R.UTF8);  [CE]  cannot  find  symbol  R  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(R.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(R.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  R	51	None	replace
424	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(RawOffset.UTF8);  [CE]  cannot  find  symbol  RawOffset  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(RawOffset.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(RawOffset.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  RawOffset	51	None	replace
425	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Lineno.UTF8);  [CE]  cannot  find  symbol  Lineno  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Lineno.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Lineno.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  Lineno	51	None	replace
426	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeaderSeparator(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeaderSeparator(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeaderSeparator(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
427	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND.parseHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SECOND  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND.parseHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND.parseHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SECOND	89	None	replace
428	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.parseHeaderSeparator();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.parseHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.parseHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	89	None	replace
429	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseBaseHeaderSeparator();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseBaseHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseBaseHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
430	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeaderSeparator();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
431	[BUG]  [BUGGY]  final  int  expected  =  read(groupid);  [CE]  cannot  find  symbol  groupid  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(groupid);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	92	None	replace
432	[BUG]  [BUGGY]  final  int  expected  =  read(offset);  [CE]  no  suitable  method  found  for  read(long)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(offset);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	92	None	replace
433	[BUG]  [BUGGY]  final  int  expected  =  read(lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(lastmodified);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(lastmodified);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	92	None	replace
434	[BUG]  [BUGGY]  final  int  expected  =  read(groupid.length);  [CE]  cannot  find  symbol  groupid  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(groupid.length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(groupid.length);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	92	None	replace
435	[BUG]  [BUGGY]  final  int  expected  =  read(width);  [CE]  cannot  find  symbol  width  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(width);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(width);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  width	92	None	replace
436	[BUG]  [BUGGY]  final  int  expected  =  read(groupId);  [CE]  cannot  find  symbol  groupId  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(groupId);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(groupId);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupId	92	None	replace
437	[BUG]  [BUGGY]  final  int  expected  =  read(groupid,  offset);  [CE]  cannot  find  symbol  groupid  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(groupid,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(groupid,  offset);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	92	None	replace
438	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
439	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	35	None	replace
440	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  length	35	None	replace
441	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(arrangement);  [CE]  cannot  find  symbol  arrangement  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(arrangement);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(arrangement);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  arrangement	35	None	replace
442	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  read);  [CE]  cannot  find  symbol  read  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  read	35	None	replace
443	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(range);  [CE]  cannot  find  symbol  range  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(range);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(range);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  range	35	None	replace
444	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY;  [CE]  cannot  find  symbol  HEADER_ARRAY  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_ARRAY	34	None	replace
445	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARGS;  [CE]  cannot  find  symbol  HEADER_ARGS  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARGS;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_ARGS;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_ARGS	34	None	replace
446	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARG;  [CE]  cannot  find  symbol  HEADER_ARG  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARG;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_ARG;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_ARG	34	None	replace
447	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_2;  [CE]  cannot  find  symbol  HEADER_2  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_2;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_2;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_2	34	None	replace
448	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_1;  [CE]  cannot  find  symbol  HEADER_1  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_1	34	None	replace
449	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_READ_ERROR;  [CE]  cannot  find  symbol  HEADER_READ_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_READ_ERROR;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_READ_ERROR;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_READ_ERROR	34	None	replace
450	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.groupid);  [CE]  cannot  find  symbol  groupid  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.groupid);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  groupid	55	None	replace
451	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  name);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  name	55	None	replace
452	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  format);  [CE]  cannot  find  symbol  format  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  format);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  format);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  format	55	None	replace
453	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getWrappedHeader();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getWrappedHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getWrappedHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	45	None	replace
454	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedHeader(offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedHeader(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
455	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedRawHeader();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedRawHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedRawHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
456	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedAbsoluteHeader();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedAbsoluteHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedAbsoluteHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
457	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedFileHeader();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedFileHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedFileHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
458	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  header);  [CE]  cannot  find  symbol  header  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  header);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  header);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    read);    	non-compiled	[CE]  cannot  find  symbol  header	5	None	replace
459	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
460	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryRaw();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryRaw();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryRaw();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
461	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw2();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw2();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw2();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
462	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryRaw();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryRaw();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryRaw();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	39	None	replace
463	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(2);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(2);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
464	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw(1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
465	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getHeader();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	43	None	replace
466	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.getHeader();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	43	None	replace
467	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER;  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER;	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	43	None	replace
468	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawParent();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getParent();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
469	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
470	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	103	None	replace
471	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	103	None	replace
472	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
473	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(length);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
474	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(pInput);  [CE]  cannot  find  symbol  pInput  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(pInput);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(pInput);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	103	None	replace
475	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  height);  [CE]  cannot  find  symbol  height  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  height);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  height);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(width,    offset);    	non-compiled	[CE]  cannot  find  symbol  height	68	None	replace
476	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  width);  [CE]  cannot  find  symbol  width  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  width);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  width);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(width,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	68	None	replace
477	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  header);  [CE]  cannot  find  symbol  header  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  header);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  header);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(width,    offset);    	non-compiled	[CE]  cannot  find  symbol  header	68	None	replace
478	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.getArEntryName();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	17	None	replace
479	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.Header.getNextArEntry();  [CE]  cannot  find  symbol  Header  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.Header.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.Header.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  Header	11	None	replace
480	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ArEntry.HeADER.getNextArEntry();  [CE]  cannot  find  symbol  ArEntry  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ArEntry.HeADER.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.ArEntry.HeADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  ArEntry	11	None	replace
481	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HeAder.getNextArEntry();  [CE]  cannot  find  symbol  HeAder  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HeAder.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HeAder.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  HeAder	11	None	replace
482	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getPrevious();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getPrevious();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getPrevious();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPrevious();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	36	None	replace
483	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getPrevious();  [CE]  cannot  find  symbol  header  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getPrevious();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getPrevious();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPrevious();    	non-compiled	[CE]  cannot  find  symbol  header	36	None	replace
484	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryNames();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryNames();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryNames();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	102	None	replace
485	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames2D();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames2D();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames2D();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
486	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryNames();  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryNames();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryNames();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryNames();    	non-compiled	[CE]  cannot  find  symbol  header	102	None	replace
487	[BUG]  [BUGGY]  final  byte[]  expected  =  this.getNextArEntry();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.getNextArEntry();	  final    byte[]    expected    =    ARArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  incompatible  types	105	None	replace
488	[BUG]  [BUGGY]  int  expected.length  =  read(new  File(filemode));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(new  File(filemode));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(new  File(filemode));	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
489	[BUG]  [BUGGY]  int  expected.length  =  read(left);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  int  expected.length  =  read(left);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(left);	  int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	93	None	replace
490	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getArgName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getArgName());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getArgName());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
491	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getNextName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getNextName());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getNextName());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
492	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(edge);  [CE]  cannot  find  symbol  edge  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(edge);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(edge);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  edge	70	None	replace
493	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(sourcePosition);  [CE]  cannot  find  symbol  sourcePosition  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(sourcePosition);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(sourcePosition);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  sourcePosition	70	None	replace
494	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  name);  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  name	103	None	replace
495	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  offset);  [CE]  cannot  find  symbol  width  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol  width	103	None	replace
496	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getParent();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getParent();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
497	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.ARRAY.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.ARRAY.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.ARRAY.getNext();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	72	None	replace
498	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  input,  offset);  [CE]  cannot  find  symbol  arInput  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol  arInput	100	None	replace
499	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this.input,  offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this.input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this.input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
500	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryRaw();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryRaw();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryRaw();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryRaw();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	39	None	replace
501	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SUBJECT.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SUBJECT  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SUBJECT.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SUBJECT.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SUBJECT	27	None	replace
502	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_ARRAY  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_ARRAY	27	None	replace
503	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND,  filemode.getHeaderSeparator();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND,  filemode.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND,  filemode.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	27	None	replace
504	[BUG]  [BUGGY]  final  byte[]  expected  =  this.root.getNext();  [CE]  cannot  find  symbol  root  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.root.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.root.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  root	71	None	replace
505	[BUG]  [BUGGY]  final  byte[]  expected  =  this.sourcemode.getNext();  [CE]  cannot  find  symbol  sourcemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.sourcemode.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.sourcemode.getNext();	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  sourcemode	71	None	replace
506	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  width  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(width,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  width	88	None	replace
507	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ararchiveEntry.HEADER,  offset);  [CE]  cannot  find  symbol  ararchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ararchiveEntry.HEADER,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ararchiveEntry.HEADER,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  ararchiveEntry	88	None	replace
508	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ARGiveEntry.HEADER,  offset);  [CE]  cannot  find  symbol  ARGiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ARGiveEntry.HEADER,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(ARGiveEntry.HEADER,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  ARGiveEntry	88	None	replace
509	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arrangement,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  arrangement  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arrangement,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arrangement,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  arrangement	88	None	replace
510	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getValue();  [CE]  cannot  find  symbol  header  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getValue();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getValue();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol  header	94	None	replace
511	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getValue();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getValue();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getValue();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	94	None	replace
512	[BUG]  [BUGGY]  final  byte[]  expected  =  this.HEADER.getValue();  [CE]  cannot  find  symbol  HEADER  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.HEADER.getValue();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.HEADER.getValue();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol  HEADER	94	None	replace
513	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeader(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeader(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	44	None	replace
514	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(width,  offset);  [CE]  cannot  find  symbol  width  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  width	44	None	replace
515	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  input);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
516	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryImpl();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryImpl();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryImpl();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryImpl();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	106	None	replace
517	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
518	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.groupid.getNext();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.groupid.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.groupid.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
519	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset)+  1;  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset)+  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset)+  1;	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	97	None	replace
520	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	29	None	replace
521	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getNextHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getNextHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getNextHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	29	None	replace
522	[BUG]  [BUGGY]  InputStream  input  =  getInputStream().readLine();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getInputStream().readLine();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInputStream().readLine();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
523	[BUG]  [BUGGY]  InputStream  input  =  getNextInputStream();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getNextInputStream();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getNextInputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
524	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	14	None	replace
525	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  input);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
526	[BUG]  [BUGGY]  final  int  expected.length  =  read(lastmodified,  offset);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(lastmodified,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(lastmodified,  offset);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
527	[BUG]  [BUGGY]  final  int  expected.length  =  read(groupmode);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(groupmode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(groupmode);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
528	[BUG]  [BUGGY]  final  int  expected.length  =  read(lastmodified  +  1);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(lastmodified  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(lastmodified  +  1);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
529	[BUG]  [BUGGY]  final  int  expected.length  =  read(new  String(filemode));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(new  String(filemode));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(new  String(filemode));	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
530	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  output);  [CE]  cannot  find  symbol  output  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  output);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  output);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    source);    	non-compiled	[CE]  cannot  find  symbol  output	59	None	replace
531	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  endpoint);  [CE]  cannot  find  symbol  endpoint  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  endpoint);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  endpoint);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    source);    	non-compiled	[CE]  cannot  find  symbol  endpoint	59	None	replace
532	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes(0);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes(0);	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
533	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntryBytes();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
534	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  input);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
535	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getValue(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getValue(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getValue(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	96	None	replace
536	[BUG]  [BUGGY]  final  byte[]  expected  =  this.rootSeparator.getHeaderSeparator();  [CE]  cannot  find  symbol  rootSeparator  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.rootSeparator.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.rootSeparator.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  rootSeparator	87	None	replace
537	[BUG]  [BUGGY]  final  byte[]  expected  =  this.bodySeparator.getHeaderSeparator();  [CE]  cannot  find  symbol  bodySeparator  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.bodySeparator.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.bodySeparator.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  bodySeparator	87	None	replace
538	[BUG]  [BUGGY]  final  byte[]  expected  =  this.headerSeparator,  offset.getHeaderSeparator();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.headerSeparator,  offset.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.headerSeparator,  offset.getHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	87	None	replace
539	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getPreviousArEntry();  [CE]  cannot  find  symbol  header  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getPreviousArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getPreviousArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPreviousArEntry();    	non-compiled	[CE]  cannot  find  symbol  header	12	None	replace
540	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getPreviousArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getPreviousArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getPreviousArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getPreviousArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	12	None	replace
541	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getHeaderSeparator();  [CE]  cannot  find  symbol  arEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  arEntry	30	None	replace
542	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.headerSeparator;  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.headerSeparator;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.headerSeparator;	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	30	None	replace
543	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  lastmodified);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  lastmodified);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	2	None	replace
544	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  this.lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  this.lastmodified);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  this.lastmodified);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    filemode);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	2	None	replace
545	[BUG]  [BUGGY]  InputStream  input  =  getOutput();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getOutput();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getOutput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
546	[BUG]  [BUGGY]  InputStream  input  =  getInput().getEncoding();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getInput().getEncoding();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInput().getEncoding();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
547	[BUG]  [BUGGY]  InputStream  input  =  getInput().getParent();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getInput().getParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInput().getParent();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
548	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	42	None	replace
549	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(length);  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength(offset);    	non-compiled	[CE]  cannot  find  symbol  length	42	None	replace
550	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(lastmodified,  offset);  [CE]  cannot  find  symbol  lastmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(lastmodified,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(lastmodified,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	4	None	replace
551	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(sourceName,  offset);  [CE]  cannot  find  symbol  sourceName  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(sourceName,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(sourceName,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  sourceName	4	None	replace
552	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntryBytes();  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getNextArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  header	50	None	replace
553	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(0);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
554	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getNextArEntry();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
555	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getNextArEntry();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
556	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModifiedArEntry();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModifiedArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getLastModifiedArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
557	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  input);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
558	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  name);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  name	35	None	replace
559	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  source);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  source	35	None	replace
560	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntry();  [CE]  cannot  find  symbol  header  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntry();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  header	81	None	replace
561	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryHeader();  [CE]  cannot  find  symbol  header  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  header	81	None	replace
562	[BUG]  [BUGGY]  final  byte[]  expected  =  this.root.getHeader();  [CE]  cannot  find  symbol  root  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.root.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.root.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  root	81	None	replace
563	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(0);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(0);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	53	None	replace
564	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRawSize();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRawSize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRawSize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntrySize();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
565	[BUG]  [BUGGY]  final  int  expectedLength  =  read(expected);  [CE]  cannot  find  symbol  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(expected);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(expected);	  final    int    expectedLength    =    read(lastmodified);    	non-compiled	[CE]  cannot  find  symbol  expected	26	None	replace
566	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getRawHeader();  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getRawHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getRawHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  cannot  find  symbol  header	46	None	replace
567	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getRawHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getRawHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getRawHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getRawHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	46	None	replace
568	[BUG]  [BUGGY]  final  int  expectedLength  =  data.length();  [CE]  cannot  find  symbol  data  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  data.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  data.length();	  final    int    expectedLength    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  data	63	None	replace
569	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryByName(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryByName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryByName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	101	None	replace
570	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  input);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
571	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(range);  [CE]  cannot  find  symbol  range  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(range);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(range);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  range	48	None	replace
572	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getHeaderData();  [CE]  cannot  find  symbol  header  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getHeaderData();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getHeaderData();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol  header	107	None	replace
573	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_DATA.getHeaderData();  [CE]  cannot  find  symbol  HEADER_DATA  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_DATA.getHeaderData();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_DATA.getHeaderData();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol  HEADER_DATA	107	None	replace
574	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataRef();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataRef();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataRef();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
575	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntryName();  [CE]  cannot  find  symbol  header  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getNextArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	75	None	replace
576	[BUG]  [BUGGY]  final  byte[]  expected  =  this.root.getArEntryName();  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.root.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.root.getArEntryName();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  root	75	None	replace
577	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryName(offset);  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryName(offset);	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	75	None	replace
578	[BUG]  [BUGGY]  final  byte[]  expected  =  filemode.getNext();  [CE]  cannot  find  symbol  filemode  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  filemode.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  filemode.getNext();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  filemode	33	None	replace
579	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  edge);  [CE]  cannot  find  symbol  edge  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  edge);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  edge);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  edge	54	None	replace
580	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.sourceName);  [CE]  cannot  find  symbol  sourceName  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.sourceName);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  this.sourceName);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  sourceName	54	None	replace
581	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  end);  [CE]  cannot  find  symbol  end  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  end);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  end);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    read);    	non-compiled	[CE]  cannot  find  symbol  end	57	None	replace
582	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderSeparator(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderSeparator(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderSeparator(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	31	None	replace
583	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  predicate);  [CE]  cannot  find  symbol  predicate  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  predicate);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset,  predicate);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator(offset);    	non-compiled	[CE]  cannot  find  symbol  predicate	31	None	replace
584	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
585	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  lastmodified);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  lastmodified);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	67	None	replace
586	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  input);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
587	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName()  +  offset;  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	16	None	replace
588	[BUG]  [BUGGY]  final  byte[]  expected  =  ARRAYEntry.HEADER.getArEntryName()  +  offset;  [CE]  package  ARRAYEntry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ARRAYEntry.HEADER.getArEntryName()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ARRAYEntry.HEADER.getArEntryName()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName()    +    offset;    	non-compiled	[CE]  package  ARRAYEntry  does  not  exist	16	None	replace
589	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(width,  offset);  [CE]  cannot  find  symbol  width  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(width,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  width	8	None	replace
590	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(args);  [CE]  cannot  find  symbol  args  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(args);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(args);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  args	8	None	replace
591	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getHeaderSeparator();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  input.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
592	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_KEY,  offset.getHeaderSeparator();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_KEY,  offset.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_KEY,  offset.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
593	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSeparator()  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSeparator()  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSeparator()  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
594	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getHeaderSeparator();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
595	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length  +  1);  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	99	None	replace
596	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  offset  +  1);  [CE]  no  suitable  method  found  for  getBytes(long,InputStream,long)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,InputStream,long)	99	None	replace
597	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  name  +  1);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  name  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  name  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  name	99	None	replace
598	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  input);  [CE]  no  suitable  method  found  for  getBytes(long,long,InputStream)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,long,InputStream)	99	None	replace
599	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryName();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryName();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
600	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextName();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextName();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
601	[BUG]  [BUGGY]  final  byte[]  expected  =  this.aarArchiveEntry.getNextArEntry();  [CE]  cannot  find  symbol  aarArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.aarArchiveEntry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.aarArchiveEntry.getNextArEntry();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  aarArchiveEntry	104	None	replace
602	[BUG]  [BUGGY]  final  byte[]  expected  =  input.getArEntry(offset,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  input.getArEntry(offset,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  input.getArEntry(offset,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    input);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
603	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
604	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryId();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	76	None	replace
605	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryId();  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryId();    	non-compiled	[CE]  cannot  find  symbol  header	76	None	replace
606	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	15	None	replace
607	[BUG]  [BUGGY]  final  byte[]  expected  =  ARRAYEntry.HEADER.getNextArEntryName();  [CE]  package  ARRAYEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ARRAYEntry.HEADER.getNextArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ARRAYEntry.HEADER.getNextArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryName();    	non-compiled	[CE]  package  ARRAYEntry  does  not  exist	15	None	replace
608	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  edge);  [CE]  cannot  find  symbol  edge  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  edge);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  edge);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  edge	98	None	replace
609	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  this.length);  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  this.length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  this.length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  length	98	None	replace
610	[BUG]  [BUGGY]  final  byte[]  expected  =  getNextArEntry().getHeader();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  getNextArEntry().getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  getNextArEntry().getHeader();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
611	[BUG]  [BUGGY]  final  byte[]  expected  =  filemode.getHeader();  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  filemode.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  filemode.getHeader();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  filemode	43	None	replace
612	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextAREntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextAREntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextAREntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextAREntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	80	None	replace
613	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getNextAREntry();  [CE]  cannot  find  symbol  header  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getNextAREntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getNextAREntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextAREntry();    	non-compiled	[CE]  cannot  find  symbol  header	80	None	replace
614	[BUG]  [BUGGY]  final  int  expected  =  read(left);  [CE]  cannot  find  symbol  left  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(left);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(left);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  left	92	None	replace
615	[BUG]  [BUGGY]  final  int  expected  =  read(new  String(lastmodified));  [CE]  cannot  find  symbol  lastmodified  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(new  String(lastmodified));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(new  String(lastmodified));	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	92	None	replace
616	[BUG]  [BUGGY]  final  int  expected  =  read(new  File(lastmodified));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(new  File(lastmodified));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(new  File(lastmodified));	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
617	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  start);  [CE]  cannot  find  symbol  start  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  start);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  start);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    read);    	non-compiled	[CE]  cannot  find  symbol  start	5	None	replace
618	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength()  +  offset;  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	41	None	replace
619	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryLength()  +  offset;  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryLength()  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryLength()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	41	None	replace
620	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  this.groupid;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  this.groupid;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  this.groupid;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    offset;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
621	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseLeaderSeparator();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseLeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseLeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
622	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARGiveEntry.UTF8);  [CE]  cannot  find  symbol  ARGiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARGiveEntry.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARGiveEntry.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  ARGiveEntry	51	None	replace
623	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Polyline.UTF8);  [CE]  cannot  find  symbol  Polyline  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Polyline.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Polyline.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  Polyline	51	None	replace
624	[BUG]  [BUGGY]  final  int  expected.length  =  read(new  File(filemode));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(new  File(filemode));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(new  File(filemode));	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
625	[BUG]  [BUGGY]  final  int  expected.length  =  read(left);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(left);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(left);	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
626	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryBytes(offset);  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryBytes(offset);	  final    byte[]    expected    =    this.header.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  header	86	None	replace
627	[BUG]  [BUGGY]  final  byte[]  expected  =  this.root.getArEntryBytes();  [CE]  cannot  find  symbol  root  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.root.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.root.getArEntryBytes();	  final    byte[]    expected    =    this.header.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  root	86	None	replace
628	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getParent();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getParent();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	38	None	replace
629	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.asHeader();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.asHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.asHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	82	None	replace
630	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SCRIPT.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SCRIPT  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SCRIPT.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SCRIPT.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SCRIPT	28	None	replace
631	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SERVICE.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SERVICE  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SERVICE.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SERVICE.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SERVICE	28	None	replace
632	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  lastmodified);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  lastmodified);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	1	None	replace
633	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(getPosition());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(getPosition());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(getPosition());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
634	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(args,  null);  [CE]  cannot  find  symbol  args  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(args,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(args,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol  args	58	None	replace
635	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(range,  null);  [CE]  cannot  find  symbol  range  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(range,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(range,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol  range	58	None	replace
636	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName(0);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName(0);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	18	None	replace
637	[BUG]  [BUGGY]  File  filemode  =  getFilemodeInput();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemodeInput();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemodeInput();	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
638	[BUG]  [BUGGY]  File  filemode  =  getFilemodeWithOffset(offset);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemodeWithOffset(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemodeWithOffset(offset);	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
639	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getWrappedHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getWrappedHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getWrappedHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	45	None	replace
640	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getWrappedHeader();  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getWrappedHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getWrappedHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol  header	45	None	replace
641	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedArEntry();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
642	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryLength();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryLength();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryLength();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
643	[BUG]  [BUGGY]  final  byte[]  expected  =  this.root.getNextArEntry();  [CE]  cannot  find  symbol  root  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.root.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.root.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  root	77	None	replace
644	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntry(offset);  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getNextArEntry(offset);	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  header	77	None	replace
645	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextParent();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextParent();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	73	None	replace
646	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength()  +  1;  [CE]  package  arArchiveEntry  does  not  exist  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength()  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength()  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	40	None	replace
647	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(getPosition());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(getPosition());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(getPosition());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
648	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_KEY;  [CE]  cannot  find  symbol  HEADER_KEY  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_KEY;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_KEY;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_KEY	34	None	replace
649	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_REGEXP;  [CE]  cannot  find  symbol  HEADER_REGEXP  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_REGEXP;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_REGEXP;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_REGEXP	34	None	replace
650	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_QUOTE;  [CE]  cannot  find  symbol  HEADER_QUOTE  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_QUOTE;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_QUOTE;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_QUOTE	34	None	replace
651	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getHeader(offset);  [CE]  cannot  find  symbol  header  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getHeader(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getHeader(offset);	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  header	81	None	replace
652	[BUG]  [BUGGY]  final  byte[]  expected  =  header.getHeader();  [CE]  cannot  find  symbol  header  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  header.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  header.getHeader();	  final    byte[]    expected    =    this.header.getHeader();    	non-compiled	[CE]  cannot  find  symbol  header	81	None	replace
653	[BUG]  [BUGGY]  final  int  expected  =  read(groupID);  [CE]  cannot  find  symbol  groupID  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected  =  read(groupID);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(groupID);	  final    int    expected    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  groupID	92	None	replace
654	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValueByName(offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValueByName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValueByName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
655	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
656	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue2();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue2();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue2();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
657	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(range);    	non-compiled	[CE]  cannot  find  symbol  length	70	None	replace
658	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset  +  1);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  filemode	99	None	replace
659	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  read);  [CE]  cannot  find  symbol  read  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  read);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  read	99	None	replace
660	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  2);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  2);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(2);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
661	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Rhino.UTF8);  [CE]  cannot  find  symbol  Rhino  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Rhino.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Rhino.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  Rhino	51	None	replace
662	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(RawClass.UTF8);  [CE]  cannot  find  symbol  RawClass  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(RawClass.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(RawClass.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  RawClass	51	None	replace
663	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARRAY_PREFIX);  [CE]  cannot  find  symbol  ARRAY_PREFIX  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARRAY_PREFIX);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARRAY_PREFIX);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_PREFIX	51	None	replace
664	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARRAY_ENTRY_BYTE_UTF8);  [CE]  cannot  find  symbol  ARRAY_ENTRY_BYTE_UTF8  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARRAY_ENTRY_BYTE_UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(ARRAY_ENTRY_BYTE_UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_ENTRY_BYTE_UTF8	51	None	replace
665	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryByName(offset);  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryByName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryByName(offset);	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
666	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryId();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryId();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntryId();	  final    byte[]    expected    =    AarArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	104	None	replace
667	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.ARRAY.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.ARRAY.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.ARRAY.getNextArEntry();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	78	None	replace
668	[BUG]  [BUGGY]  final  int  expected.length  =  read(this.groupid);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(this.groupid);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(this.groupid);	  final    int    expected.length    =    read(filemode);    	non-compiled	[CE]  ';'  expected	91	None	replace
669	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntry();  [CE]  cannot  find  symbol  arEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getArEntry();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arEntry	60	None	replace
670	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(input,  offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
671	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryLength();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryLength();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryLength();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextAREntry();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
672	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWeaverHeader();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWeaverHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWeaverHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getWrappedHeader();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
673	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryBytes(offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.Header.getArEntryBytes(offset);	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	85	None	replace
674	[BUG]  [BUGGY]  File  filemode  =  getFilemode().replace('/',  '.');  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  File  filemode  =  getFilemode().replace('/',  '.');  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode().replace('/',  '.');	  File    filemode    =    getFilemode();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
675	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryByName(offset);  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryByName(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryByName(offset);	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	84	None	replace
676	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asParent();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asParent();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.asHeader();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
677	[BUG]  [BUGGY]  final  byte[]  expected  =  header.getNextArEntry();  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  header.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  header.getNextArEntry();	  final    byte[]    expected    =    this.header.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  header	77	None	replace
678	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataReflection();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataReflection();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderDataReflection();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderData();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
679	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getHeaderSeparator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
680	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY,  offset.getHeaderSeparator();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY,  offset.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_ARRAY,  offset.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
681	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  getBase().getHeaderSeparator();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  getBase().getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  getBase().getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	32	None	replace
682	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset  +  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
683	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset,  offset);  [CE]  cannot  find  symbol  arInput  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  arInput	54	None	replace
684	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  length);  [CE]  cannot  find  symbol  width  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    length);    	non-compiled	[CE]  cannot  find  symbol  width	56	None	replace
685	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  buffer);  [CE]  cannot  find  symbol  buffer  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  buffer);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input,  buffer);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  buffer	69	None	replace
686	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(input);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
687	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(input,  offset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
688	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(input,  offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
689	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(pInput,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(pInput,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(pInput,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	8	None	replace
690	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator(offset);  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	29	None	replace
691	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  input,  offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
692	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  input);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(input,    offset);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
693	[BUG]  [BUGGY]  final  int  expectedLength  =  read(new  String(offset));  [CE]  no  suitable  constructor  found  for  String(long)  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(new  String(offset));  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(new  String(offset));	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  no  suitable  constructor  found  for  String(long)	25	None	replace
694	[BUG]  [BUGGY]  final  int  expectedLength  =  read(compiler);  [CE]  cannot  find  symbol  compiler  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(compiler);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(compiler);	  final    int    expectedLength    =    read(filemode);    	non-compiled	[CE]  cannot  find  symbol  compiler	25	None	replace
695	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8);  [CE]  cannot  find  symbol  Offset  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(Offset.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(filemode);    	non-compiled	[CE]  cannot  find  symbol  Offset	3	None	replace
696	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	35	None	replace
697	[BUG]  [BUGGY]  final  byte[]  expected  =  header.getArEntryBytes(offset);  [CE]  cannot  find  symbol  header  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  header.getArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  header.getArEntryBytes(offset);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  header	97	None	replace
698	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntryBytes(offset);  [CE]  cannot  find  symbol  arEntry  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arEntry.getArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arEntry.getArEntryBytes(offset);	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  arEntry	97	None	replace
699	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryMask();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryMask();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryMask();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntrySize();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
700	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getPath());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getPath());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getPath());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
701	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getHeader());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getHeader());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getHeader());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
702	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getSize());  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getSize());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.append(getName());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
703	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ARRAY.getNextArEntry();  [CE]  cannot  find  symbol  ARRAY  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.ARRAY.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.ARRAY.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HeADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  ARRAY	11	None	replace
704	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(filemode);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.fromName(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	83	None	replace
705	[BUG]  [BUGGY]  final  byte[]  expected  =  this.headerSeparator.getHeaderSeparator(offset);  [CE]  cannot  find  symbol  headerSeparator  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.headerSeparator.getHeaderSeparator(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.headerSeparator.getHeaderSeparator(offset);	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  headerSeparator	87	None	replace
706	[BUG]  [BUGGY]  final  byte[]  expected  =  this.headerSeparator.removeHeaderSeparator();  [CE]  cannot  find  symbol  headerSeparator  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.headerSeparator.removeHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.headerSeparator.removeHeaderSeparator();	  final    byte[]    expected    =    this.headerSeparator.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  headerSeparator	87	None	replace
707	[BUG]  [BUGGY]  final  byte[]  expected  =  header.getHeaderSeparator();  [CE]  cannot  find  symbol  header  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  header.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  header.getHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  header	30	None	replace
708	[BUG]  [BUGGY]  final  byte[]  expected  =  entry.getHeaderSeparator();  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  entry.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  entry.getHeaderSeparator();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  entry	30	None	replace
709	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  1);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset,  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
710	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName1();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName1();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName1();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(0);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
711	[BUG]  [BUGGY]  final  byte[]  expected  =  header.getArEntryName();  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  header.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  header.getArEntryName();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	17	None	replace
712	[BUG]  [BUGGY]  final  byte[]  expected  =  path.getArEntryName();  [CE]  cannot  find  symbol  path  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  path.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  path.getArEntryName();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  path	17	None	replace
713	[BUG]  [BUGGY]  final  byte[]  expected  =  entry.getArEntryName();  [CE]  cannot  find  symbol  entry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  entry.getArEntryName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  entry.getArEntryName();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  entry	17	None	replace
714	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.filemode.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
715	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getNext();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
716	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSize();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNext();    	non-compiled	[CE]  ';'  expected	37	None	replace
717	[BUG]  [BUGGY]  final  int  expected.length  =  read(name);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expected.length  =  read(name);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(name);	  final    int    expected.length    =    read(lastmodified);    	non-compiled	[CE]  ';'  expected	64	None	replace
718	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(var,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  var  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(var,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(var,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  var	88	None	replace
719	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arInput,  offset,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  arInput  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arInput,  offset,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arInput,  offset,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  arInput	88	None	replace
720	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arrangementStream,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  arrangementStream  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arrangementStream,  ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(arrangementStream,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.decodeBase64Header(offset,    ArArchiveEntry.HEADER);    	non-compiled	[CE]  cannot  find  symbol  arrangementStream	88	None	replace
721	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(lastmodified,  offset);  [CE]  cannot  find  symbol  lastmodified  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(lastmodified,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(lastmodified,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(width,    offset);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	68	None	replace
722	[BUG]  [BUGGY]  final  byte[]  expected  =  header.getArEntryBytes();  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  header.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  header.getArEntryBytes();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  header	49	None	replace
723	[BUG]  [BUGGY]  final  byte[]  expected  =  entry.getArEntryBytes();  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  entry.getArEntryBytes();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  entry.getArEntryBytes();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  entry	49	None	replace
724	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextSegment();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextSegment();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextSegment();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextParent();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
725	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextName();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextName();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextParent();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
726	[BUG]  [BUGGY]  InputStream  input  =  getArInput();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  InputStream  input  =  getArInput();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getArInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
727	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(pInput,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(pInput,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(pInput,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getValue(offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	96	None	replace
728	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset  +  1;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  ';'  expected	34	None	replace
729	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_PROTOTYPE;  [CE]  cannot  find  symbol  HEADER_PROTOTYPE  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_PROTOTYPE;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_PROTOTYPE;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  cannot  find  symbol  HEADER_PROTOTYPE	34	None	replace
730	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  ';'  expected	34	None	replace
731	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER  +  offset;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER  +  offset;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER;    	non-compiled	[CE]  incompatible  types	34	None	replace
732	[BUG]  [BUGGY]  final  int  expectedLength  =  read(undefined);  [CE]  cannot  find  symbol  undefined  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  read(undefined);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(undefined);	  final    int    expectedLength    =    read(lastmodified);    	non-compiled	[CE]  cannot  find  symbol  undefined	26	None	replace
733	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getNextArEntry();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  header.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
734	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.lastmodified.getNextArEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.lastmodified.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  this.lastmodified.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
735	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  entry.getNextArEntry();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  entry.getNextArEntry();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  entry.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER,    offset.getNextArEntry();    	non-compiled	[CE]  ';'  expected	10	None	replace
736	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseBase64HeaderSeparator();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseBase64HeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseBase64HeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
737	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.encodeHeaderSeparator();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.encodeHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.encodeHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
738	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  header);  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  header);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  header);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset,    offset);    	non-compiled	[CE]  cannot  find  symbol  header	98	None	replace
739	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_STANDARD.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_STANDARD  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_STANDARD.getHeaderSeparator();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_STANDARD.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_STANDARD	27	None	replace
740	[BUG]  [BUGGY]  final  int  expectedLength  =  offset  +  length();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  offset  +  length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  offset  +  length();	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
741	[BUG]  [BUGGY]  final  int  expectedLength  =  offsets.length();  [CE]  cannot  find  symbol  offsets  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  offsets.length();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  offsets.length();	  final    int    expectedLength    =    length();    	non-compiled	[CE]  cannot  find  symbol  offsets	21	None	replace
742	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length);  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input.length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    length);    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
743	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(input,  offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes(offset);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
744	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset,  null);  [CE]  cannot  find  symbol  arInput  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(arInput,  offset,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol  arInput	58	None	replace
745	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this,  offset,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this,  offset,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(this,  offset,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
746	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  null);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset,    null);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
747	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryLength();  [CE]  cannot  find  symbol  header  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryLength();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryLength();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	75	None	replace
748	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntrySize();  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntrySize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntrySize();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	75	None	replace
749	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryRaw();  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntryRaw();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryRaw();	  final    byte[]    expected    =    this.header.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	75	None	replace
750	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntrySize();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntrySize();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntrySize();	  final    byte[]    expected    =    this.arArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	74	None	replace
751	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  input);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryByName(offset);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
752	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryLength();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength()    +    1;    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	40	None	replace
753	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.Header.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.Header.getHeader();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	43	None	replace
754	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getHeader();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.header.getHeader();  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.header.getHeader();	  final    byte[]    expected    =    arArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	43	None	replace
755	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  input);  [CE]  no  suitable  method  found  for  getBytes(long,long,InputStream)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,long,InputStream)	67	None	replace
756	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset,  input);  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset,  input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset,    input);    	non-compiled	[CE]  cannot  find  symbol  filemode	67	None	replace
757	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntry(offset);  [CE]  cannot  find  symbol  header  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  this.header.getArEntry(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntry(offset);	  final    byte[]    expected    =    this.header.getNext();    	non-compiled	[CE]  cannot  find  symbol  header	71	None	replace
758	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(input,  offset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
759	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(input);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(input);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.parseHeader(offset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
760	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(input,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(input,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName(offset);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
761	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  header);  [CE]  cannot  find  symbol  header  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  header);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset,  header);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader(offset);    	non-compiled	[CE]  cannot  find  symbol  header	44	None	replace
762	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(offset,  offset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(offset,  offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
763	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryBytes(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryBytes(offset);  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntryBytes(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntryBytes();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	50	None	replace
764	[BUG]  [BUGGY]  final  int  expectedLength  =  length;  [CE]  cannot  find  symbol  length  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  length;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  length;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	65	None	replace
765	[BUG]  [BUGGY]  final  int  expectedLength  =  data.length;  [CE]  cannot  find  symbol  data  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {      [BUGGY]  final  int  expectedLength  =  data.length;  [BUGGY]      final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  data.length;	  final    int    expectedLength    =    input.length;    	non-compiled	[CE]  cannot  find  symbol  data	65	None	replace
