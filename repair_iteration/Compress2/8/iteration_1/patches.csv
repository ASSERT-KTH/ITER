bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [CE]  no  suitable  method  found  for  getBytes(long,long)  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,long)	2	None	replace
2	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	2	None	replace
3	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	2	None	replace
4	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	2	None	replace
5	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  read);  [CE]  cannot  find  symbol  read  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  read);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  read	2	None	replace
6	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  offset);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
7	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
8	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
9	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntry();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	7	None	replace
10	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getNextArEntry();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  ';'  expected	7	None	replace
11	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HeADER.getNextArEntry();  [CE]  cannot  find  symbol  HeADER  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HeADER.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HeADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  HeADER	7	None	replace
12	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntry();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getPreviousArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
13	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry2();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry2();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry2();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
14	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
15	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
16	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset;  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
17	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	5	None	replace
18	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(0);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryName(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseArEntryName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
20	[BUG]  [BUGGY]  final  int  expectedLength  =  filemode.length();  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expectedLength  =  filemode.length();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  filemode.length();	      	non-compiled	[CE]  cannot  find  symbol  filemode	8	None	replace
21	[BUG]  [BUGGY]  final  int  expectedLength  =  length();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expectedLength  =  length();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  length();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
22	[BUG]  [BUGGY]  InputStream  input  =  getInput();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  InputStream  input  =  getInput();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInput();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
23	[BUG]  [BUGGY]  InputStream  input  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  InputStream  input  =  getInputStream();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	InputStream  input  =  getInputStream();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
24	[BUG]  [BUGGY]  File  filemode  =  getFilemode();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  File  filemode  =  getFilemode();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	File  filemode  =  getFilemode();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
25	[BUG]  [BUGGY]  final  int  expectedLength  =  read(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expectedLength  =  read(filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(filemode);	      	non-compiled	[CE]  cannot  find  symbol  filemode	8	None	replace
26	[BUG]  [BUGGY]  final  int  expectedLength  =  read(lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expectedLength  =  read(lastmodified);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  read(lastmodified);	      	non-compiled	[CE]  cannot  find  symbol  lastmodified	8	None	replace
27	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SECOND  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECOND.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SECOND	10	None	replace
28	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SECONDS  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SECONDS.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SECONDS	10	None	replace
29	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();  [CE]  cannot  find  symbol  HEADER_SEPARATOR  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER_SEPARATOR.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  HEADER_SEPARATOR	10	None	replace
30	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderSeparator();  [CE]  package  arArchiveEntry  does  not  exist  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	10	None	replace
31	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderSeparator(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
32	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSeparator();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  ';'  expected	10	None	replace
33	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNext();  [CE]  package  arArchiveEntry  does  not  exist  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getNext();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	9	None	replace
34	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER;  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  incompatible  types	9	None	replace
35	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNext(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
36	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPrevious();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getPrevious();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getPrevious();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
37	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getNext();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER,  offset.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getParent();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
39	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryRaw();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
40	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  1;  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  1;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
41	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset;  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength()  +  offset;	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
42	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryLength(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
43	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeader();  [CE]  package  arArchiveEntry  does  not  exist  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getHeader();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	4	None	replace
44	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
45	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedHeader();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedHeader();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getWrappedHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
46	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawHeader();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawHeader();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getRawHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
47	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeader(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
48	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
49	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes();  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	6	None	replace
50	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
51	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);  [CE]  cannot  find  symbol  Offset  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(Offset.UTF8);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  Offset	6	None	replace
52	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(2);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(2);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(2);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(0);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(0);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
55	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	1	None	replace
56	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  length);  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  length);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
57	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  read);  [CE]  cannot  find  symbol  read  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  read);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  read);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  read	1	None	replace
58	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
59	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  source);  [CE]  cannot  find  symbol  source  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  source);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  source);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  source	1	None	replace
60	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntry();  [CE]  package  arArchiveEntry  does  not  exist  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	3	None	replace
61	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(0);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(0);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry2();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry2();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry2();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  final  int  expectedLength  =  input.length();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expectedLength  =  input.length();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  input.length();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
64	[BUG]  [BUGGY]  final  int  expected.length  =  read(lastmodified);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expected.length  =  read(lastmodified);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(lastmodified);	      	non-compiled	[CE]  ';'  expected	8	None	replace
65	[BUG]  [BUGGY]  final  int  expectedLength  =  input.length;  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expectedLength  =  input.length;  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expectedLength  =  input.length;	      	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
66	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length);  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(length);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
67	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input);  [CE]  no  suitable  method  found  for  getBytes(long,InputStream)  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,InputStream)	2	None	replace
68	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  offset);  [CE]  cannot  find  symbol  width  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(width,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  width	1	None	replace
69	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(offset,  input);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
70	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(range);  [CE]  cannot  find  symbol  range  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(range);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(range);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol  range	1	None	replace
71	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getNext();  [CE]  cannot  find  symbol  header  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.header.getNext();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  header	9	None	replace
72	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNext();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNext();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNext();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	9	None	replace
73	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextParent();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextParent();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextParent();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
74	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	5	None	replace
75	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryName();  [CE]  cannot  find  symbol  header  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.header.getArEntryName();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryName();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol  header	5	None	replace
76	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryId();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryId();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryId();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
77	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntry();  [CE]  cannot  find  symbol  header  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.header.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  header	7	None	replace
78	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	7	None	replace
79	[BUG]  [BUGGY]  final  byte[]  expected  =  this.HEADER.getNextArEntry();  [CE]  cannot  find  symbol  HEADER  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.HEADER.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.HEADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol  HEADER	7	None	replace
80	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextAREntry();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextAREntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getNextAREntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
81	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getHeader();  [CE]  cannot  find  symbol  header  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.header.getHeader();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol  header	4	None	replace
82	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeader();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeader();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.asHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
83	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.fromName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
84	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntry();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	3	None	replace
85	[BUG]  [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.arArchiveEntry.HEADER.getArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	6	None	replace
86	[BUG]  [BUGGY]  final  byte[]  expected  =  this.header.getArEntryBytes();  [CE]  cannot  find  symbol  header  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.header.getArEntryBytes();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.header.getArEntryBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol  header	6	None	replace
87	[BUG]  [BUGGY]  final  byte[]  expected  =  this.headerSeparator.getHeaderSeparator();  [CE]  cannot  find  symbol  headerSeparator  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  this.headerSeparator.getHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  this.headerSeparator.getHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol  headerSeparator	10	None	replace
88	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  ArArchiveEntry.HEADER);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  ArArchiveEntry.HEADER);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset,  ArArchiveEntry.HEADER);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
89	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeaderSeparator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeaderSeparator();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.parseHeaderSeparator();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
90	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntrySize();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
91	[BUG]  [BUGGY]  final  int  expected.length  =  read(filemode);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expected.length  =  read(filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected.length  =  read(filemode);	      	non-compiled	[CE]  ';'  expected	8	None	replace
92	[BUG]  [BUGGY]  final  int  expected  =  read(filemode);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  int  expected  =  read(filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  int  expected  =  read(filemode);	      	non-compiled	[CE]  cannot  find  symbol  filemode	8	None	replace
93	[BUG]  [BUGGY]  int  expected.length  =  read(filemode);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  int  expected.length  =  read(filemode);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	int  expected.length  =  read(filemode);	      	non-compiled	[CE]  ';'  expected	8	None	replace
94	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
95	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName());  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.append(getName());	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
96	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getValue(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNext();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
97	[BUG]  [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset);  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  arArchiveEntry.HEADER.getArEntryBytes(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	6	None	replace
98	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryBytes(offset,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryBytes();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
99	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);  [CE]  no  suitable  method  found  for  getBytes(long,long)  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(offset,  offset  +  1);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(offset);    	non-compiled	[CE]  no  suitable  method  found  for  getBytes(long,long)	2	None	replace
100	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntry(input,  offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry(offset);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
101	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryByName(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryLength();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
102	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntryName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
103	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset);  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.decodeBase64Header(offset);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeaderSeparator();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
104	[BUG]  [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry();  [CE]  package  AarArchiveEntry  does  not  exist  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  AarArchiveEntry.HEADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  AarArchiveEntry  does  not  exist	7	None	replace
105	[BUG]  [BUGGY]  final  byte[]  expected  =  ARArchiveEntry.HEADER.getNextArEntry();  [CE]  package  ARArchiveEntry  does  not  exist  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ARArchiveEntry.HEADER.getNextArEntry();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ARArchiveEntry.HEADER.getNextArEntry();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getNextArEntry();    	non-compiled	[CE]  package  ARArchiveEntry  does  not  exist	7	None	replace
106	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryImpl();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryImpl();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getArEntryImpl();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
107	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderData();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderData();  [BUGGY]    final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaderData();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getHeader();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
