bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte  read  =  read(realized,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	20	None	replace
2	[BUG]  [BUGGY]  final  byte  read  =  read(unwrapped,  expected,  expected.length);  [CE]  cannot  find  symbol  unwrapped  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(unwrapped,  expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(unwrapped,  expected,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  unwrapped	20	None	replace
3	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  expected.length,  realized);  [CE]  no  suitable  method  found  for  read(byte[],int,byte[])  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  expected.length,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  expected.length,  realized);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,byte[])	20	None	replace
4	[BUG]  [BUGGY]  final  byte  read  =  read(offset,  expected,  expected.length);  [CE]  no  suitable  method  found  for  read(long,byte[],int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(offset,  expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(offset,  expected,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,byte[],int)	20	None	replace
5	[BUG]  [BUGGY]  final  byte  read  =  read(refigured,  expected.length);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(refigured,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(refigured,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	20	None	replace
6	[BUG]  [BUGGY]  final  byte  read  =  read(width,  expected,  expected.length);  [CE]  cannot  find  symbol  width  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(width,  expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(width,  expected,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  width	20	None	replace
7	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	25	None	replace
8	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  1,  realized.length,  expected.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int,int)	25	None	replace
9	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  expected.length  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	25	2	replace
10	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1,  realized.length);  [FE]  IndexOutOfBoundsException  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	25	2	replace
11	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset  +  1,  realized.length);  [CE]  cannot  find  symbol  refigured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	25	None	replace
12	[BUG]  [BUGGY]  final  int  read  =  readFully(realised);  [CE]  cannot  find  symbol  realised  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realised);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realised);	  final    int    read    =    readFully(needed);    	non-compiled	[CE]  cannot  find  symbol  realised	93	None	replace
13	[BUG]  [BUGGY]  final  int  read  =  readFully(metadata);  [CE]  cannot  find  symbol  metadata  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(metadata);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(metadata);	  final    int    read    =    readFully(needed);    	non-compiled	[CE]  cannot  find  symbol  metadata	93	None	replace
14	[BUG]  [BUGGY]  InputStream  input  =  realized.readInput();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  realized.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  realized.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
15	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput();  [CE]  cannot  find  symbol  pInput  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  pInput.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  pInput.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol  pInput	41	None	replace
16	[BUG]  [BUGGY]  InputStream  input  =  implemented.readInput();  [CE]  cannot  find  symbol  implemented  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  implemented.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  implemented.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol  implemented	41	None	replace
17	[BUG]  [BUGGY]  InputStream  input  =  realization.readInput();  [CE]  cannot  find  symbol  realization  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  realization.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  realization.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol  realization	41	None	replace
18	[BUG]  [BUGGY]  InputStream  input  =  platform.readInput();  [CE]  cannot  find  symbol  platform  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  platform.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  platform.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol  platform	41	None	replace
19	[BUG]  [BUGGY]  InputStream  input  =  shared.readInput();  [CE]  cannot  find  symbol  shared  [FE]                                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  shared.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  shared.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol  shared	41	None	replace
20	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	101	None	replace
21	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	101	None	replace
22	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	101	2	replace
23	[BUG]  [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	101	2	replace
24	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read!=  realized.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected);  if  (read!=  realized.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	101	2	replace
25	[BUG]  [BUGGY]  final  int  read  =  read(expected);  if  (read!=  realized.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read!=  realized.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected);  if  (read!=  realized.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	101	2	replace
26	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  realized.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	111	None	replace
27	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  expected.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	111	None	replace
28	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  imagined.length);  [CE]  cannot  find  symbol  imagined  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  imagined.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  imagined.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  imagined	111	None	replace
29	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  estimated.length);  [CE]  cannot  find  symbol  estimated  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  estimated.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  estimated.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  estimated	111	None	replace
30	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  realization.length);  [CE]  cannot  find  symbol  realization  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  realization.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  realization.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  realization	111	None	replace
31	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  realization);  [CE]  cannot  find  symbol  realization  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  realization);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  realization);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  realization	111	None	replace
32	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset  +  offset);  [CE]  cannot  find  symbol  refigured  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset  +  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset  +  offset);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  refigured	111	None	replace
33	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  offset  +  1,  realized.length);  [CE]  no  suitable  method  found  for  read(int,long,int)  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  offset  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  offset  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long,int)	96	None	replace
34	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length  +  1,  offset);	  final    int    read    =    read(realized,    offset    +    1,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	96	None	replace
35	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset  +  1,  expected.length);  [CE]  cannot  find  symbol  wrapped  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset  +  1,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset  +  1,  expected.length);	  final    int    read    =    read(realized,    offset    +    1,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  wrapped	96	None	replace
36	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  offset  +  1,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  offset  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  offset  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	96	None	replace
37	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset  +  1,  expected.length);  [CE]  cannot  find  symbol  actualized  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  offset  +  1,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset  +  1,  expected.length);	  final    int    read    =    read(realized,    offset    +    1,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actualized	96	None	replace
38	[BUG]  [BUGGY]  final  int  read  =  read(metadata,  expected);  [CE]  cannot  find  symbol  metadata  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(metadata,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(metadata,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  metadata	113	None	replace
39	[BUG]  [BUGGY]  final  int  read  =  read(actual,  expected);  [CE]  cannot  find  symbol  actual  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actual,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actual,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  actual	113	None	replace
40	[BUG]  [BUGGY]  final  int  read  =  read(remaining,  expected);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(remaining,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(remaining,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  remaining	113	None	replace
41	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  realized.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  realized.length);	  final    int    read    =    read(realized.length,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	5	None	replace
42	[BUG]  [BUGGY]  final  byte  read  =  read(expected.length,  realized.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected.length,  realized.length);	  final    int    read    =    read(realized.length,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	5	None	replace
43	[BUG]  [BUGGY]  int  read  =  realized.read();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  realized.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  realized.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
44	[BUG]  [BUGGY]  int  read  =  implemented.read();  [CE]  cannot  find  symbol  implemented  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  implemented.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  implemented.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol  implemented	39	None	replace
45	[BUG]  [BUGGY]  int  read  =  expected.read();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  expected.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  expected.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
46	[BUG]  [BUGGY]  int  read  =  offset.read();  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  offset.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  offset.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  long  cannot  be  dereferenced	39	None	replace
47	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  saved);  [CE]  cannot  find  symbol  saved  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  saved);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  cannot  find  symbol  saved	53	None	replace
48	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],byte[],int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  expected.length);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],int)	53	None	replace
49	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  lastmodified);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  lastmodified);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	53	None	replace
50	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  leftmodified);  [CE]  cannot  find  symbol  leftmodified  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  leftmodified);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  leftmodified);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  cannot  find  symbol  leftmodified	53	None	replace
51	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  firstmodified);  [CE]  cannot  find  symbol  firstmodified  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  firstmodified);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  firstmodified);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  cannot  find  symbol  firstmodified	53	None	replace
52	[BUG]  [BUGGY]  InputStream  input  =  this.input.readInput(realized);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.input.readInput(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.input.readInput(realized);	  InputStream    input    =    this.input.readInput();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
53	[BUG]  [BUGGY]  InputStream  input  =  dataArea.readInput();  [CE]  cannot  find  symbol  dataArea  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  dataArea.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  dataArea.readInput();	  InputStream    input    =    this.input.readInput();    	non-compiled	[CE]  cannot  find  symbol  dataArea	105	None	replace
54	[BUG]  [BUGGY]  InputStream  input  =  sourceFile.readInput();  [CE]  cannot  find  symbol  sourceFile  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  sourceFile.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  sourceFile.readInput();	  InputStream    input    =    this.input.readInput();    	non-compiled	[CE]  cannot  find  symbol  sourceFile	105	None	replace
55	[BUG]  [BUGGY]  InputStream  input  =  in.readInput();  [CE]  cannot  find  symbol  in  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  in.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  in.readInput();	  InputStream    input    =    this.input.readInput();    	non-compiled	[CE]  cannot  find  symbol  in	105	None	replace
56	[BUG]  [BUGGY]  final  int  read  =  read(redetect,  expected.length);  [CE]  cannot  find  symbol  redetect  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(redetect,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(redetect,  expected.length);	  final    int    read    =    read(refigured,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  redetect	52	None	replace
57	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  realized.length);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  realized.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
58	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  expected.length);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  expected.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
59	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected.length,  realized.length);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected.length,  realized.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
60	[BUG]  [BUGGY]  final  int  read  =  readBytes(offset,  expected.length);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(offset,  expected.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
61	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  shared.length);  [CE]  cannot  find  symbol  shared  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  shared.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  shared.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  shared	67	None	replace
62	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  actual.length);  [CE]  cannot  find  symbol  actual  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  actual.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  actual.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actual	67	None	replace
63	[BUG]  [BUGGY]  final  int  read  =  realized.read();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.read();	  final    int    read    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  input.read(realized);	  final    int    read    =    input.read();    	compilable	  [FE]  AssertionFailedError  	43	1	replace
65	[BUG]  [BUGGY]  final  int  read  =  input.read(realized);  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  input.read(realized);	  final    int    read    =    input.read();    	compilable	  [FE]  AssertionFailedError  	43	1	replace
66	[BUG]  [BUGGY]  final  int  read  =  expected.read();  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  expected.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  expected.read();	  final    int    read    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
67	[BUG]  [BUGGY]  final  int  read  =  implemented.read();  [CE]  cannot  find  symbol  implemented  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  implemented.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  implemented.read();	  final    int    read    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  implemented	43	None	replace
68	[BUG]  [BUGGY]  final  int  read  =  pInput.read();  [CE]  cannot  find  symbol  pInput  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  pInput.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  pInput.read();	  final    int    read    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  pInput	43	None	replace
69	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	31	None	replace
70	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(int,long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long,int)	31	None	replace
71	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	31	None	replace
72	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset,  expected.length);  [CE]  cannot  find  symbol  wrapped  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset,  expected.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  wrapped	31	None	replace
73	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  actual.length);  [CE]  cannot  find  symbol  actual  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  actual.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  actual.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actual	31	None	replace
74	[BUG]  [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
75	[BUG]  [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
76	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
77	[BUG]  [BUGGY]  int  read  =  input.read(realized);  Int  read  =  input.read(realized);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  Int  read  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    Int  read  =  input.read(realized);	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
78	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized));	  	non-compiled	[CE]  ';'  expected	107	None	add
79	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(refigured);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(refigured);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(refigured);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
80	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(authorized);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(authorized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(authorized);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
81	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  output.read(realized);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  output.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  output.read(realized);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
82	[BUG]  [BUGGY]  int  read  =  input.read(realized);  byte  read  =  input.read(realized);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  byte  read  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    byte  read  =  input.read(realized);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
83	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  2,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  2,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	112	None	replace
84	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  1,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	112	None	replace
85	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length  +  2,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  expected.length  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	112	2	replace
86	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length  +  2,  realized.length  +  1);  [FE]  IndexOutOfBoundsException  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length  +  2,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	112	2	replace
87	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  offset  +  2,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(int,long,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  offset  +  2,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  offset  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long,int)	112	None	replace
88	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset  +  2,  realized.length  +  1);  [CE]  cannot  find  symbol  refigured  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset  +  2,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  refigured	112	None	replace
89	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	112	None	replace
90	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  2,  realized.length,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  2,  realized.length,  expected.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  2,  realized.length,  expected.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int,int)	112	None	replace
91	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  expected,  offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  expected,  offset);	  final    int    read    =    readFully(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
92	[BUG]  [BUGGY]  final  int  read  =  readFully(refigured,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(refigured,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(refigured,  expected);	  final    int    read    =    readFully(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	49	None	replace
93	[BUG]  [BUGGY]  final  int  read  =  readFully(actual,  expected);  [CE]  cannot  find  symbol  actual  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(actual,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(actual,  expected);	  final    int    read    =    readFully(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  actual	49	None	replace
94	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected,  expected.length,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
95	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized.length);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
96	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected,  realized.length,  expected.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
97	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  expected.length);  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  expected.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
98	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected,  realized.length,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
99	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  realized.length);  [FE]  IndexOutOfBoundsException  [FE]        IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
100	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  expected.length,  realized.length  -  1);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
101	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length  -  1);  [FE]  IndexOutOfBoundsException  [FE]          IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length,  realized.length  -  1);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
102	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  saved.length);  [CE]  cannot  find  symbol  saved  [FE]            IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  saved.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  saved.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  saved	123	None	replace
103	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]              IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected,  expected.length,  realized.length  -  1);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
104	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized.length  -  1);  [FE]  IndexOutOfBoundsException  [FE]              IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length,  realized.length  -  1);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
105	[BUG]  [BUGGY]  final  int  read  =  readFilemode(expected,  realized);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(expected,  realized);	  final    int    read    =    readFilemode(expected);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
106	[BUG]  [BUGGY]  final  int  read  =  readFilemode(width,  expected);  [CE]  cannot  find  symbol  width  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(width,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(width,  expected);	  final    int    read    =    readFilemode(expected);    	non-compiled	[CE]  cannot  find  symbol  width	72	None	replace
107	[BUG]  [BUGGY]  final  int  read  =  readFilemode(metadata);  [CE]  cannot  find  symbol  metadata  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(metadata);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(metadata);	  final    int    read    =    readFilemode(expected);    	non-compiled	[CE]  cannot  find  symbol  metadata	72	None	replace
108	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  offset,  realized.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  offset,  realized.length);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
109	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  realized.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  realized.length);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
110	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  expected.length);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  expected.length);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
111	[BUG]  [BUGGY]  final  int  read  =  readFilemode(refigured,  offset);  [CE]  cannot  find  symbol  refigured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(refigured,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(refigured,  offset);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	68	None	replace
112	[BUG]  [BUGGY]  final  int  read  =  readFilemode(offset,  realized);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(offset,  realized);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
113	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  offset,  expected.length);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  offset,  expected.length);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
114	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  offset  +  1);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
115	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  size);  [CE]  cannot  find  symbol  size  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  size);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  size);	  final    int    read    =    read(expected,    realized,    length);    	non-compiled	[CE]  cannot  find  symbol  size	89	None	replace
116	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  value);  [CE]  cannot  find  symbol  value  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  value);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  value);	  final    int    read    =    read(expected,    realized,    length);    	non-compiled	[CE]  cannot  find  symbol  value	89	None	replace
117	[BUG]  [BUGGY]  Integer  read  =  input.read();  [CE]  incompatible  types  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  Integer  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	Integer  read  =  input.read();	  int    read    =    input.read();    	non-compiled	[CE]  incompatible  types	38	None	replace
118	[BUG]  [BUGGY]  Integer  read  =  input.readInt();  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  Integer  read  =  input.readInt();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	Integer  read  =  input.readInt();	  int    read    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
119	[BUG]  [BUGGY]  byte  read  =  input.read();  [CE]  possible  loss  of  precision  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  byte  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	byte  read  =  input.read();	  int    read    =    input.read();    	non-compiled	[CE]  possible  loss  of  precision	38	None	replace
120	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode);	  final    int    read    =    read(realized,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	17	None	replace
121	[BUG]  [BUGGY]  InputStream  input  =  this.getInput();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.getInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.getInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
122	[BUG]  [BUGGY]  InputStream  input  =  getRealizedInput();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getRealizedInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getRealizedInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
123	[BUG]  [BUGGY]  InputStream  input  =  getInput(),  realized);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput(),  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput(),  realized);	  InputStream    input    =    getInput();    	non-compiled	[CE]  ';'  expected	40	None	replace
124	[BUG]  [BUGGY]  InputStream  input  =  getOutputStream();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getOutputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getOutputStream();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
125	[BUG]  [BUGGY]  InputStream  input  =  getInput(),  realized.length;  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput(),  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput(),  realized.length;	  InputStream    input    =    getInput();    	non-compiled	[CE]  ';'  expected	40	None	replace
126	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  offset.length);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  offset.length);	  final    int    read    =    readFilemode(realized.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	69	None	replace
127	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized.length,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized.length,  offset);	  final    int    read    =    readFilemode(realized.length);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
128	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  offset  +  length);  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  offset  +  length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  offset  +  length);	  final    int    read    =    readFilemode(realized.length);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
129	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized.length,  realized.length);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized.length,  realized.length);	  final    int    read    =    readFilemode(realized.length);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
130	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized.length,  expected.length);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized.length,  expected.length);	  final    int    read    =    readFilemode(realized.length);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
131	[BUG]  [BUGGY]  final  byte  read  =  read(expected.length,  realized);  [CE]  no  suitable  method  found  for  read(int,byte[])  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected.length,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected.length,  realized);	  final    byte    read    =    read(expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,byte[])	51	None	replace
132	[BUG]  [BUGGY]  final  byte  read  =  read(width,  expected.length);  [CE]  cannot  find  symbol  width  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(width,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(width,  expected.length);	  final    byte    read    =    read(expected.length);    	non-compiled	[CE]  cannot  find  symbol  width	51	None	replace
133	[BUG]  [BUGGY]  final  byte  read  =  read(refigured.length);  [CE]  cannot  find  symbol  refigured  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(refigured.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(refigured.length);	  final    byte    read    =    read(expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	51	None	replace
134	[BUG]  [BUGGY]  int  read  =  realized.read(input);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  realized.read(input);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  realized.read(input);	  int    read    =    input.read(realized);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
135	[BUG]  [BUGGY]  int  read  =  input.read(realized,  offset);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(realized,  offset);	  int    read    =    input.read(realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	108	None	replace
136	[BUG]  [BUGGY]  int  read  =  implemented.read(realized);  [CE]  cannot  find  symbol  implemented  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  implemented.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  implemented.read(realized);	  int    read    =    input.read(realized);    	non-compiled	[CE]  cannot  find  symbol  implemented	108	None	replace
137	[BUG]  [BUGGY]  int  read  =  input.read(realized,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(realized,  expected.length);	  int    read    =    input.read(realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	108	None	replace
138	[BUG]  [BUGGY]  final  int  read  =  read(expected,  adjusted);  [CE]  cannot  find  symbol  adjusted  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  adjusted);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  adjusted);	  final    int    read    =    read(expected);    final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  cannot  find  symbol  adjusted	12	None	replace
139	[BUG]  [BUGGY]  final  int  read  =  read(offset,  expected);  [CE]  no  suitable  method  found  for  read(long,byte[])  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  expected);	  final    int    read    =    read(expected);    final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,byte[])	12	None	replace
140	[BUG]  [BUGGY]  final  int  read  =  read(expected,  saved);  [CE]  cannot  find  symbol  saved  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  saved);	  final    int    read    =    read(expected);    final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  cannot  find  symbol  saved	12	None	replace
141	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected.length);	  final    int    read    =    readBytes(offset);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
142	[BUG]  [BUGGY]  final  int  read  =  readBytes(metadata,  offset);  [CE]  cannot  find  symbol  metadata  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(metadata,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(metadata,  offset);	  final    int    read    =    readBytes(offset);    	non-compiled	[CE]  cannot  find  symbol  metadata	124	None	replace
143	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  read  =  input.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
144	[BUG]  [BUGGY]  final  int  read  =  input.read();  int  read  =  input.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  int  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    int  read  =  input.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
145	[BUG]  [BUGGY]  final  int  read  =  input.read();  Final  int  read  =  input.read();  [CE]  not  a  statement  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  Final  int  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    Final  int  read  =  input.read();	  	non-compiled	[CE]  not  a  statement	42	None	add
146	[BUG]  [BUGGY]  final  int  read  =  input.read();  InputStream  input  =  input.read();  [CE]  incompatible  types  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  InputStream  input  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    InputStream  input  =  input.read();	  	non-compiled	[CE]  incompatible  types	42	None	add
147	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  input  =  input.read();  [CE]  int  cannot  be  dereferenced  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  input  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  input  =  input.read();	  	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	add
148	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  read  =  output.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  read  =  output.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  read  =  output.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
149	[BUG]  [BUGGY]  final  int  read  =  input.read();  lastmodified  =  input.read();  [CE]  cannot  find  symbol  lastmodified  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  lastmodified  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    lastmodified  =  input.read();	  	non-compiled	[CE]  cannot  find  symbol  lastmodified	42	None	add
150	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length));  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length));	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
151	[BUG]  [BUGGY]  final  int  read  =  read(expected.length));  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length));	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
152	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized));  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized));	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
153	[BUG]  [BUGGY]  final  int  read  =  read(expected));  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected));	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
154	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  offset  +  1);  [CE]  no  suitable  method  found  for  read(int,long)  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  offset  +  1);	  final    int    read    =    read(actualized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long)	95	None	replace
155	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  offset  +  1);  [CE]  no  suitable  method  found  for  read(int,long)  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized.length,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  offset  +  1);	  final    int    read    =    read(actualized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long)	95	None	replace
156	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	102	None	replace
157	[BUG]  [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  bad  operand  types  for  binary  operator  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	102	None	replace
158	[BUG]  [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  bad  operand  types  for  binary  operator  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	102	None	replace
159	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if  (read!=  expected)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if  (read!=  expected)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if  (read!=  expected)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	102	None	replace
160	[BUG]  [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
161	[BUG]  [BUGGY]  final  int  read  =  read(expected.length);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(int)  [FE]                        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	102	None	replace
162	[BUG]  [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
163	[BUG]  [BUGGY]  final  int  read  =  readFilemode(offset,  realized.length);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(offset,  realized.length);	  final    int    read    =    readFilemode(offset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
164	[BUG]  [BUGGY]  final  int  read  =  readFilemode(expected.length);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(expected.length);	  final    int    read    =    readFilemode(offset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
165	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  realized);  [CE]  cannot  find  symbol  refigured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  realized);	  final    int    read    =    read(realized,    offset,    saved);    	non-compiled	[CE]  cannot  find  symbol  refigured	118	None	replace
166	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  saved);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  saved);	  final    int    read    =    read(realized,    offset,    saved);    	non-compiled	[CE]  cannot  find  symbol  refigured	118	None	replace
167	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  input.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
168	[BUG]  [BUGGY]  int  read  =  input.read();  Int  read  =  input.read();  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  Int  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    Int  read  =  input.read();	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
169	[BUG]  [BUGGY]  int  read  =  input.read();  byte  read  =  input.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  byte  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    byte  read  =  input.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
170	[BUG]  [BUGGY]  int  read  =  input.read();  int  input  =  input.read();  [CE]  int  cannot  be  dereferenced  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  input  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  input  =  input.read();	  	non-compiled	[CE]  int  cannot  be  dereferenced	37	None	add
171	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  output.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  output.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  output.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
172	[BUG]  [BUGGY]  int  read  =  input.read();  long  read  =  input.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  long  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    long  read  =  input.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
173	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  realized.length;	  final    int    read    =    read();    	compilable	  [FE]  IOException  	59	2	replace
174	[BUG]  [BUGGY]  final  int  read  =  realized.length;  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length;	  final    int    read    =    read();    	compilable	  [FE]  IOException  	59	2	replace
175	[BUG]  [BUGGY]  final  byte  read  =  read();  [CE]  possible  loss  of  precision  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read();	  final    int    read    =    read();    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
176	[BUG]  [BUGGY]  final  int  read  =  realized.length();  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length();	  final    int    read    =    read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
177	[BUG]  [BUGGY]  final  int  read  =  implemented();  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  implemented();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  implemented();	  final    int    read    =    read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
178	[BUG]  [BUGGY]  final  int  read  =  read(offset);  [CE]  no  suitable  method  found  for  read(long)  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset);	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	7	None	replace
179	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  saved);  [CE]  cannot  find  symbol  saved  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset,  saved);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  saved	32	None	replace
180	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset,  expected.length);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long,int)	32	None	replace
181	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset,  realized.length);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long,int)	32	None	replace
182	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  filemode,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  filemode,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  filemode,  offset);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	32	None	replace
183	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  managed);  [CE]  cannot  find  symbol  managed  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset,  managed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset,  managed);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  managed	32	None	replace
184	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	int  read  =  read(expected);	  final    int    read    =    read(expected);    int    read    =    read(expected);    	compilable	  [FE]  IOException  	9	2	replace
185	[BUG]  [BUGGY]  int  read  =  read(expected);  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  read(expected);	  final    int    read    =    read(expected);    int    read    =    read(expected);    	compilable	  [FE]  IOException  	9	2	replace
186	[BUG]  [BUGGY]  int  read  =  read(expected,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  read(expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  read(expected,  realized);	  final    int    read    =    read(expected);    int    read    =    read(expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	9	None	replace
187	[BUG]  [BUGGY]  final  int  read  =  readFilemode(actualized);  [CE]  cannot  find  symbol  actualized  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(actualized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(actualized);	  final    int    read    =    readFilemode(needed);    	non-compiled	[CE]  cannot  find  symbol  actualized	77	None	replace
188	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	10	None	replace
189	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	10	None	replace
190	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  realized.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  realized.length);	  final    int    read    =    read(realized.length,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	110	None	replace
191	[BUG]  [BUGGY]  final  byte  read  =  read(realized.length,  realized.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized.length,  realized.length);	  final    int    read    =    read(realized.length,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	110	None	replace
192	[BUG]  [BUGGY]  final  int  read  =  readAndClose(realized);  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readAndClose(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(realized);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
193	[BUG]  [BUGGY]  final  int  read  =  readAndClose(realized,  expected);  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readAndClose(realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(realized,  expected);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
194	[BUG]  [BUGGY]  final  int  read  =  readAndClose(refigured);  [CE]  cannot  find  symbol  refigured  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readAndClose(refigured);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(refigured);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	61	None	replace
195	[BUG]  [BUGGY]  final  int  read  =  realized.readAndClose(expected);  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.readAndClose(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.readAndClose(expected);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
196	[BUG]  [BUGGY]  final  byte  read  =  readAndClose(expected);  [CE]  cannot  find  symbol  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  readAndClose(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  readAndClose(expected);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
197	[BUG]  [BUGGY]  final  int  expected  =  read(expected);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  expected  =  read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  expected  =  read(expected);	  final    int    read    =    read(expected);    final    int    expected    =    read(expected);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	75	None	replace
198	[BUG]  [BUGGY]  final  int  expected  =  read(offset);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  expected  =  read(offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  expected  =  read(offset);	  final    int    read    =    read(expected);    final    int    expected    =    read(expected);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	75	None	replace
199	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  offset);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	4	None	replace
200	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  offset  +  1);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	4	None	replace
201	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected,  realized.length);  [CE]  cannot  find  symbol  width  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  expected,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected,  realized.length);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  width	4	None	replace
202	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  filemode);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  filemode	4	None	replace
203	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  realized,  offset);  [CE]  no  suitable  method  found  for  read(int,byte[],long)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  realized,  offset);	  final    int    read    =    read(width,    realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,byte[],long)	34	None	replace
204	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  offset);  [CE]  cannot  find  symbol  refigured  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  offset);	  final    int    read    =    read(width,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	34	None	replace
205	[BUG]  [BUGGY]  final  int  read  =  read(offset,  realized,  offset);  [CE]  no  suitable  method  found  for  read(long,byte[],long)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  realized,  offset);	  final    int    read    =    read(width,    realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,byte[],long)	34	None	replace
206	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	24	None	replace
207	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  realized  +  1);  [CE]  cannot  find  symbol  refigured  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  refigured	24	None	replace
208	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized  +  1,  expected.length);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized  +  1,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized  +  1,  expected.length);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	24	None	replace
209	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset,  realized  +  1);  [CE]  cannot  find  symbol  actualized  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  offset,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  actualized	24	None	replace
210	[BUG]  [BUGGY]  final  int  read  =  read(configured,  offset,  realized  +  1);  [CE]  cannot  find  symbol  configured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(configured,  offset,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(configured,  offset,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  configured	24	None	replace
211	[BUG]  [BUGGY]  final  int  read  =  realized.readBytes(expected);  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.readBytes(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.readBytes(expected);	  final    int    read    =    readBytes(expected);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
212	[BUG]  [BUGGY]  final  byte  read  =  readBytes(expected);  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  readBytes(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  readBytes(expected);	  final    int    read    =    readBytes(expected);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
213	[BUG]  [BUGGY]  final  int  read  =  readBytes(metadata);  [CE]  cannot  find  symbol  metadata  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(metadata);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(metadata);	  final    int    read    =    readBytes(expected);    	non-compiled	[CE]  cannot  find  symbol  metadata	57	None	replace
214	[BUG]  [BUGGY]  final  int  read  =  read(offset,  expected,  realized);  [CE]  no  suitable  method  found  for  read(long,byte[],byte[])  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  expected,  realized);	  final    int    read    =    read(realized,    expected,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,byte[],byte[])	15	None	replace
215	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected,  realized);	  final    int    read    =    read(realized,    expected,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])	15	None	replace
216	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  expected,  offset);  [CE]  cannot  find  symbol  actualized  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  expected,  offset);	  final    int    read    =    read(realized,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  actualized	15	None	replace
217	[BUG]  [BUGGY]  final  int  read  =  read(expected,  actual,  offset);  [CE]  cannot  find  symbol  actual  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  actual,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  actual,  offset);	  final    int    read    =    read(realized,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  actual	15	None	replace
218	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	117	None	replace
219	[BUG]  [BUGGY]  final  int  read  =  read(redetect,  offset,  expected.length);  [CE]  cannot  find  symbol  redetect  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(redetect,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(redetect,  offset,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  redetect	117	None	replace
220	[BUG]  [BUGGY]  final  int  read  =  read(figured,  offset,  expected.length);  [CE]  cannot  find  symbol  figured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(figured,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(figured,  offset,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  figured	117	None	replace
221	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset.length);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset.length);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	48	None	replace
222	[BUG]  [BUGGY]  final  int  read  =  readFully(realized.length,  expected.length);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized.length,  expected.length);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
223	[BUG]  [BUGGY]  final  int  read  =  readFully(realized.length,  offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized.length,  offset);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
224	[BUG]  [BUGGY]  final  int  read  =  readFully(realized.length,  realized.length);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized.length,  realized.length);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
225	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  realized.length);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  realized.length);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
226	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	30	None	replace
227	[BUG]  [BUGGY]  final  int  read  =  read(decorated,  offset,  realized);  [CE]  cannot  find  symbol  decorated  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(decorated,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(decorated,  offset,  realized);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  decorated	30	None	replace
228	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  offset,  realized);  [CE]  no  suitable  method  found  for  read(int,long,byte[])  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  offset,  realized);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long,byte[])	30	None	replace
229	[BUG]  [BUGGY]  final  int  read  =  read(configured,  offset);  [CE]  cannot  find  symbol  configured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(configured,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(configured,  offset);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  configured	30	None	replace
230	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset);  [CE]  cannot  find  symbol  actualized  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  actualized	30	None	replace
231	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected,  expected);  [CE]  cannot  find  symbol  width  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected,  expected);	  final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  cannot  find  symbol  width	16	None	replace
232	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  expected);  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  expected);	  final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	16	None	replace
233	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  expected,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  expected,  offset);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
234	[BUG]  [BUGGY]  final  int  read  =  readBytes(offset,  realized);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(offset,  realized);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
235	[BUG]  [BUGGY]  final  int  read  =  readBytes(offset,  expected);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(offset,  expected);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
236	[BUG]  [BUGGY]  final  int  read  =  readBytes(refigured,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(refigured,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(refigured,  expected);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	66	None	replace
237	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length  +  1);	  final    int    read    =    read(expected,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	23	None	replace
238	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized  +  1);	  final    int    read    =    read(expected,    offset    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	23	None	replace
239	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset  +  1);	  final    int    read    =    read(expected,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long)	23	None	replace
240	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length  +  1);	  final    int    read    =    read(expected,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	23	None	replace
241	[BUG]  [BUGGY]  final  int  read  =  read(expected,  corrected  +  1);  [CE]  cannot  find  symbol  corrected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  corrected  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  corrected  +  1);	  final    int    read    =    read(expected,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  corrected	23	None	replace
242	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(realized,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(realized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(realized,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
243	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(expected,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(expected,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(expected,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
244	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(actualized,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(actualized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(actualized,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
245	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(authorized,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(authorized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(authorized,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
246	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(alized,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(alized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(alized,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
247	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(allowed,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(allowed,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(allowed,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
248	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  int  read  =  read(realized,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  int  read  =  read(realized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    int  read  =  read(realized,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
249	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(normalized,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                  IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(normalized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(normalized,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
250	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  realized,  offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  realized,  offset);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
251	[BUG]  [BUGGY]  final  int  read  =  readBytes(width,  expected,  realized);  [CE]  cannot  find  symbol  width  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(width,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(width,  expected,  realized);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  width	65	None	replace
252	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  realized,  filemode);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	65	None	replace
253	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset,  realized.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset,  realized.length);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
254	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset,  expected.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset,  expected.length);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
255	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  realized.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  realized.length);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
256	[BUG]  [BUGGY]  final  int  read  =  readBytes(refigured,  offset);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(refigured,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(refigured,  offset);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	62	None	replace
257	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  offset);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
258	[BUG]  [BUGGY]  final  int  read  =  readBytes(actualized);  [CE]  cannot  find  symbol  actualized  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(actualized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(actualized);	  final    int    read    =    readBytes(needed);    	non-compiled	[CE]  cannot  find  symbol  actualized	94	None	replace
259	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  realized,  offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  realized,  offset);	  final    int    read    =    readFully(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
260	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  realized.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  realized.length);	  final    int    read    =    readFully(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
261	[BUG]  [BUGGY]  final  int  read  =  readFully(offset,  expected,  realized);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(offset,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(offset,  expected,  realized);	  final    int    read    =    readFully(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
262	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  realized,  filemode);	  final    int    read    =    readFully(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	92	None	replace
263	[BUG]  [BUGGY]  final  int  read  =  read(redetect,  expected);  [CE]  cannot  find  symbol  redetect  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(redetect,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(redetect,  expected);	  final    int    read    =    read(refigured,    expected);    	non-compiled	[CE]  cannot  find  symbol  redetect	54	None	replace
264	[BUG]  [BUGGY]  final  int  read  =  read(detecte,  expected);  [CE]  cannot  find  symbol  detecte  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(detecte,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(detecte,  expected);	  final    int    read    =    read(refigured,    expected);    	non-compiled	[CE]  cannot  find  symbol  detecte	54	None	replace
265	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized.length,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized.length,  offset);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	19	None	replace
266	[BUG]  [BUGGY]  final  byte  read  =  read(width,  expected,  realized.length);  [CE]  cannot  find  symbol  width  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(width,  expected,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(width,  expected,  realized.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  width	19	None	replace
267	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized.length,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  realized.length,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized.length,  offset  +  1);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	19	None	replace
268	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized.length,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  realized.length,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized.length,  filemode);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  filemode	19	None	replace
269	[BUG]  [BUGGY]  final  byte  read  =  read(configured,  expected.length);  [CE]  cannot  find  symbol  configured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(configured,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(configured,  expected.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  configured	19	None	replace
270	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length  +  1,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length  +  1,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized.length  +  1,  expected.length);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int,int)	26	None	replace
271	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length,  expected.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized.length,  expected.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int,int)	26	None	replace
272	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  realized.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	26	None	replace
273	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  expected.length,  realized.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	26	2	replace
274	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length  +  1);  [FE]  IndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length,  realized.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	compilable	  [FE]  IndexOutOfBoundsException  	26	2	replace
275	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  realized.length  +  1);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  realized.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  refigured	26	None	replace
276	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  expected.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  expected.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	26	None	replace
277	[BUG]  [BUGGY]  final  int  read  =  read(input,  realized,  offset);  [CE]  no  suitable  method  found  for  read(InputStream,byte[],long)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(input,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(input,  realized,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream,byte[],long)	116	None	replace
278	[BUG]  [BUGGY]  final  int  read  =  read(pInput,  realized,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(pInput,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(pInput,  realized,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	116	None	replace
279	[BUG]  [BUGGY]  final  int  read  =  read(pInput,  input,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(pInput,  input,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(pInput,  input,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	116	None	replace
280	[BUG]  [BUGGY]  final  int  read  =  read(offset,  input,  realized);  [CE]  no  suitable  method  found  for  read(long,InputStream,byte[])  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  input,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  input,  realized);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,InputStream,byte[])	116	None	replace
281	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  realized);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])	14	None	replace
282	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  realized);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])	14	None	replace
283	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  saved);  [CE]  cannot  find  symbol  saved  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  saved);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  saved	14	None	replace
284	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected,  realized);  [CE]  cannot  find  symbol  refigured  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected,  realized);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	14	None	replace
285	[BUG]  [BUGGY]  final  int  read  =  read(width,  realized,  expected);  [CE]  cannot  find  symbol  width  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  realized,  expected);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  width	14	None	replace
286	[BUG]  [BUGGY]  final  byte  read  =  read(0);  [CE]  no  suitable  method  found  for  read(int)  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(0);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(0);	  final    int    read    =    read(0);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	87	None	replace
287	[BUG]  [BUGGY]  final  int  read  =  realized.length(1);  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length(1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length(1);	  final    int    read    =    read(0);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
288	[BUG]  [BUGGY]  final  int  read  =  realized.length(0);  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length(0);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length(0);	  final    int    read    =    read(0);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
289	[BUG]  [BUGGY]  final  byte  read  =  read(1);  [CE]  no  suitable  method  found  for  read(int)  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(1);	  final    int    read    =    read(0);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	87	None	replace
290	[BUG]  [BUGGY]  final  int  read  =  realized.length(read);  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length(read);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length(read);	  final    int    read    =    read(0);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
291	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized);  [CE]  no  suitable  method  found  for  read(byte[],int,byte[])  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length,  realized);	  final    int    read    =    read(realized,    expected.length,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,byte[])	35	None	replace
292	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length,  offset);	  final    int    read    =    read(realized,    expected.length,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	35	None	replace
293	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length,  implemented);  [CE]  cannot  find  symbol  implemented  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  implemented);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length,  implemented);	  final    int    read    =    read(realized,    expected.length,    offset);    	non-compiled	[CE]  cannot  find  symbol  implemented	35	None	replace
294	[BUG]  [BUGGY]  final  int  read  =  read(redetect,  expected,  offset);  [CE]  cannot  find  symbol  redetect  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(redetect,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(redetect,  expected,  offset);	  final    int    read    =    read(refigured,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  redetect	121	None	replace
295	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  expected,  offset);  [CE]  cannot  find  symbol  wrapped  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  expected,  offset);	  final    int    read    =    read(refigured,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  wrapped	121	None	replace
296	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  expected);	  final    int    read    =    read(refigured,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	121	None	replace
297	[BUG]  [BUGGY]  final  int  read  =  read(figured,  expected,  offset);  [CE]  cannot  find  symbol  figured  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(figured,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(figured,  expected,  offset);	  final    int    read    =    read(refigured,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  figured	121	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
299	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
300	[BUG]  [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
301	[BUG]  [BUGGY]  if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
302	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
304	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
305	[BUG]  [BUGGY]  if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
306	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
307	[BUG]  [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
308	[BUG]  [BUGGY]  final  int  read  =  read(unwrapped,  expected,  expected.length);  [CE]  cannot  find  symbol  unwrapped  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(unwrapped,  expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(unwrapped,  expected,  expected.length);	  final    int    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  unwrapped	18	None	replace
309	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  expected.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  expected.length);	  final    int    read    =    read(expected,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	18	None	replace
310	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset,  expected.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset,  expected.length);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
311	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset,  realized.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset,  realized.length);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
312	[BUG]  [BUGGY]  final  int  read  =  readFully(refigured,  offset);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(refigured,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(refigured,  offset);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	45	None	replace
313	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  adjusted);  [CE]  cannot  find  symbol  adjusted  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  adjusted);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  adjusted);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  adjusted	45	None	replace
314	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  filemode);	  final    int    read    =    read(filemode,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	56	None	replace
315	[BUG]  [BUGGY]  final  int  read  =  read(groupid,  expected,  realized);  [CE]  cannot  find  symbol  groupid  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(groupid,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(groupid,  expected,  realized);	  final    int    read    =    read(filemode,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  groupid	56	None	replace
316	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected,  filemode);  [CE]  cannot  find  symbol  refigured  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  expected,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected,  filemode);	  final    int    read    =    read(filemode,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	56	None	replace
317	[BUG]  [BUGGY]  final  int  read  =  read(actual,  expected,  realized);  [CE]  cannot  find  symbol  actual  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actual,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actual,  expected,  realized);	  final    int    read    =    read(filemode,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  actual	56	None	replace
318	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
320	[BUG]  [BUGGY]  if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
321	[BUG]  [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
322	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
323	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
324	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  expected);  [CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  expected);	  final    int    read    =    read(width,    expected,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])	55	None	replace
325	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected,  expected);	  final    int    read    =    read(width,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	55	None	replace
326	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  expected);  [CE]  no  suitable  method  found  for  read(int,byte[])  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized.length,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  expected);	  final    int    read    =    read(expected.length,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,byte[])	21	None	replace
327	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  realized,  filemode);	  final    int    read    =    read(expected.length,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	21	None	replace
328	[BUG]  [BUGGY]  final  int  read  =  read(actual,  expected.length);  [CE]  cannot  find  symbol  actual  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actual,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actual,  expected.length);	  final    int    read    =    read(expected,    actual.length);    	non-compiled	[CE]  cannot  find  symbol  actual	22	None	replace
329	[BUG]  [BUGGY]  final  int  read  =  read(offset,  expected.length);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  expected.length);	  final    int    read    =    read(expected,    actual.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	22	None	replace
330	[BUG]  [BUGGY]  final  int  read  =  read(needed,  expected.length);  [CE]  cannot  find  symbol  needed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  expected.length);	  final    int    read    =    read(expected,    actual.length);    	non-compiled	[CE]  cannot  find  symbol  needed	22	None	replace
331	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  realized.length  +  1);	  final    int    read    =    read(realized,    expected.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	27	None	replace
332	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  expected.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  expected.length  +  1);	  final    int    read    =    read(realized,    expected.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	27	None	replace
333	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  expected.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  expected.length  +  1);	  final    int    read    =    read(realized,    expected.length    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	27	None	replace
334	[BUG]  [BUGGY]  final  byte  read  =  read(realized.length,  expected.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized.length,  expected.length);	  final    byte    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	3	None	replace
335	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  expected);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[],byte[])  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized,  expected);	  final    int    read    =    read(realized,    offset,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[],byte[])	119	None	replace
336	[BUG]  [BUGGY]  final  int  read  =  read(offset,  realized,  expected);  [CE]  no  suitable  method  found  for  read(long,byte[],byte[])  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  realized,  expected);	  final    int    read    =    read(realized,    offset,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,byte[],byte[])	119	None	replace
337	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset,  expected);  [CE]  cannot  find  symbol  wrapped  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset,  expected);	  final    int    read    =    read(realized,    offset,    expected);    	non-compiled	[CE]  cannot  find  symbol  wrapped	119	None	replace
338	[BUG]  [BUGGY]  InputStream  input  =  realized.getInputStream();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  realized.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  realized.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
339	[BUG]  [BUGGY]  InputStream  input  =  pInput.getInputStream();  [CE]  cannot  find  symbol  pInput  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  pInput.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  pInput.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  pInput	44	None	replace
340	[BUG]  [BUGGY]  InputStream  input  =  implemented.getInputStream();  [CE]  cannot  find  symbol  implemented  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  implemented.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  implemented.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  implemented	44	None	replace
341	[BUG]  [BUGGY]  InputStream  input  =  realization.getInputStream();  [CE]  cannot  find  symbol  realization  [FE]                                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  realization.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  realization.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  realization	44	None	replace
342	[BUG]  [BUGGY]  InputStream  input  =  platform.getInputStream();  [CE]  cannot  find  symbol  platform  [FE]                                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  platform.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  platform.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  platform	44	None	replace
343	[BUG]  [BUGGY]  InputStream  input  =  this.filemode.getInputStream();  [CE]  cannot  find  symbol  filemode  [FE]                                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.filemode.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.filemode.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  filemode	44	None	replace
344	[BUG]  [BUGGY]  final  byte  read  =  read(realized,  expected);  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized,  expected);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	13	None	replace
345	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized,  offset);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized,  offset);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long)	13	None	replace
346	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized,  filemode);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	13	None	replace
347	[BUG]  [BUGGY]  final  byte  read  =  read(width,  expected,  realized);  [CE]  cannot  find  symbol  width  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(width,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(width,  expected,  realized);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  width	13	None	replace
348	[BUG]  [BUGGY]  final  byte  read  =  read(refigured,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(refigured,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(refigured,  expected);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	13	None	replace
349	[BUG]  [BUGGY]  final  byte  read  =  read(filemode,  expected,  realized);  [CE]  cannot  find  symbol  filemode  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(filemode,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(filemode,  expected,  realized);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	13	None	replace
350	[BUG]  [BUGGY]  final  byte  read  =  read(configured,  expected);  [CE]  cannot  find  symbol  configured  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(configured,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(configured,  expected);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  configured	13	None	replace
351	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
352	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
353	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
354	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(expected.length));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(expected.length));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(expected.length));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
355	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  true);  [CE]  no  suitable  method  found  for  read(byte[],byte[],boolean)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],boolean)	84	None	replace
356	[BUG]  [BUGGY]  final  int  read  =  read(realized,  true);  [CE]  no  suitable  method  found  for  read(byte[],boolean)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],boolean)	84	None	replace
357	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length,  true);  [CE]  no  suitable  method  found  for  read(byte[],int,boolean)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,boolean)	84	None	replace
358	[BUG]  [BUGGY]  final  int  read  =  read(expected,  true,  realized);  [CE]  no  suitable  method  found  for  read(byte[],boolean,byte[])  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  true,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  true,  realized);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],boolean,byte[])	84	None	replace
359	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  true);  [CE]  no  suitable  method  found  for  read(int,boolean)  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,boolean)	84	None	replace
360	[BUG]  [BUGGY]  final  int  read  =  read(metadata,  offset);  [CE]  cannot  find  symbol  metadata  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(metadata,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(metadata,  offset);	  final    int    read    =    read(metadata);    	non-compiled	[CE]  cannot  find  symbol  metadata	2	None	replace
361	[BUG]  [BUGGY]  final  int  read  =  read(realized,  meta);  [CE]  cannot  find  symbol  meta  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  meta);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  meta);	  final    int    read    =    read(metadata);    	non-compiled	[CE]  cannot  find  symbol  meta	2	None	replace
362	[BUG]  [BUGGY]  final  int  read  =  read(realized,  needed);  [CE]  cannot  find  symbol  needed  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  needed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  needed);	  final    int    read    =    read(needed,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	88	None	replace
363	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(realized);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInputStream(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream(realized);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
364	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(offset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInputStream(offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream(offset);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
365	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(),  realized);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInputStream(),  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream(),  realized);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  ';'  expected	36	None	replace
366	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(refigured);  [CE]  cannot  find  symbol  refigured  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInputStream(refigured);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream(refigured);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol  refigured	36	None	replace
367	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(),  realized.length;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInputStream(),  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream(),  realized.length;	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  ';'  expected	36	None	replace
368	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  Realized);	  final    int    read    =    read(expected,    Realized);    	non-compiled	[CE]  cannot  find  symbol  Realized	83	None	replace
369	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realization);  [CE]  cannot  find  symbol  realization  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realization);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realization);	  final    int    read    =    read(expected,    Realized);    	non-compiled	[CE]  cannot  find  symbol  realization	83	None	replace
370	[BUG]  [BUGGY]  final  int  read  =  read(redetect,  offset  +  1);  [CE]  cannot  find  symbol  redetect  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(redetect,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(redetect,  offset  +  1);	  final    int    read    =    read(refigured,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  redetect	29	None	replace
371	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset.length);  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset.length);	  final    int    read    =    readBytes(realized.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
372	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized.length,  offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized.length,  offset);	  final    int    read    =    readBytes(realized.length);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
373	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized.length,  expected.length);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized.length,  expected.length);	  final    int    read    =    readBytes(realized.length);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
374	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized.length,  realized.length);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized.length,  realized.length);	  final    int    read    =    readBytes(realized.length);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
375	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset  +  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  offset  +  length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset  +  length);	  final    int    read    =    readBytes(realized.length);    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
376	[BUG]  [BUGGY]  final  int  read  =  readBytes(refigured.length);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(refigured.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(refigured.length);	  final    int    read    =    readBytes(realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	64	None	replace
377	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  long  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	long  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	compilable	  [FE]  IOException  	109	2	replace
378	[BUG]  [BUGGY]  long  read  =  offset  +  realized.length;  [FE]  IOException  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  long  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	long  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	compilable	  [FE]  IOException  	109	2	replace
379	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  expected.length  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	int  read  =  expected.length  +  realized.length;	  int    read    =    offset    +    realized.length;    	compilable	  [FE]  IOException  	109	2	replace
380	[BUG]  [BUGGY]  int  read  =  expected.length  +  realized.length;  [FE]  IOException  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  expected.length  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  expected.length  +  realized.length;	  int    read    =    offset    +    realized.length;    	compilable	  [FE]  IOException  	109	2	replace
381	[BUG]  [BUGGY]  byte  read  =  offset  +  realized.length;  [CE]  possible  loss  of  precision  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  byte  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	byte  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
382	[BUG]  [BUGGY]  int  read  =  realized  +  offset.length;  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  realized  +  offset.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  realized  +  offset.length;	  int    read    =    offset    +    realized.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	109	None	replace
383	[BUG]  [BUGGY]  short  read  =  offset  +  realized.length;  [CE]  possible  loss  of  precision  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  short  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	short  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
384	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  filemode);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  filemode);	  final    int    read    =    read(realized,    filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	115	None	replace
385	[BUG]  [BUGGY]  final  int  read  =  read(realized,  realized.length,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  realized.length,  offset);	  final    int    read    =    read(realized,    filemode,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	115	None	replace
386	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
387	[BUG]  [BUGGY]  final  int  read  =  readFully(refigured.length);  [CE]  cannot  find  symbol  refigured  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(refigured.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(refigured.length);	  final    int    read    =    readFully(expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	114	None	replace
388	[BUG]  [BUGGY]  final  int  read  =  readFully(expected.length,  realized.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected.length,  realized.length);	  final    int    read    =    readFully(expected.length);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
389	[BUG]  [BUGGY]  final  int  read  =  readFully(offset,  expected.length);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(offset,  expected.length);	  final    int    read    =    readFully(expected.length);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
390	[BUG]  [BUGGY]  final  int  read  =  readFully(reformed.length);  [CE]  cannot  find  symbol  reformed  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(reformed.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(reformed.length);	  final    int    read    =    readFully(expected.length);    	non-compiled	[CE]  cannot  find  symbol  reformed	114	None	replace
391	[BUG]  [BUGGY]  final  int  read  =  readFilemode(refigured,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(refigured,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(refigured,  expected);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	73	None	replace
392	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  expected,  offset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  expected,  offset);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
393	[BUG]  [BUGGY]  final  int  read  =  readFilemode(offset,  realized,  expected);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(offset,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(offset,  realized,  expected);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
394	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  realized);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  realized);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
395	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized  +  1,  offset);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized  +  1,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized  +  1,  offset);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	97	None	replace
396	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length  +  1,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length  +  1,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length  +  1,  offset);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	97	None	replace
397	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized,  filemode);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	97	None	replace
398	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length  +  1,  realized);  [CE]  no  suitable  method  found  for  read(byte[],int,byte[])  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length  +  1,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length  +  1,  realized);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,byte[])	97	None	replace
399	[BUG]  [BUGGY]  final  int  read  =  read(expected,  corrected  +  1,  offset);  [CE]  cannot  find  symbol  corrected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  corrected  +  1,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  corrected  +  1,  offset);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  cannot  find  symbol  corrected	97	None	replace
400	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset  +  1,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long,byte[])  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset  +  1,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset  +  1,  realized);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long,byte[])	97	None	replace
401	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  saved);  [CE]  cannot  find  symbol  saved  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized,  saved);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  cannot  find  symbol  saved	97	None	replace
402	[BUG]  [BUGGY]  final  int  read  =  read(filemode,  expected,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(filemode,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(filemode,  expected,  offset);	  final    int    read    =    read(expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	91	None	replace
403	[BUG]  [BUGGY]  final  int  read  =  read(input,  expected,  offset);  [CE]  no  suitable  method  found  for  read(InputStream,byte[],long)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(input,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(input,  expected,  offset);	  final    int    read    =    read(expected,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream,byte[],long)	91	None	replace
404	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected,  offset);  [CE]  cannot  find  symbol  width  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected,  offset);	  final    int    read    =    read(expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	91	None	replace
405	[BUG]  [BUGGY]  InputStream  input  =  this.arArchiveEntry.getInputStream();  [CE]  cannot  find  symbol  arArchiveEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.arArchiveEntry.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.arArchiveEntry.getInputStream();	  InputStream    input    =    this.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  arArchiveEntry	106	None	replace
406	[BUG]  [BUGGY]  InputStream  input  =  this.arEntry.getInputStream();  [CE]  cannot  find  symbol  arEntry  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.arEntry.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.arEntry.getInputStream();	  InputStream    input    =    this.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  arEntry	106	None	replace
407	[BUG]  [BUGGY]  InputStream  input  =  this.getArEntry();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.getArEntry();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.getArEntry();	  InputStream    input    =    this.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
408	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	100	None	replace
409	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized,  filemode);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	33	None	replace
410	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[],int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized,  expected.length);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[],int)	33	None	replace
411	[BUG]  [BUGGY]  final  int  read  =  read(expected,  filemode,  realized);  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  filemode,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  filemode,  realized);	  final    int    read    =    read(realized,    filemode,    expected);    	non-compiled	[CE]  cannot  find  symbol  filemode	120	None	replace
412	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  expected);  [CE]  no  suitable  method  found  for  read(byte[],int,byte[])  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length,  expected);	  final    int    read    =    read(realized,    filemode,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,byte[])	120	None	replace
413	[BUG]  [BUGGY]  final  int  read  =  read(configured,  expected.length);  [CE]  cannot  find  symbol  configured  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(configured,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(configured,  expected.length);	  final    int    read    =    read(expected,    imagined.length);    	non-compiled	[CE]  cannot  find  symbol  configured	98	None	replace
414	[BUG]  [BUGGY]  final  int  read  =  read(unknown,  expected.length);  [CE]  cannot  find  symbol  unknown  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(unknown,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(unknown,  expected.length);	  final    int    read    =    read(expected,    imagined.length);    	non-compiled	[CE]  cannot  find  symbol  unknown	98	None	replace
415	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected.length);  [CE]  cannot  find  symbol  width  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected.length);	  final    int    read    =    read(expected,    imagined.length);    	non-compiled	[CE]  cannot  find  symbol  width	98	None	replace
416	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	103	None	replace
417	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	103	2	replace
418	[BUG]  [BUGGY]  final  int  read  =  read(expected);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	103	2	replace
419	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized);  if(read  ==  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized);  if(read  ==  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized);  if(read  ==  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	103	None	replace
420	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  expected.length);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  expected.length);	  final    int    read    =    readFully(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
421	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  imagined.length);  [CE]  cannot  find  symbol  imagined  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  imagined.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  imagined.length);	  final    int    read    =    readFully(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  imagined	50	None	replace
422	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  actual.length);  [CE]  cannot  find  symbol  actual  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  actual.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  actual.length);	  final    int    read    =    readFully(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actual	50	None	replace
423	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  shared.length);  [CE]  cannot  find  symbol  shared  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  shared.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  shared.length);	  final    int    read    =    readFully(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  shared	50	None	replace
424	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected.length,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  realized  +  1);	  final    int    read    =    read(offset,    realized    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	28	None	replace
425	[BUG]  [BUGGY]  final  int  read  =  read(offset,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  realized.length  +  1);	  final    int    read    =    read(offset,    realized    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	28	None	replace
426	[BUG]  [BUGGY]  final  int  read  =  read(refigured  +  1,  offset  +  1);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured  +  1,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured  +  1,  offset  +  1);	  final    int    read    =    read(offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  refigured	28	None	replace
427	[BUG]  [BUGGY]  final  byte  read  =  read(offset,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(offset,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(offset,  realized  +  1);	  final    int    read    =    read(offset,    realized    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	28	None	replace
428	[BUG]  [BUGGY]  final  byte  read  =  read(realized);  [CE]  possible  loss  of  precision  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized);	  final    byte    read    =    read(expected);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
429	[BUG]  [BUGGY]  final  byte  read  =  read(refigured);  [CE]  cannot  find  symbol  refigured  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(refigured);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(refigured);	  final    byte    read    =    read(expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	60	None	replace
430	[BUG]  [BUGGY]  final  int  read  =  read(offset,  imagined);  [CE]  cannot  find  symbol  imagined  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  imagined);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  imagined);	  final    int    read    =    read(expected,    imagined);    	non-compiled	[CE]  cannot  find  symbol  imagined	86	None	replace
431	[BUG]  [BUGGY]  final  int  read  =  read(configured,  expected);  [CE]  cannot  find  symbol  configured  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(configured,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(configured,  expected);	  final    int    read    =    read(expected,    imagined);    	non-compiled	[CE]  cannot  find  symbol  configured	86	None	replace
432	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  expected);  [CE]  cannot  find  symbol  actualized  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  expected);	  final    int    read    =    read(expected,    imagined);    	non-compiled	[CE]  cannot  find  symbol  actualized	86	None	replace
433	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected,  offset,  realized);  [CE]  cannot  find  symbol  width  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  expected,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected,  offset,  realized);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  width	90	None	replace
434	[BUG]  [BUGGY]  final  int  read  =  read(input,  expected,  offset,  realized);  [CE]  no  suitable  method  found  for  read(InputStream,byte[],long,byte[])  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(input,  expected,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(input,  expected,  offset,  realized);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream,byte[],long,byte[])	90	None	replace
435	[BUG]  [BUGGY]  final  int  read  =  read(data,  offset,  realized);  [CE]  cannot  find  symbol  data  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(data,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(data,  offset,  realized);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  data	90	None	replace
436	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized.length,  expected.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int,int)	6	None	replace
437	[BUG]  [BUGGY]  final  int  read  =  read(width,  offset,  realized.length);  [CE]  cannot  find  symbol  width  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  width	6	None	replace
438	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  offset.length);  [CE]  cannot  find  symbol  refigured  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  offset.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	6	None	replace
439	[BUG]  [BUGGY]  final  byte  read  =  read(realized,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	6	None	replace
440	[BUG]  [BUGGY]  final  int  read  =  readBytes(realised);  [CE]  cannot  find  symbol  realised  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realised);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realised);	  final    int    read    =    readBytes(refigured);    	non-compiled	[CE]  cannot  find  symbol  realised	63	None	replace
441	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  realized.length);  [CE]  cannot  find  symbol  refigured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  realized.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	117	None	replace
442	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset,  expected.length);  [CE]  cannot  find  symbol  needed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  needed	117	None	replace
443	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  Final  int  read  =  read(realized,  expected.length,  realized.length);  [CE]  not  a  statement  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  Final  int  read  =  read(realized,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    Final  int  read  =  read(realized,  expected.length,  realized.length);	  	non-compiled	[CE]  not  a  statement	122	None	add
444	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized,  length);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  cannot  find  symbol  length	97	None	replace
445	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  pInput);  [CE]  cannot  find  symbol  pInput  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  pInput);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized,  pInput);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  cannot  find  symbol  pInput	97	None	replace
446	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[],int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized,  expected.length);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[],int)	97	None	replace
447	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset);  [CE]  cannot  find  symbol  needed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	30	None	replace
448	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  offset);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
449	[BUG]  [BUGGY]  final  int  read  =  readBytes(needed,  realized);  [CE]  cannot  find  symbol  needed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(needed,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(needed,  realized);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	65	None	replace
450	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  Realized.length);  [CE]  cannot  find  symbol  Realized  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  Realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  Realized.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  Realized	31	None	replace
451	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  expected);  [CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  expected);	  final    int    read    =    read(width,    expected,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])	55	None	replace
452	[BUG]  [BUGGY]  final  int  read  =  read(needed,  expected,  realized);  [CE]  cannot  find  symbol  needed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  expected,  realized);	  final    int    read    =    read(width,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	55	None	replace
453	[BUG]  [BUGGY]  final  int  read  =  readFully(refigured,  expected.length);  [CE]  cannot  find  symbol  refigured  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(refigured,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(refigured,  expected.length);	  final    int    read    =    readFully(expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	114	None	replace
454	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  this.input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  this.input.read();	  final    int    read    =    input.read();    	compilable	  [FE]  IOException  	43	2	replace
455	[BUG]  [BUGGY]  final  int  read  =  this.input.read();  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  this.input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  this.input.read();	  final    int    read    =    input.read();    	compilable	  [FE]  IOException  	43	2	replace
456	[BUG]  [BUGGY]  final  int  read  =  input.read(0);  [CE]  no  suitable  method  found  for  read(int)  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read(0);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  input.read(0);	  final    int    read    =    input.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	43	None	replace
457	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  expected.length);  [CE]  cannot  find  symbol  wrapped  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  expected.length);	  final    int    read    =    read(expected,    actual.length);    	non-compiled	[CE]  cannot  find  symbol  wrapped	22	None	replace
458	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset  +  1);  [CE]  cannot  find  symbol  needed  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset  +  1);	  final    int    read    =    read(actualized,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  needed	95	None	replace
459	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset  +  1);  [CE]  cannot  find  symbol  wrapped  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset  +  1);	  final    int    read    =    read(actualized,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  wrapped	95	None	replace
460	[BUG]  [BUGGY]  final  int  read  =  read(reformed,  offset  +  1);  [CE]  cannot  find  symbol  reformed  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reformed,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reformed,  offset  +  1);	  final    int    read    =    read(offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  reformed	28	None	replace
461	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  expected.length);  [CE]  cannot  find  symbol  actualized  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  expected.length);	  final    int    read    =    read(expected,    imagined.length);    	non-compiled	[CE]  cannot  find  symbol  actualized	98	None	replace
462	[BUG]  [BUGGY]  final  int  read  =  readFilemode(reformed);  [CE]  cannot  find  symbol  reformed  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(reformed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(reformed);	  final    int    read    =    readFilemode(needed);    	non-compiled	[CE]  cannot  find  symbol  reformed	77	None	replace
463	[BUG]  [BUGGY]  final  int  read  =  read(expected,  implemented);  [CE]  cannot  find  symbol  implemented  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  implemented);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  implemented);	  final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  cannot  find  symbol  implemented	16	None	replace
464	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected,  offset);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected,  offset);	  final    int    read    =    read(refigured,    expected,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long)	121	None	replace
465	[BUG]  [BUGGY]  final  int  read  =  read(needed,  expected,  offset);  [CE]  cannot  find  symbol  needed  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  expected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  expected,  offset);	  final    int    read    =    read(refigured,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  needed	121	None	replace
466	[BUG]  [BUGGY]  final  int  read  =  read(needed,  expected);  [CE]  cannot  find  symbol  needed  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  needed	113	None	replace
467	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  expected);  [CE]  cannot  find  symbol  wrapped  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  wrapped	113	None	replace
468	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }	  final    int    read    =    read(expected);    int    read    =    read(expected);    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	9	None	replace
469	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  0,  expected.length);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  0,  expected.length);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  0,  expected.length);  }	  final    int    read    =    read(expected);    int    read    =    read(expected);    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	9	None	replace
470	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    int    read    =    read(expected);    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	9	None	replace
471	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  0,  imagined.length);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  0,  imagined.length);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  0,  imagined.length);  }	  final    int    read    =    read(expected);    int    read    =    read(expected);    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	9	None	replace
472	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  1,  expected.length);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  1,  expected.length);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  int  read  =  read(realized);  }  else  {  System.arraycopy(expected,  0,  realized,  1,  expected.length);  }	  final    int    read    =    read(expected);    int    read    =    read(expected);    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	9	None	replace
473	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry().getInputStream();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getNextArEntry().getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getNextArEntry().getInputStream();	  InputStream    input    =    this.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
474	[BUG]  [BUGGY]  final  int  read  =  readAndClose(needed,  realized);  [CE]  cannot  find  symbol  needed  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readAndClose(needed,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(needed,  realized);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol  needed	61	None	replace
475	[BUG]  [BUGGY]  final  int  read  =  readAndClose(expected,  realized);  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readAndClose(expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(expected,  realized);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
476	[BUG]  [BUGGY]  final  int  read  =  readAndClose(metadata,  expected);  [CE]  cannot  find  symbol  metadata  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readAndClose(metadata,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(metadata,  expected);	  final    int    read    =    readAndClose(expected);    	non-compiled	[CE]  cannot  find  symbol  metadata	61	None	replace
477	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset,  realized.length  +  1);  [CE]  cannot  find  symbol  needed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset,  realized.length  +  1);	  final    int    read    =    read(realized,    offset,    realized.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  needed	26	None	replace
478	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length  -  1);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length  -  1);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	4	None	replace
479	[BUG]  [BUGGY]  final  int  read  =  read(needed,  realized.length);  [CE]  cannot  find  symbol  needed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  realized.length);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  needed	4	None	replace
480	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset.length);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset.length);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	4	None	replace
481	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  realized,  realized);  [CE]  cannot  find  symbol  wrapped  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  realized,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  realized,  realized);	  final    int    read    =    read(realized,    realized);    	non-compiled	[CE]  cannot  find  symbol  wrapped	17	None	replace
482	[BUG]  [BUGGY]  final  int  read  =  read(expected,  added,  offset);  [CE]  cannot  find  symbol  added  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  added,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  added,  offset);	  final    int    read    =    read(realized,    expected,    offset);    	non-compiled	[CE]  cannot  find  symbol  added	15	None	replace
483	[BUG]  [BUGGY]  final  int  read  =  read(expected,  true,  offset);  [CE]  no  suitable  method  found  for  read(byte[],boolean,long)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  true,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  true,  offset);	  final    int    read    =    read(realized,    expected,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],boolean,long)	15	None	replace
484	[BUG]  [BUGGY]  final  int  read  =  readFilemode(expected,  expected);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(expected,  expected);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
485	[BUG]  [BUGGY]  final  int  read  =  readFilemode(expected,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(expected,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(expected,  Realized);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  Realized	73	None	replace
486	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  true);  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  cannot  find  symbol  refigured	84	None	replace
487	[BUG]  [BUGGY]  final  int  read  =  read(needed,  true);  [CE]  cannot  find  symbol  needed  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  cannot  find  symbol  needed	84	None	replace
488	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  filemode);	  final    int    read    =    read(realized,    filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	115	None	replace
489	[BUG]  [BUGGY]  final  int  read  =  read(expected,  filemode,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  filemode,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  filemode,  offset);	  final    int    read    =    read(realized,    filemode,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	115	None	replace
490	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  true.length);  [CE]  boolean  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  true.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  true.length);	  final    int    read    =    readFully(realized,    expected.length);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	50	None	replace
491	[BUG]  [BUGGY]  final  byte  read  =  read(needed,  realized.length);  [CE]  cannot  find  symbol  needed  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(needed,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(needed,  realized.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  needed	19	None	replace
492	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized,  offset.length);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(expected,  realized,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized,  offset.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	19	None	replace
493	[BUG]  [BUGGY]  final  byte  read  =  read(wrapped,  expected,  realized.length);  [CE]  cannot  find  symbol  wrapped  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(wrapped,  expected,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(wrapped,  expected,  realized.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  wrapped	19	None	replace
494	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset,  realized);  [CE]  cannot  find  symbol  needed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset,  realized);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	33	None	replace
495	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset,  realized);  [CE]  cannot  find  symbol  wrapped  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset,  realized);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  wrapped	33	None	replace
496	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset,  realized);  [CE]  cannot  find  symbol  actualized  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset,  realized);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  actualized	33	None	replace
497	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset  +  1,  realized.length);  [CE]  cannot  find  symbol  wrapped  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset  +  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  wrapped	25	None	replace
498	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  expectation.length);  [CE]  cannot  find  symbol  expectation  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  expectation.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  expectation.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  expectation	111	None	replace
499	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  assumed.length);  [CE]  cannot  find  symbol  assumed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  assumed.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  assumed.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  assumed	111	None	replace
500	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  expected,  realized);  [CE]  cannot  find  symbol  wrapped  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  expected,  realized);	  final    int    read    =    read(filemode,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  wrapped	56	None	replace
501	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  realized);  [CE]  cannot  find  symbol  wrapped  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  realized);	  final    int    read    =    read(expected,    Realized);    	non-compiled	[CE]  cannot  find  symbol  wrapped	83	None	replace
502	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getNextArEntry();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getNextArEntry();	  InputStream    input    =    getInput();    	non-compiled	[CE]  incompatible  types	40	None	replace
503	[BUG]  [BUGGY]  InputStream  input  =  getOutput();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getOutput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getOutput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
504	[BUG]  [BUGGY]  InputStream  input  =  getInput().getRawInput();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput().getRawInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput().getRawInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
505	[BUG]  [BUGGY]  InputStream  input  =  getInput().getEncoding();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput().getEncoding();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput().getEncoding();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
506	[BUG]  [BUGGY]  InputStream  input  =  getInput().getChars(offset,  realized);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput().getChars(offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput().getChars(offset,  realized);	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
507	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  expected);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  expected);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
508	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  Realized);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  Realized	66	None	replace
509	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  true);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  true);	  final    int    read    =    readBytes(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
510	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  endpointer);  [CE]  cannot  find  symbol  endpointer  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  endpointer);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  endpointer);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  cannot  find  symbol  endpointer	53	None	replace
511	[BUG]  [BUGGY]  final  int  read  =  read(expected,  input,  offset);  [CE]  no  suitable  method  found  for  read(byte[],InputStream,long)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  input,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  input,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],InputStream,long)	116	None	replace
512	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  input);  [CE]  no  suitable  method  found  for  read(byte[],long,InputStream)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  input);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  input);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,InputStream)	116	None	replace
513	[BUG]  [BUGGY]  final  int  read  =  read(read,  input,  offset);  [CE]  no  suitable  method  found  for  read(int,InputStream,long)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(read,  input,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(read,  input,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,InputStream,long)	116	None	replace
514	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],byte[],int)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],int)	6	None	replace
515	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset,  realized.length);  [CE]  cannot  find  symbol  needed  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  needed	6	None	replace
516	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  offset,  realized.length);  [CE]  cannot  find  symbol  wrapped  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  wrapped	6	None	replace
517	[BUG]  [BUGGY]  final  int  read  =  read(actualized);  [CE]  cannot  find  symbol  actualized  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized);	  final    int    read    =    read(needed);    	non-compiled	[CE]  cannot  find  symbol  actualized	74	None	replace
518	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  cannot  find  symbol  read  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  cannot  find  symbol  read	78	None	replace
519	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
520	[BUG]  [BUGGY]  if(expected  ==  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
521	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String  [CE]  '('  or  '['  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  '('  or  '['  expected	78	None	replace
522	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
523	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realised);  [CE]  cannot  find  symbol  realised  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realised);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realised);	  final    int    read    =    readFilemode(refigured);    	non-compiled	[CE]  cannot  find  symbol  realised	70	None	replace
524	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  reading  =  input.read();  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  reading  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  reading  =  input.read();	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
525	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	int  read  =  input.read(expected);	  int    read    =    input.read(realized);    	compilable	  [FE]  IOException  	108	2	replace
526	[BUG]  [BUGGY]  int  read  =  input.read(expected);  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(expected);	  int    read    =    input.read(realized);    	compilable	  [FE]  IOException  	108	2	replace
527	[BUG]  [BUGGY]  int  read  =  pInput.read(realized);  [CE]  cannot  find  symbol  pInput  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  pInput.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  pInput.read(realized);	  int    read    =    input.read(realized);    	non-compiled	[CE]  cannot  find  symbol  pInput	108	None	replace
528	[BUG]  [BUGGY]  int  read  =  input.read(needed);  [CE]  cannot  find  symbol  needed  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(needed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(needed);	  int    read    =    input.read(realized);    	non-compiled	[CE]  cannot  find  symbol  needed	108	None	replace
529	[BUG]  [BUGGY]  int  read  =  input.read(new  String(expected));  [CE]  no  suitable  method  found  for  read(String)  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(new  String(expected));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(new  String(expected));	  int    read    =    input.read(realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
530	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  expected);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  expected);	  final    int    read    =    readFully(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
531	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(expected,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  Realized);	  final    int    read    =    readFully(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  Realized	49	None	replace
532	[BUG]  [BUGGY]  final  int  read  =  readFully(offset,  realized,  expected);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(offset,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(offset,  realized,  expected);	  final    int    read    =    readFully(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
533	[BUG]  [BUGGY]  int  read  =  input.read();  Input  input  =  input.read();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  Input  input  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    Input  input  =  input.read();	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
534	[BUG]  [BUGGY]  Int  read  =  input.read();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  Int  read  =  input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	Int  read  =  input.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
535	[BUG]  [BUGGY]  int  read  =  _input.read();  [CE]  cannot  find  symbol  _input  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  _input.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  _input.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol  _input	39	None	replace
536	[BUG]  [BUGGY]  int  read  =  output.read();  [CE]  cannot  find  symbol  output  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  output.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  output.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol  output	39	None	replace
537	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  double  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	double  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	compilable	  [FE]  IOException  	109	2	replace
538	[BUG]  [BUGGY]  double  read  =  offset  +  realized.length;  [FE]  IOException  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  double  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	double  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	compilable	  [FE]  IOException  	109	2	replace
539	[BUG]  [BUGGY]  Long  read  =  offset  +  realized.length;  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  Long  read  =  offset  +  realized.length;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	Long  read  =  offset  +  realized.length;	  int    read    =    offset    +    realized.length;    	non-compiled	[CE]  incompatible  types	109	None	replace
540	[BUG]  [BUGGY]  final  byte  read  =  read(needed,  expected.length);  [CE]  cannot  find  symbol  needed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(needed,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(needed,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  needed	20	None	replace
541	[BUG]  [BUGGY]  final  byte  read  =  read(actual,  expected.length);  [CE]  cannot  find  symbol  actual  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(actual,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(actual,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actual	20	None	replace
542	[BUG]  [BUGGY]  InputStream  input  =  dataInput.readInput();  [CE]  cannot  find  symbol  dataInput  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  dataInput.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  dataInput.readInput();	  InputStream    input    =    this.input.readInput();    	non-compiled	[CE]  cannot  find  symbol  dataInput	105	None	replace
543	[BUG]  [BUGGY]  InputStream  input  =  data.readInput();  [CE]  cannot  find  symbol  data  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  data.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  data.readInput();	  InputStream    input    =    this.input.readInput();    	non-compiled	[CE]  cannot  find  symbol  data	105	None	replace
544	[BUG]  [BUGGY]  final  int  read  =  readFully();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully();	  final    int    read    =    read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
545	[BUG]  [BUGGY]  final  int  read  =  readBytes();  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes();	  final    int    read    =    read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
546	[BUG]  [BUGGY]  final  int  read  =  readLine();  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readLine();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readLine();	  final    int    read    =    read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
547	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
548	[BUG]  [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
549	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
550	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
551	[BUG]  [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
552	[BUG]  [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
553	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length,  shared);  [CE]  cannot  find  symbol  shared  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length,  shared);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length,  shared);	  final    int    read    =    read(realized,    expected.length,    offset);    	non-compiled	[CE]  cannot  find  symbol  shared	35	None	replace
554	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
555	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  input  =  input.read(realized);  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  input  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  input  =  input.read(realized);	  	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	add
556	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
557	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized);  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	10	None	replace
558	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized;  }  [CE]  ')'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized;  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized;  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  ')'  expected	10	None	replace
559	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized;  }  [CE]  ')'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized;  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(realized;  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  ')'  expected	10	None	replace
560	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(refigured);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(refigured);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(refigured);  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	10	None	replace
561	[BUG]  [BUGGY]  final  int  read  =  readFilemode(refigured.length);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(refigured.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(refigured.length);	  final    int    read    =    readFilemode(realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	69	None	replace
562	[BUG]  [BUGGY]  final  int  read  =  read(needed,  filemode,  realized);  [CE]  cannot  find  symbol  needed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  filemode,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  filemode,  realized);	  final    int    read    =    read(realized,    filemode,    expected);    	non-compiled	[CE]  cannot  find  symbol  needed	120	None	replace
563	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  filemode,  expected);  [CE]  cannot  find  symbol  actualized  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  filemode,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  filemode,  expected);	  final    int    read    =    read(realized,    filemode,    expected);    	non-compiled	[CE]  cannot  find  symbol  actualized	120	None	replace
564	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  Realized);	  final    int    read    =    read(realized,    offset,    expected);    	non-compiled	[CE]  cannot  find  symbol  Realized	119	None	replace
565	[BUG]  [BUGGY]  final  int  read  =  readFully(reformed,  expected);  [CE]  cannot  find  symbol  reformed  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(reformed,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(reformed,  expected);	  final    int    read    =    readFully(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  reformed	92	None	replace
566	[BUG]  [BUGGY]  final  int  read  =  readFully(reformed);  [CE]  cannot  find  symbol  reformed  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(reformed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(reformed);	  final    int    read    =    readFully(expected);    	non-compiled	[CE]  cannot  find  symbol  reformed	46	None	replace
567	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
568	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
569	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
570	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length  -  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected,  expected.length  -  1,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
571	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length  -  1,  realized.length);  [FE]  IndexOutOfBoundsException  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  expected.length  -  1,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length  -  1,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	compilable	  [FE]  IndexOutOfBoundsException  	123	2	replace
572	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
573	[BUG]  [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
574	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  imagined);  [CE]  cannot  find  symbol  wrapped  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  imagined);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  imagined);	  final    int    read    =    read(expected,    imagined);    	non-compiled	[CE]  cannot  find  symbol  wrapped	86	None	replace
575	[BUG]  [BUGGY]  final  int  read  =  read(needed,  imagined);  [CE]  cannot  find  symbol  needed  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  imagined);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  imagined);	  final    int    read    =    read(expected,    imagined);    	non-compiled	[CE]  cannot  find  symbol  needed	86	None	replace
576	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
577	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  realized,  expected);  [CE]  cannot  find  symbol  wrapped  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  realized,  expected);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  wrapped	14	None	replace
578	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  Realized);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  Realized	14	None	replace
579	[BUG]  [BUGGY]  final  int  read  =  read(needed,  realized,  realized);  [CE]  cannot  find  symbol  needed  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  realized,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  realized,  realized);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  needed	14	None	replace
580	[BUG]  [BUGGY]  final  int  read  =  read(needed,  offset,  realized  +  1);  [CE]  cannot  find  symbol  needed  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  offset,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  offset,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  needed	24	None	replace
581	[BUG]  [BUGGY]  final  int  read  =  read(expected,  0,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  0,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  0,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	24	None	replace
582	[BUG]  [BUGGY]  InputStream  input  =  expected.getInputStream();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  expected.getInputStream();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  expected.getInputStream();	  InputStream    input    =    filemode.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
583	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
584	[BUG]  [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
585	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	100	2	replace
586	[BUG]  [BUGGY]  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	100	2	replace
587	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  realized,  filemode);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  realized,  filemode);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	90	None	replace
588	[BUG]  [BUGGY]  final  int  read  =  read(expected,  corrected,  offset);  [CE]  cannot  find  symbol  corrected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  corrected,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  corrected,  offset);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  corrected	90	None	replace
589	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  realized,  lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  offset,  realized,  lastmodified);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  realized,  lastmodified);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	90	None	replace
590	[BUG]  [BUGGY]  final  int  read  =  read(expected,  saved,  offset,  realized);  [CE]  cannot  find  symbol  saved  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  saved,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  saved,  offset,  realized);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  saved	90	None	replace
591	[BUG]  [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
592	[BUG]  [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length!=  0)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
593	[BUG]  [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected  ==  null)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
594	[BUG]  [BUGGY]  InputStream  input  =  this.filemode.readInput();  [CE]  cannot  find  symbol  filemode  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  this.filemode.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.filemode.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  cannot  find  symbol  filemode	41	None	replace
595	[BUG]  [BUGGY]  final  byte  read  =  read(needed,  realized);  [CE]  cannot  find  symbol  needed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(needed,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(needed,  realized);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	13	None	replace
596	[BUG]  [BUGGY]  final  byte  read  =  read(wrapped,  expected,  realized);  [CE]  cannot  find  symbol  wrapped  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(wrapped,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(wrapped,  expected,  realized);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  wrapped	13	None	replace
597	[BUG]  [BUGGY]  final  int  read  =  read(needed,  realized,  offset);  [CE]  cannot  find  symbol  needed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(needed,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  realized,  offset);	  final    int    read    =    read(width,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  needed	34	None	replace
598	[BUG]  [BUGGY]  final  int  read  =  read(wrapped,  realized,  offset);  [CE]  cannot  find  symbol  wrapped  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(wrapped,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(wrapped,  realized,  offset);	  final    int    read    =    read(width,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  wrapped	34	None	replace
599	[BUG]  [BUGGY]  final  int  read  =  read(realized));  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized));	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
600	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  cannot  find  symbol  read  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  cannot  find  symbol  read	81	None	replace
601	[BUG]  [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected!=  null)  {  if(realized!=  null)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected!=  null)  {  if(realized!=  null)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
602	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	81	None	replace
603	[BUG]  [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "f  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "f  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "f	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
604	[BUG]  [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header  [CE]  unclosed  string  literal  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	while(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
605	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  realized.length);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  realized.length);	  final    int    read    =    read(refigured,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	52	None	replace
606	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  Realized.HEADER.length);  [CE]  package  Realized  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  Realized.HEADER.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  Realized.HEADER.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  package  Realized  does  not  exist	67	None	replace
607	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  imagined.length);  [CE]  cannot  find  symbol  imagined  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  imagined.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  imagined.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  imagined	67	None	replace
608	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  true.length);  [CE]  boolean  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(expected,  true.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  true.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	67	None	replace
609	[BUG]  [BUGGY]  final  int  read  =  read(expected,  filemode,  realized,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  filemode,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  filemode,  realized,  offset);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	32	None	replace
610	[BUG]  [BUGGY]  final  int  read  =  read(expected,  adjusted,  offset);  [CE]  cannot  find  symbol  adjusted  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  adjusted,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  adjusted,  offset);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  adjusted	32	None	replace
611	[BUG]  [BUGGY]  final  int  read  =  read(expected,  saved,  offset);  [CE]  cannot  find  symbol  saved  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  saved,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  saved,  offset);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  saved	32	None	replace
612	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
613	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  input.read();  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
614	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  }  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  }  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  input.read();  }  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  type	37	None	add
615	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
616	[BUG]  [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read();  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read();    int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	37	None	add
617	[BUG]  [BUGGY]  final  int  read  =  readBytes(reformed,  expected);  [CE]  cannot  find  symbol  reformed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(reformed,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(reformed,  expected);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  reformed	65	None	replace
618	[BUG]  [BUGGY]  final  int  read  =  readBytes(actualized,  expected);  [CE]  cannot  find  symbol  actualized  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(actualized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(actualized,  expected);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  actualized	65	None	replace
619	[BUG]  [BUGGY]  final  int  read  =  readBytes(width,  realized);  [CE]  cannot  find  symbol  width  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(width,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(width,  realized);	  final    int    read    =    readBytes(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  width	65	None	replace
620	[BUG]  [BUGGY]  final  int  read  =  read(filemode,  realized,  offset);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(filemode,  realized,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(filemode,  realized,  offset);	  final    int    read    =    read(expected,    realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	32	None	replace
621	[BUG]  [BUGGY]  final  int  read  =  read(realized,  saved,  expected);  [CE]  cannot  find  symbol  saved  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  saved,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  saved,  expected);	  final    int    read    =    read(realized,    filemode,    expected);    	non-compiled	[CE]  cannot  find  symbol  saved	120	None	replace
622	[BUG]  [BUGGY]  final  int  read  =  read(realized,  extended,  expected);  [CE]  cannot  find  symbol  extended  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  extended,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  extended,  expected);	  final    int    read    =    read(realized,    filemode,    expected);    	non-compiled	[CE]  cannot  find  symbol  extended	120	None	replace
623	[BUG]  [BUGGY]  final  int  read  =  read(reformed,  offset,  expected);  [CE]  cannot  find  symbol  reformed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reformed,  offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reformed,  offset,  expected);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  reformed	90	None	replace
624	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset,  expected);  [CE]  cannot  find  symbol  actualized  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset,  expected);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  actualized	90	None	replace
625	[BUG]  [BUGGY]  final  int  read  =  read(filemode,  offset,  realized);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(filemode,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(filemode,  offset,  realized);	  final    int    read    =    read(expected,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	90	None	replace
626	[BUG]  [BUGGY]  final  byte  read  =  read(reformed,  expected);  [CE]  cannot  find  symbol  reformed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(reformed,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(reformed,  expected);	  final    byte    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  reformed	13	None	replace
627	[BUG]  [BUGGY]  InputStream  input  =  getInputStream().readLine();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInputStream().readLine();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream().readLine();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
628	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  filemode.length);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(realized,  filemode.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  filemode.length);	  final    int    read    =    readFilemode(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	68	None	replace
629	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  realized);  [CE]  cannot  find  symbol  refigured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  realized);	  final    int    read    =    read(refigured,    expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	54	None	replace
630	[BUG]  [BUGGY]  final  int  read  =  read(reformed,  expected.length);  [CE]  cannot  find  symbol  reformed  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reformed,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reformed,  expected.length);	  final    int    read    =    read(expected,    imagined.length);    	non-compiled	[CE]  cannot  find  symbol  reformed	98	None	replace
631	[BUG]  [BUGGY]  final  int  read  =  read(offset,  imagined.length);  [CE]  cannot  find  symbol  imagined  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  imagined.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  imagined.length);	  final    int    read    =    read(expected,    imagined.length);    	non-compiled	[CE]  cannot  find  symbol  imagined	98	None	replace
632	[BUG]  [BUGGY]  final  int  read  =  read(expected,  imagined.length  +  1);  [CE]  cannot  find  symbol  imagined  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  imagined.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  imagined.length  +  1);	  final    int    read    =    read(realized,    expected.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  imagined	27	None	replace
633	[BUG]  [BUGGY]  final  int  read  =  read(expected,  assumed.length  +  1);  [CE]  cannot  find  symbol  assumed  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  assumed.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  assumed.length  +  1);	  final    int    read    =    read(realized,    expected.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  assumed	27	None	replace
634	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  shared);  [CE]  cannot  find  symbol  refigured  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  shared);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  shared);	  final    int    read    =    read(expected,    shared);    	non-compiled	[CE]  cannot  find  symbol  refigured	85	None	replace
635	[BUG]  [BUGGY]  final  int  read  =  readBytes(actualized,  expected.length);  [CE]  cannot  find  symbol  actualized  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(actualized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(actualized,  expected.length);	  final    int    read    =    readBytes(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actualized	67	None	replace
636	[BUG]  [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
637	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	103	2	replace
638	[BUG]  [BUGGY]  final  int  read  =  read(realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized);  if(read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    ==    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	103	2	replace
639	[BUG]  [BUGGY]  if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
640	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  expected.length,  offset);  [CE]  cannot  find  symbol  actualized  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  expected.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  expected.length,  offset);	  final    int    read    =    read(realized,    expected.length,    offset);    	non-compiled	[CE]  cannot  find  symbol  actualized	35	None	replace
641	[BUG]  [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length  ==  0)  {  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
642	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	100	2	replace
643	[BUG]  [BUGGY]  final  int  read  =  read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read    >=    expected.length)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	100	2	replace
644	[BUG]  [BUGGY]  final  int  read  =  read(realized,  input,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],InputStream,long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  input,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  input,  offset,  realized.length);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],InputStream,long,int)	116	None	replace
645	[BUG]  [BUGGY]  final  int  read  =  read(realized,  input,  pInput,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  input,  pInput,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  input,  pInput,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	116	None	replace
646	[BUG]  [BUGGY]  final  int  read  =  read(realized,  pInput,  offset);  [CE]  cannot  find  symbol  pInput  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  pInput,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  pInput,  offset);	  final    int    read    =    read(realized,    input,    offset);    	non-compiled	[CE]  cannot  find  symbol  pInput	116	None	replace
647	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset,  saved);  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  offset,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset,  saved);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  saved	62	None	replace
648	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset,  realized);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(realized,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset,  realized);	  final    int    read    =    readBytes(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
649	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  true);  [CE]  cannot  find  symbol  actualized  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  cannot  find  symbol  actualized	84	None	replace
650	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected,  true);  [CE]  cannot  find  symbol  width  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(width,  expected,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  cannot  find  symbol  width	84	None	replace
651	[BUG]  [BUGGY]  final  int  read  =  read(configured,  true);  [CE]  cannot  find  symbol  configured  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(configured,  true);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(configured,  true);	  final    int    read    =    read(expected,    true);    	non-compiled	[CE]  cannot  find  symbol  configured	84	None	replace
652	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  expected,  realized);  [CE]  cannot  find  symbol  actualized  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  expected,  realized);	  final    int    read    =    read(filemode,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  actualized	56	None	replace
653	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  imagined);  [CE]  cannot  find  symbol  refigured  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  imagined);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  imagined);	  final    int    read    =    read(expected,    imagined);    	non-compiled	[CE]  cannot  find  symbol  refigured	86	None	replace
654	[BUG]  [BUGGY]  final  int  read  =  realized.readBytes(offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.readBytes(offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.readBytes(offset);	  final    int    read    =    readBytes(offset);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
655	[BUG]  [BUGGY]  final  int  read  =  input.readLine();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.readLine();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  input.readLine();	  final    int    read    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
656	[BUG]  [BUGGY]  final  int  read  =  read(realized);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  bad  operand  types  for  binary  operator  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	102	None	replace
657	[BUG]  [BUGGY]  final  int  read  =  read(offset);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  no  suitable  method  found  for  read(long)  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	102	None	replace
658	[BUG]  [BUGGY]  final  int  read  =  read(refigured);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  refigured  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected)    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	102	None	replace
659	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  else  {  throw  new  IOException( " ");  }  [CE]  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  	11	None	replace
660	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
661	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  else  {  throw  new  IOException( " ");  }  [CE]  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  	11	None	replace
662	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected));  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected));	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
663	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected));    	non-compiled	[CE]  ';'  expected	11	None	replace
664	[BUG]  [BUGGY]  int  read  =  input.read(realized,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(realized,  offset  +  1);	  int    read    =    input.read(realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	108	None	replace
665	[BUG]  [BUGGY]  Integer  read  =  input.read(realized);  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  Integer  read  =  input.read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	Integer  read  =  input.read(realized);	  int    read    =    input.read(realized);    	non-compiled	[CE]  incompatible  types	108	None	replace
666	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  realized,  expected);  [CE]  cannot  find  symbol  filemode  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode,  realized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  realized,  expected);	  final    int    read    =    read(realized,    realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  filemode	14	None	replace
667	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected.length,  realized.length);  [CE]  cannot  find  symbol  refigured  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected.length,  realized.length);	  final    int    read    =    read(realized,    expected.length,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	123	None	replace
668	[BUG]  [BUGGY]  final  int  read  =  readFilemode();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode();	  final    int    read    =    readFilemode(expected);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
669	[BUG]  [BUGGY]  final  int  read  =  readReadFilemode(realized);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readReadFilemode(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readReadFilemode(realized);	  final    int    read    =    readFilemode(expected);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
670	[BUG]  [BUGGY]  final  int  read  =  readFully(reposed,  expected);  [CE]  cannot  find  symbol  reposed  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(reposed,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(reposed,  expected);	  final    int    read    =    readFully(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  reposed	92	None	replace
671	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  offset,  realized.length);  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  offset,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  filemode	6	None	replace
672	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length  -  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized.length  -  1);	  final    int    read    =    read(realized,    offset,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	6	None	replace
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  0,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  0,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
674	[BUG]  [BUGGY]  final  int  read  =  read(realized,  0,  realized.length);  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  0,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  0,  realized.length);	  final    int    read    =    read(realized,    offset,    realized.length);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
675	[BUG]  [BUGGY]  InputStream  input  =  getArInput();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getArInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getArInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
676	[BUG]  [BUGGY]  InputStream  input  =  getInput().getChars(offset,  offset  +  realized.length);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput().getChars(offset,  offset  +  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput().getChars(offset,  offset  +  realized.length);	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
677	[BUG]  [BUGGY]  InputStream  input  =  getInput().getChars(offset,  offset  +  1);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  getInput().getChars(offset,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput().getChars(offset,  offset  +  1);	  InputStream    input    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
678	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  this.lastmodified);  [CE]  cannot  find  symbol  lastmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(expected,  realized,  this.lastmodified);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  this.lastmodified);	  final    int    read    =    read(expected,    realized,    filemode);    	non-compiled	[CE]  cannot  find  symbol  lastmodified	53	None	replace
679	[BUG]  [BUGGY]  final  int  read  =  read(decorated,  expected,  realized);  [CE]  cannot  find  symbol  decorated  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(decorated,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(decorated,  expected,  realized);	  final    int    read    =    read(expected,    expected);    	non-compiled	[CE]  cannot  find  symbol  decorated	16	None	replace
680	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  realized);  [CE]  cannot  find  symbol  filemode  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  realized);	  final    int    read    =    read(realized,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	17	None	replace
681	[BUG]  [BUGGY]  final  int  read  =  read(reposed);  [CE]  cannot  find  symbol  reposed  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reposed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reposed);	  final    int    read    =    read(needed);    	non-compiled	[CE]  cannot  find  symbol  reposed	74	None	replace
682	[BUG]  [BUGGY]  final  int  read  =  read(reposed,  expected.length);  [CE]  cannot  find  symbol  reposed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reposed,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reposed,  expected.length);	  final    int    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  reposed	4	None	replace
683	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
684	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
685	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
686	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
687	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(expected.length));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(expected.length));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(expected.length));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
688	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read  >=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
689	[BUG]  [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  input.read(realized);  int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int    read    =    input.read(realized);    int  read  =  input.read(realized);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	107	None	add
690	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  [CE]  ')'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  ')'  expected	10	None	replace
691	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  [CE]  ')'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  ')'  expected	10	None	replace
692	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected.length);  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected.length);  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected.length);  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	10	None	replace
693	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  else  {  throw  new  IOException( " ");  }  [CE]  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  	10	None	replace
694	[BUG]  [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  else  {  throw  new  IOException( " ");  }  [CE]  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected;  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  	10	None	replace
695	[BUG]  [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected.length);  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]                        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected.length);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized  ==  null)  {  final  int  read  =  read(expected);  final  int  read  =  read(expected.length);  }  else  {  throw  new  IOException( " ");  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected;    	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	10	None	replace
696	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  offset,  expected);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode,  offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  offset,  expected);	  final    int    read    =    read(realized,    offset,    expected);    	non-compiled	[CE]  cannot  find  symbol  filemode	119	None	replace
697	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  Realized);  [CE]  cannot  find  symbol  refigured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  Realized);	  final    int    read    =    read(expected,    Realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	83	None	replace
698	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  Realized);  [CE]  cannot  find  symbol  actualized  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  Realized);	  final    int    read    =    read(expected,    Realized);    	non-compiled	[CE]  cannot  find  symbol  actualized	83	None	replace
699	[BUG]  [BUGGY]  final  int  read  =  read(offset,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  Realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  Realized);	  final    int    read    =    read(expected,    Realized);    	non-compiled	[CE]  cannot  find  symbol  Realized	83	None	replace
700	[BUG]  [BUGGY]  final  byte  read  =  read(reformed,  expected.length);  [CE]  cannot  find  symbol  reformed  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(reformed,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(reformed,  expected.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  reformed	19	None	replace
701	[BUG]  [BUGGY]  final  byte  read  =  read(reposed,  expected.length);  [CE]  cannot  find  symbol  reposed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(reposed,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(reposed,  expected.length);	  final    byte    read    =    read(expected,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  reposed	19	None	replace
702	[BUG]  [BUGGY]  if(expected.length!=  realized.length)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(expected.length!=  realized.length)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(expected.length!=  realized.length)  {  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	101	1	replace
704	[BUG]  [BUGGY]  final  int  read  =  read(realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized);  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  final    int    read    =    read(expected);    final    int    read    =    read(expected);    if    (read!=    expected.length)    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	101	1	replace
705	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset  +  length);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  offset  +  length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset  +  length);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
706	[BUG]  [BUGGY]  final  int  read  =  readFully(refigured,  realized.length);  [CE]  cannot  find  symbol  refigured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(refigured,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(refigured,  realized.length);	  final    int    read    =    readFully(realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	48	None	replace
707	[BUG]  [BUGGY]  final  int  read  =  readBytes(reposed);  [CE]  cannot  find  symbol  reposed  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readBytes(reposed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(reposed);	  final    int    read    =    readBytes(needed);    	non-compiled	[CE]  cannot  find  symbol  reposed	94	None	replace
708	[BUG]  [BUGGY]  final  byte  read  =  read(decodeBase64Variants(expected,  expected.length));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(decodeBase64Variants(expected,  expected.length));  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(decodeBase64Variants(expected,  expected.length));	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
709	[BUG]  [BUGGY]  final  byte  read  =  read(actualized,  expected.length);  [CE]  cannot  find  symbol  actualized  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(actualized,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(actualized,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actualized	20	None	replace
710	[BUG]  [BUGGY]  final  byte  read  =  read(decodeBase64Variants(),  expected,  expected.length);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(decodeBase64Variants(),  expected,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(decodeBase64Variants(),  expected,  expected.length);	  final    byte    read    =    read(expected,    expected.length);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
711	[BUG]  [BUGGY]  int  read  =  written.read();  [CE]  cannot  find  symbol  written  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  written.read();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  written.read();	  int    read    =    pInput.read();    	non-compiled	[CE]  cannot  find  symbol  written	39	None	replace
712	[BUG]  [BUGGY]  final  int  read  =  readFully(reposed);  [CE]  cannot  find  symbol  reposed  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(reposed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(reposed);	  final    int    read    =    readFully(needed);    	non-compiled	[CE]  cannot  find  symbol  reposed	93	None	replace
713	[BUG]  [BUGGY]  final  int  read  =  readFilemode(offset,  expected);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(offset,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(offset,  expected);	  final    int    read    =    readFilemode(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
714	[BUG]  [BUGGY]  final  int  read  =  read(reposed,  offset  +  1);  [CE]  cannot  find  symbol  reposed  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reposed,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reposed,  offset  +  1);	  final    int    read    =    read(actualized,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  reposed	95	None	replace
715	[BUG]  [BUGGY]  if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
716	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset,  expected.length);  [CE]  cannot  find  symbol  actualized  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(actualized,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset,  expected.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actualized	31	None	replace
717	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  offset.length);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected,  offset.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  offset.length);	  final    int    read    =    read(realized,    offset,    expected.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	31	None	replace
718	[BUG]  [BUGGY]  final  int  read  =  readFilemode(reposed);  [CE]  cannot  find  symbol  reposed  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFilemode(reposed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(reposed);	  final    int    read    =    readFilemode(needed);    	non-compiled	[CE]  cannot  find  symbol  reposed	77	None	replace
719	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  expected);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[])  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  1,  expected);	  final    int    read    =    read(expected,    offset    +    1,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[])	97	None	replace
720	[BUG]  [BUGGY]  if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(read!=  expected)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
721	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  length);  [CE]  cannot  find  symbol  refigured  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset,  length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  length);	  final    int    read    =    read(expected,    realized,    length);    	non-compiled	[CE]  cannot  find  symbol  refigured	89	None	replace
722	[BUG]  [BUGGY]  final  int  read  =  read(offset,  realized,  length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(offset,  realized,  length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  realized,  length);	  final    int    read    =    read(expected,    realized,    length);    	non-compiled	[CE]  cannot  find  symbol  length	89	None	replace
723	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  long  read  =  read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  long  read  =  read(expected);	  final    byte    read    =    read(expected);    	compilable	  [FE]  IOException  	60	2	replace
724	[BUG]  [BUGGY]  final  long  read  =  read(expected);  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  long  read  =  read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  long  read  =  read(expected);	  final    byte    read    =    read(expected);    	compilable	  [FE]  IOException  	60	2	replace
725	[BUG]  [BUGGY]  final  char  read  =  read(expected);  [CE]  possible  loss  of  precision  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  char  read  =  read(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  char  read  =  read(expected);	  final    byte    read    =    read(expected);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
726	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  offset,  realized);  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  offset,  realized);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	33	None	replace
727	[BUG]  [BUGGY]  final  int  read  =  read(realized,  input,  offset,  realized);  [CE]  no  suitable  method  found  for  read(byte[],InputStream,long,byte[])  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  input,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  input,  offset,  realized);	  final    int    read    =    read(realized,    offset,    realized);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],InputStream,long,byte[])	33	None	replace
728	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(refigured,  expected.length,  realized.length);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IndexOutOfBoundsException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  final  int  read  =  read(refigured,  expected.length,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(realized,    expected.length,    realized.length);    final  int  read  =  read(refigured,  expected.length,  realized.length);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	122	None	add
729	[BUG]  [BUGGY]  InputStream  input  =  offset.readInput();  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  InputStream  input  =  offset.readInput();  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  offset.readInput();	  InputStream    input    =    filemode.readInput();    	non-compiled	[CE]  long  cannot  be  dereferenced	41	None	replace
730	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset  +  1,  realized.length  +  1);  [CE]  cannot  find  symbol  refigured  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset  +  1,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset  +  1,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  refigured	112	None	replace
731	[BUG]  [BUGGY]  final  int  read  =  read(remainded,  offset  +  2,  realized.length  +  1);  [CE]  cannot  find  symbol  remainded  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(remainded,  offset  +  2,  realized.length  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(remainded,  offset  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    2,    realized.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainded	112	None	replace
732	[BUG]  [BUGGY]  final  int  read  =  read(reformed,  realized);  [CE]  cannot  find  symbol  reformed  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reformed,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reformed,  realized);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  reformed	113	None	replace
733	[BUG]  [BUGGY]  final  int  read  =  read(resized,  expected);  [CE]  cannot  find  symbol  resized  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(resized,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(resized,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  resized	113	None	replace
734	[BUG]  [BUGGY]  final  int  read  =  read(reposed,  expected);  [CE]  cannot  find  symbol  reposed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reposed,  expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reposed,  expected);	  final    int    read    =    read(reformed,    expected);    	non-compiled	[CE]  cannot  find  symbol  reposed	113	None	replace
735	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[],long)  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  realized,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized,  offset  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[],long)	24	None	replace
736	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  realized  +  1);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  filemode,  realized  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  realized  +  1);	  final    int    read    =    read(realized,    offset,    realized    +    1);    	non-compiled	[CE]  cannot  find  symbol  filemode	24	None	replace
737	[BUG]  [BUGGY]  final  byte  read  =  read(realized.length,  offset);  [CE]  no  suitable  method  found  for  read(int,long)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized.length,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized.length,  offset);	  final    byte    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long)	3	None	replace
738	[BUG]  [BUGGY]  final  byte  read  =  read(realized,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  byte  read  =  read(realized,  offset  +  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized,  offset  +  1);	  final    byte    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	3	None	replace
739	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length  -  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length  -  1);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  1,  realized.length  -  1);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	25	None	replace
740	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset  +  1,  expected.length);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(refigured,  offset  +  1,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset  +  1,  expected.length);	  final    int    read    =    read(realized,    offset    +    1,    realized.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	25	None	replace
741	[BUG]  [BUGGY]  final  int  expected  =  read(realized);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  expected  =  read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  expected  =  read(realized);	  final    int    read    =    read(expected);    final    int    expected    =    read(expected);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	75	None	replace
742	[BUG]  [BUGGY]  final  int  expected  =  read(needed);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  expected  =  read(needed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  expected  =  read(needed);	  final    int    read    =    read(expected);    final    int    expected    =    read(expected);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	75	None	replace
743	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset,  saved);  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  offset,  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset,  saved);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  saved	45	None	replace
744	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset,  realized);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readFully(realized,  offset,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset,  realized);	  final    int    read    =    readFully(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
745	[BUG]  [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(realized!=    null)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "Failed    to    read    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
746	[BUG]  [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read();  final  int  read  =  read();  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read();    final  int  read  =  read();  if(read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	58	None	add
747	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
748	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  if(read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  if(read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  read  =  input.read();  if(read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
749	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  }  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  }  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  read  =  input.read();  }  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
750	[BUG]  [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  input.read();  final  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    input.read();    final  int  read  =  input.read();  if(read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	42	None	add
751	[BUG]  [BUGGY]  final  int  read  =  read(length,  expected,  realized);  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(length,  expected,  realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(length,  expected,  realized);	  final    int    read    =    read(width,    expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  length	55	None	replace
752	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  saved.length);  [CE]  cannot  find  symbol  saved  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  saved.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  saved.length);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  saved	111	None	replace
753	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  saved);  [CE]  cannot  find  symbol  saved  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset  +  saved);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  saved);	  final    int    read    =    read(realized,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  saved	111	None	replace
754	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(int,long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized.length,  offset,  realized.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  offset,  realized.length);	  final    int    read    =    read(realized.length,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long,int)	110	None	replace
755	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  offset,  expected.length);  [CE]  no  suitable  method  found  for  read(int,long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized.length,  offset,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  offset,  expected.length);	  final    int    read    =    read(realized.length,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long,int)	110	None	replace
756	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length+1;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  realized.length+1;	  final    int    read    =    read(0);    	compilable	  [FE]  IOException  	87	2	replace
757	[BUG]  [BUGGY]  final  int  read  =  realized.length+1;  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length+1;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length+1;	  final    int    read    =    read(0);    	compilable	  [FE]  IOException  	87	2	replace
758	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length  -  1;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  realized.length  -  1;	  final    int    read    =    read(0);    	compilable	  [FE]  IOException  	87	2	replace
759	[BUG]  [BUGGY]  final  int  read  =  realized.length  -  1;  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  realized.length  -  1;  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  realized.length  -  1;	  final    int    read    =    read(0);    	compilable	  [FE]  IOException  	87	2	replace
760	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  adjusted);  [CE]  cannot  find  symbol  adjusted  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  adjusted);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  adjusted);	  final    int    read    =    read(realized,    offset,    saved);    	non-compiled	[CE]  cannot  find  symbol  adjusted	118	None	replace
761	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  managed);  [CE]  cannot  find  symbol  managed  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  managed);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  managed);	  final    int    read    =    read(realized,    offset,    saved);    	non-compiled	[CE]  cannot  find  symbol  managed	118	None	replace
762	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  offset);  [CE]  no  suitable  method  found  for  read(byte[],long,long)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  offset,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  offset);	  final    int    read    =    read(realized,    filemode,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,long)	115	None	replace
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  0,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  0,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	compilable	  [FE]  AssertionFailedError  	117	1	replace
764	[BUG]  [BUGGY]  final  int  read  =  read(realized,  0,  expected.length);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  0,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  0,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	compilable	  [FE]  AssertionFailedError  	117	1	replace
765	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  expected.length,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	compilable	  [FE]  IndexOutOfBoundsException  	117	2	replace
766	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  expected.length);  [FE]  IndexOutOfBoundsException  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(realized,  expected.length,  expected.length);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length,  expected.length);	  final    int    read    =    read(refigured,    offset,    expected.length);    	compilable	  [FE]  IndexOutOfBoundsException  	117	2	replace
767	[BUG]  [BUGGY]  final  int  read  =  readUnreachable(expected);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readUnreachable(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readUnreachable(expected);	  final    int    read    =    readFully(expected);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
768	[BUG]  [BUGGY]  final  int  read  =  readInt(expected);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  readInt(expected);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readInt(expected);	  final    int    read    =    readFully(expected);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	int  read  =  read(realized);	  final    int    read    =    read(expected);    int    read    =    read(expected);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
770	[BUG]  [BUGGY]  int  read  =  read(realized);  [FE]  AssertionFailedError  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  int  read  =  read(realized);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  read(realized);	  final    int    read    =    read(expected);    int    read    =    read(expected);    	compilable	  [FE]  AssertionFailedError  	9	1	replace
771	[BUG]  [BUGGY]  final  int  read  =  read(reformed,  offset);  [CE]  cannot  find  symbol  reformed  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reformed,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reformed,  offset);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  reformed	30	None	replace
772	[BUG]  [BUGGY]  final  int  read  =  read(reposed,  offset);  [CE]  cannot  find  symbol  reposed  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];      [BUGGY]  final  int  read  =  read(reposed,  offset);  [BUGGY]      if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reposed,  offset);	  final    int    read    =    read(offset,    realized);    	non-compiled	[CE]  cannot  find  symbol  reposed	30	None	replace
