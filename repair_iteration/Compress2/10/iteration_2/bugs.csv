bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  read  =  read(redetect);  [CE]  cannot  find  symbol  redetect  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(redetect);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(redetect);	  final    int    read    =    read(refigured);    	non-compiled	[CE]  cannot  find  symbol  redetect	14	None	replace
2	[BUG]  [BUGGY]  final  int  read  =  read(metadata);  [CE]  cannot  find  symbol  metadata  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(metadata);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(metadata);	  final    int    read    =    read(refigured);    	non-compiled	[CE]  cannot  find  symbol  metadata	14	None	replace
3	[BUG]  [BUGGY]  final  byte  read  =  read(realized.length);  [CE]  no  suitable  method  found  for  read(int)  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  byte  read  =  read(realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(realized.length);	  final    int    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	7	None	replace
4	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized.length);	  final    int    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	7	None	replace
5	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  expected.length);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized.length,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  expected.length);	  final    int    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	7	None	replace
6	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized.length);	  final    int    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	7	None	replace
7	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
8	[BUG]  [BUGGY]  final  int  read  =  read(expected);  Final  int  read  =  read(expected);  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  Final  int  read  =  read(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    Final  int  read  =  read(expected);	  	non-compiled	[CE]  not  a  statement	1	None	add
9	[BUG]  [BUGGY]  final  int  read  =  read(expected);  int  read  =  read(expected);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  int  read  =  read(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    int  read  =  read(expected);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
10	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected;  [CE]  ')'  expected  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected;  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected;	  	non-compiled	[CE]  ')'  expected	1	None	add
11	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected));  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected));  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected));	  	non-compiled	[CE]  ';'  expected	1	None	add
12	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected,  expected);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected,  expected);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
13	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  byte  read  =  read(expected,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	8	None	replace
14	[BUG]  [BUGGY]  final  int  read  =  read(realized,  realized,  expected);  [CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  realized,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  realized,  expected);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],byte[])	8	None	replace
15	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected,  offset);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long)  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  expected,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected,  offset);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long)	8	None	replace
16	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected);  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	8	None	replace
17	[BUG]  [BUGGY]  final  int  read  =  read(realized,  realized);  [CE]  no  suitable  method  found  for  read(byte[],byte[])  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  realized);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[])	8	None	replace
18	[BUG]  [BUGGY]  final  int  read  =  read(expected,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  expected.length);	  final    int    read    =    read(realized,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	3	None	replace
19	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  byte  read  =  read(expected,  realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  realized.length);	  final    int    read    =    read(realized,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	3	None	replace
20	[BUG]  [BUGGY]  final  byte  read  =  read(expected,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  byte  read  =  read(expected,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected,  expected.length);	  final    int    read    =    read(realized,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	3	None	replace
21	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  realized);  [CE]  no  suitable  method  found  for  read(int,byte[])  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected.length,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected.length,  realized);	  final    int    read    =    read(realized,    expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,byte[])	3	None	replace
22	[BUG]  [BUGGY]  final  int  read  =  read(expected,  actual.length);  [CE]  cannot  find  symbol  actual  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  actual.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  actual.length);	  final    int    read    =    read(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  actual	3	None	replace
23	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  offset  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	13	None	replace
24	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  realized  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
25	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  1,  realized.length);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	13	None	replace
26	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  realized.length  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	13	None	replace
27	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  expected.length  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	13	None	replace
28	[BUG]  [BUGGY]  final  int  read  =  read(offset,  realized  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(offset,  realized  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  realized  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
29	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset  +  1);  [CE]  cannot  find  symbol  refigured  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(refigured,  offset  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  refigured	13	None	replace
30	[BUG]  [BUGGY]  final  int  read  =  read(offset,  realized);  [CE]  no  suitable  method  found  for  read(long,byte[])  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(offset,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(offset,  realized);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,byte[])	5	None	replace
31	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  expected.length);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	5	None	replace
32	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  offset);  [CE]  no  suitable  method  found  for  read(byte[],byte[],long)  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  realized,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  offset);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],byte[],long)	5	None	replace
33	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  realized);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[])  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  realized);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[])	5	None	replace
34	[BUG]  [BUGGY]  final  int  read  =  read(width,  realized,  offset);  [CE]  cannot  find  symbol  width  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(width,  realized,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  realized,  offset);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  width	5	None	replace
35	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  offset);  [CE]  no  suitable  method  found  for  read(byte[],int,long)  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  expected.length,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length,  offset);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int,long)	5	None	replace
36	[BUG]  [BUGGY]  InputStream  input  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  InputStream  input  =  getInputStream();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInputStream();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
37	[BUG]  [BUGGY]  [FE]  IOException  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  int  read  =  input.read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	int  read  =  input.read();	      	compilable	  [FE]  IOException  	9	2	replace
38	[BUG]  [BUGGY]  int  read  =  input.read();  [FE]  IOException  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  int  read  =  input.read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read();	      	compilable	  [FE]  IOException  	9	2	replace
39	[BUG]  [BUGGY]  int  read  =  pInput.read();  [CE]  cannot  find  symbol  pInput  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  int  read  =  pInput.read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  pInput.read();	      	non-compiled	[CE]  cannot  find  symbol  pInput	9	None	replace
40	[BUG]  [BUGGY]  InputStream  input  =  getInput();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  InputStream  input  =  getInput();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  getInput();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
41	[BUG]  [BUGGY]  InputStream  input  =  filemode.readInput();  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  InputStream  input  =  filemode.readInput();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  filemode.readInput();	      	non-compiled	[CE]  cannot  find  symbol  filemode	9	None	replace
42	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  input.read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  input.read();	      	compilable	  [FE]  IOException  	9	2	replace
43	[BUG]  [BUGGY]  final  int  read  =  input.read();  [FE]  IOException  [FE]                                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  input.read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  input.read();	      	compilable	  [FE]  IOException  	9	2	replace
44	[BUG]  [BUGGY]  InputStream  input  =  filemode.getInputStream();  [CE]  cannot  find  symbol  filemode  [FE]                                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  InputStream  input  =  filemode.getInputStream();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  filemode.getInputStream();	      	non-compiled	[CE]  cannot  find  symbol  filemode	9	None	replace
45	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  offset);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(realized,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  offset);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
46	[BUG]  [BUGGY]  final  int  read  =  readFully(expected);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
47	[BUG]  [BUGGY]  final  int  read  =  readFully(refigured);  [CE]  cannot  find  symbol  refigured  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(refigured);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(refigured);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	11	None	replace
48	[BUG]  [BUGGY]  final  int  read  =  readFully(realized.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized.length);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
49	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  expected);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(realized,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  expected);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
50	[BUG]  [BUGGY]  final  int  read  =  readFully(realized,  expected.length);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(realized,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(realized,  expected.length);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
51	[BUG]  [BUGGY]  final  byte  read  =  read(expected.length);  [CE]  no  suitable  method  found  for  read(int)  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  byte  read  =  read(expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected.length);	  final    int    read    =    read(expected.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	4	None	replace
52	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected.length);  [CE]  cannot  find  symbol  refigured  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(refigured,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected.length);	  final    int    read    =    read(expected.length);    	non-compiled	[CE]  cannot  find  symbol  refigured	4	None	replace
53	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  filemode);  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  realized,  filemode);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  filemode);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	6	None	replace
54	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(refigured,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	6	None	replace
55	[BUG]  [BUGGY]  final  int  read  =  read(width,  expected,  realized);  [CE]  cannot  find  symbol  width  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(width,  expected,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(width,  expected,  realized);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  width	6	None	replace
56	[BUG]  [BUGGY]  final  int  read  =  read(filemode,  expected,  realized);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(filemode,  expected,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(filemode,  expected,  realized);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  filemode	6	None	replace
57	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected);  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected);	  final    int    read    =    read(expected);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
58	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read();	  final    int    read    =    read(expected);    	compilable	  [FE]  IOException  	2	2	replace
59	[BUG]  [BUGGY]  final  int  read  =  read();  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read();	  final    int    read    =    read(expected);    	compilable	  [FE]  IOException  	2	2	replace
60	[BUG]  [BUGGY]  final  byte  read  =  read(expected);  [CE]  possible  loss  of  precision  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  byte  read  =  read(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  byte  read  =  read(expected);	  final    int    read    =    read(expected);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
61	[BUG]  [BUGGY]  final  int  read  =  readAndClose(expected);  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readAndClose(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readAndClose(expected);	  final    int    read    =    read(expected);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
62	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  offset);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(realized,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  offset);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
63	[BUG]  [BUGGY]  final  int  read  =  readBytes(refigured);  [CE]  cannot  find  symbol  refigured  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(refigured);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(refigured);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	10	None	replace
64	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized.length);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
65	[BUG]  [BUGGY]  final  int  read  =  readBytes(expected,  realized);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(expected,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(expected,  realized);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
66	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  expected);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(realized,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  expected);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
67	[BUG]  [BUGGY]  final  int  read  =  readBytes(realized,  expected.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(realized,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(realized,  expected.length);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
68	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  offset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(realized,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  offset);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
69	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized.length);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
70	[BUG]  [BUGGY]  final  int  read  =  readFilemode(refigured);  [CE]  cannot  find  symbol  refigured  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(refigured);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(refigured);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol  refigured	12	None	replace
71	[BUG]  [BUGGY]  final  int  read  =  readFilemode(offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(offset);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
72	[BUG]  [BUGGY]  final  int  read  =  readFilemode(expected);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(expected);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
73	[BUG]  [BUGGY]  final  int  read  =  readFilemode(realized,  expected);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(realized,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(realized,  expected);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
74	[BUG]  [BUGGY]  final  int  read  =  read(needed);  [CE]  cannot  find  symbol  needed  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(needed);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed);	  final    int    read    =    read(refigured);    	non-compiled	[CE]  cannot  find  symbol  needed	14	None	replace
75	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  expected  =  read(expected);  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  expected  =  read(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  expected  =  read(expected);	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	1	None	add
76	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  reading  =  read(expected);  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  reading  =  read(expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  reading  =  read(expected);	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
77	[BUG]  [BUGGY]  final  int  read  =  readFilemode(needed);  [CE]  cannot  find  symbol  needed  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFilemode(needed);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFilemode(needed);	  final    int    read    =    readFilemode(realized);    	non-compiled	[CE]  cannot  find  symbol  needed	12	None	replace
78	[BUG]  [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	if(realized!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  final  int  read  =  read(expected,  Realized);  [CE]  cannot  find  symbol  Realized  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  Realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  Realized);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  Realized	8	None	replace
84	[BUG]  [BUGGY]  final  int  read  =  read(expected,  true);  [CE]  no  suitable  method  found  for  read(byte[],boolean)  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  true);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  true);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],boolean)	8	None	replace
85	[BUG]  [BUGGY]  final  int  read  =  read(expected,  shared);  [CE]  cannot  find  symbol  shared  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  shared);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  shared);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  shared	8	None	replace
86	[BUG]  [BUGGY]  final  int  read  =  read(expected,  imagined);  [CE]  cannot  find  symbol  imagined  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  imagined);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  imagined);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  imagined	8	None	replace
87	[BUG]  [BUGGY]  final  int  read  =  read(0);  [CE]  no  suitable  method  found  for  read(int)  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(0);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(0);	  final    int    read    =    read(expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	2	None	replace
88	[BUG]  [BUGGY]  final  int  read  =  read(needed,  realized);  [CE]  cannot  find  symbol  needed  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(needed,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(needed,  realized);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  needed	6	None	replace
89	[BUG]  [BUGGY]  final  int  read  =  read(expected,  realized,  length);  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  realized,  length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  realized,  length);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
90	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset,  realized);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[])  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  offset,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset,  realized);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[])	5	None	replace
91	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset);  [CE]  no  suitable  method  found  for  read(byte[],long)  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long)	5	None	replace
92	[BUG]  [BUGGY]  final  int  read  =  readFully(expected,  realized);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(expected,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected,  realized);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
93	[BUG]  [BUGGY]  final  int  read  =  readFully(needed);  [CE]  cannot  find  symbol  needed  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(needed);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(needed);	  final    int    read    =    readFully(realized);    	non-compiled	[CE]  cannot  find  symbol  needed	11	None	replace
94	[BUG]  [BUGGY]  final  int  read  =  readBytes(needed);  [CE]  cannot  find  symbol  needed  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(needed);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(needed);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol  needed	10	None	replace
95	[BUG]  [BUGGY]  final  int  read  =  read(actualized,  offset  +  1);  [CE]  cannot  find  symbol  actualized  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(actualized,  offset  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(actualized,  offset  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  actualized	13	None	replace
96	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  expected.length);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset  +  1,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  1,  expected.length);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	13	None	replace
97	[BUG]  [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[])  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  offset  +  1,  realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  offset  +  1,  realized);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[])	13	None	replace
98	[BUG]  [BUGGY]  final  int  read  =  read(expected,  imagined.length);  [CE]  cannot  find  symbol  imagined  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected,  imagined.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(expected,  imagined.length);	  final    int    read    =    read(realized,    expected.length);    	non-compiled	[CE]  cannot  find  symbol  imagined	3	None	replace
99	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
100	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);  if  (read  >=  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
101	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
102	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);  if  (read!=  expected)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
103	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);  if  (read  ==  expected.length)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
104	[BUG]  [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  read  is  already  defined  in  method  getNextArEntry()  [FE]              IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(expected);  final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final    int    read    =    read(expected);    final  int  read  =  read(expected);  if  (read!=  expected.length)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  variable  read  is  already  defined  in  method  getNextArEntry()	1	None	add
105	[BUG]  [BUGGY]  InputStream  input  =  this.input.readInput();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  InputStream  input  =  this.input.readInput();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.input.readInput();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
106	[BUG]  [BUGGY]  InputStream  input  =  this.getInputStream();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  InputStream  input  =  this.getInputStream();  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	InputStream  input  =  this.getInputStream();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  int  read  =  input.read(realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	int  read  =  input.read(realized);	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
108	[BUG]  [BUGGY]  int  read  =  input.read(realized);  [FE]  AssertionFailedError  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  int  read  =  input.read(realized);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  input.read(realized);	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
109	[BUG]  [BUGGY]  int  read  =  offset  +  realized.length;  [CE]  possible  loss  of  precision  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  int  read  =  offset  +  realized.length;  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	int  read  =  offset  +  realized.length;	      	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
110	[BUG]  [BUGGY]  final  int  read  =  read(realized.length,  offset);  [CE]  no  suitable  method  found  for  read(int,long)  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized.length,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized.length,  offset);	  final    int    read    =    read(realized.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long)	7	None	replace
111	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  length);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset  +  length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  length);	  final    int    read    =    read(realized.length);    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
112	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset  +  2,  realized.length  +  1);  [CE]  no  suitable  method  found  for  read(byte[],long,int)  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset  +  2,  realized.length  +  1);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset  +  2,  realized.length  +  1);	  final    int    read    =    read(realized,    offset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,int)	13	None	replace
113	[BUG]  [BUGGY]  final  int  read  =  read(reformed,  expected);  [CE]  cannot  find  symbol  reformed  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(reformed,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(reformed,  expected);	  final    int    read    =    read(expected,    realized);    	non-compiled	[CE]  cannot  find  symbol  reformed	6	None	replace
114	[BUG]  [BUGGY]  final  int  read  =  readFully(expected.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readFully(expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readFully(expected.length);	  final    int    read    =    read(expected.length);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
115	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  offset);  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  filemode,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  offset);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  filemode	5	None	replace
116	[BUG]  [BUGGY]  final  int  read  =  read(realized,  input,  offset);  [CE]  no  suitable  method  found  for  read(byte[],InputStream,long)  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  input,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  input,  offset);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],InputStream,long)	5	None	replace
117	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  offset,  expected.length);  [CE]  cannot  find  symbol  refigured  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(refigured,  offset,  expected.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  offset,  expected.length);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  refigured	5	None	replace
118	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  saved);  [CE]  cannot  find  symbol  saved  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  saved);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  saved);	  final    int    read    =    read(realized,    offset);    	non-compiled	[CE]  cannot  find  symbol  saved	5	None	replace
119	[BUG]  [BUGGY]  final  int  read  =  read(realized,  offset,  expected);  [CE]  no  suitable  method  found  for  read(byte[],long,byte[])  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  offset,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  offset,  expected);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],long,byte[])	8	None	replace
120	[BUG]  [BUGGY]  final  int  read  =  read(realized,  filemode,  expected);  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  filemode,  expected);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  filemode,  expected);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  filemode	8	None	replace
121	[BUG]  [BUGGY]  final  int  read  =  read(refigured,  expected,  offset);  [CE]  cannot  find  symbol  refigured  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(refigured,  expected,  offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(refigured,  expected,  offset);	  final    int    read    =    read(realized,    expected);    	non-compiled	[CE]  cannot  find  symbol  refigured	8	None	replace
122	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	final  int  read  =  read(realized,  expected.length,  realized.length);	  final    int    read    =    read(realized,    expected.length);    	compilable	  [FE]  IndexOutOfBoundsException  	3	2	replace
123	[BUG]  [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  [FE]  IndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  read(realized,  expected.length,  realized.length);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  read(realized,  expected.length,  realized.length);	  final    int    read    =    read(realized,    expected.length);    	compilable	  [FE]  IndexOutOfBoundsException  	3	2	replace
124	[BUG]  [BUGGY]  final  int  read  =  readBytes(offset);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];    [BUGGY]  final  int  read  =  readBytes(offset);  [BUGGY]    if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	final  int  read  =  readBytes(offset);	  final    int    read    =    readBytes(realized);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
