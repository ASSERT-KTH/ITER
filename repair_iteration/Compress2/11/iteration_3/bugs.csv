bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	30	None	replace
2	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	30	None	replace
4	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
5	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
6	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
7	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
8	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	31	None	replace
10	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
11	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
12	[BUG]  [BUGGY]  when  (read  <  expected.length)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  when  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	when  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    when    (read    <    expected.length)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	33	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
16	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	33	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  &&  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  &&  read  >  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
19	[BUG]  [BUGGY]  if(read  <  expected.length  &&  read  >  realized.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  &&  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  &&  read  >  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
20	[BUG]  [BUGGY]  [FE]  IOException  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >=  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read  >=  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  IOException  	2	2	replace
21	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >=  realized.length)  {  [FE]  IOException  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >=  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >=  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  IOException  	2	2	replace
22	[BUG]  [BUGGY]  [FE]  IOException  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  ==  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read  ==  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  IOException  	2	2	replace
23	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  ==  realized.length)  {  [FE]  IOException  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  ==  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  ==  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  IOException  	2	2	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  <  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read  <  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
25	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  <  realized.length)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  <  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  <  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read!=  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read!=  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
27	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read!=  realized.length)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read!=  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read!=  realized.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
28	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  filemode!=  null)  {  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  filemode!=  null)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  realized.length  ||  filemode!=  null)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	2	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	28	None	replace
30	[BUG]  [BUGGY]  final  int  saved  =  read(expected.length);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(expected.length);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
31	[BUG]  [BUGGY]  final  int  saved  =  read(realized);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(realized);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
32	[BUG]  [BUGGY]  final  int  saved  =  read(expected);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(expected);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(expected);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
33	[BUG]  [BUGGY]  final  int  saved  =  read(expected,  read);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(expected,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(expected,  read);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
34	[BUG]  [BUGGY]  final  int  saved  =  read(refigured);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(refigured);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(refigured);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
35	[BUG]  [BUGGY]  final  int  saved  =  read(realized,  read);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(realized,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(realized,  read);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
36	[BUG]  [BUGGY]  final  int  saved  =  read(realized.length);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(realized.length);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  &&  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  &&  read  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
38	[BUG]  [BUGGY]  if(read  <  expected.length  &&  read  >  0)  {  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  &&  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  &&  read  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  ==  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read  ==  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
40	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  ==  0)  {  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  ==  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  ==  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
41	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  realized.length  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  realized.length  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
42	[BUG]  [BUGGY]  if(read  <  expected.length  ||  realized.length  >  0)  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  realized.length  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  realized.length  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
43	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read!=  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read!=  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
44	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read!=  0)  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read!=  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read!=  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
45	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >=  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read  >=  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
46	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >=  0)  {  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >=  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >=  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
47	[BUG]  [BUGGY]  if(read  <  expected.length  ||  realized  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  realized  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  realized  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
48	[BUG]  [BUGGY]  int  expected  =  read(expected.length);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(expected.length);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
49	[BUG]  [BUGGY]  int  expected  =  read(realized);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(realized);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
50	[BUG]  [BUGGY]  int  expected  =  read(expected);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(expected);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(expected);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
51	[BUG]  [BUGGY]  int  expected  =  read(expected,  read);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(expected,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(expected,  read);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
52	[BUG]  [BUGGY]  int  expected  =  read(read,  realized.length);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(read,  realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(read,  realized.length);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
53	[BUG]  [BUGGY]  int  expected  =  read(refigured);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(refigured);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(refigured);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
54	[BUG]  [BUGGY]  If  (read  <  expected.length)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  If  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	If  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    If    (read    <    expected.length)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
55	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(read);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getInputStream(read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getInputStream(read);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
56	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(),  read);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getInputStream(),  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getInputStream(),  read);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  ';'  expected	18	None	replace
57	[BUG]  [BUGGY]  InputStream  input  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getOutputStream();  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getOutputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
58	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getInputStream(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getInputStream(offset);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  InputStream  input  =  getInputStream()  +  read;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getInputStream()  +  read;  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getInputStream()  +  read;	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(),  read;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getInputStream(),  read;  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getInputStream(),  read;	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	41	None	replace
63	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
64	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
65	[BUG]  [BUGGY]  [FE]  IOException  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	compilable	  [FE]  IOException  	41	2	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [FE]  IOException  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	compilable	  [FE]  IOException  	41	2	replace
67	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	40	2	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	40	2	replace
69	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
70	[BUG]  [BUGGY]  [FE]  IOException  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	40	2	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [FE]  IOException  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	40	2	replace
72	[BUG]  [BUGGY]  [FE]  IOException  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	40	2	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	40	2	replace
74	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
75	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	40	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
77	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  cannot  find  symbol  refigured  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
79	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
80	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  >  realized.length)  {	  if(read    >    expected.length)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
82	[BUG]  [BUGGY]  if(read  >  realized.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >  realized.length)  {	  if(read    >    expected.length)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
83	[BUG]  [BUGGY]  if(read  <  expected.length  ||  realized.length  >  read.length)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  realized.length  >  read.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  realized.length  >  read.length)  {	  if(read    >    expected.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
84	[BUG]  [BUGGY]  final  int  expected.length  =  read(realized);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(realized);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
85	[BUG]  [BUGGY]  final  int  expected.length  =  read(expected.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(expected.length);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
86	[BUG]  [BUGGY]  final  int  expected.length  =  read(refigured);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(refigured);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(refigured);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
87	[BUG]  [BUGGY]  final  int  expected.length  =  read(read,  realized.length);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(read,  realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(read,  realized.length);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
88	[BUG]  [BUGGY]  final  int  expected.length  =  read(realized,  read);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(realized,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(realized,  read);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
89	[BUG]  [BUGGY]  final  int  expected.length  =  read(offset);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(offset);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
90	[BUG]  [BUGGY]  final  int  expected.length  =  read(realized.length);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(realized.length);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
91	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  <  read.length)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  <  read.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  <  read.length)  {	  if    (read    <    expected.length)    {    if    (read    <    expected.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
92	[BUG]  [BUGGY]  final  int  expected  =  read(expected.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(expected.length);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  final  int  expected  =  read(realized);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(realized);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  final  int  expected  =  read(expected,  read);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(expected,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(expected,  read);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  final  int  expected  =  read(expected);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(expected);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(expected);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  final  int  expected  =  read(refigured);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(refigured);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(refigured);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
97	[BUG]  [BUGGY]  final  int  expected  =  read(read,  realized);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(read,  realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(read,  realized);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
98	[BUG]  [BUGGY]  final  int  expected  =  read(read,  realized.length);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(read,  realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(read,  realized.length);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
99	[BUG]  [BUGGY]  final  int  offset  =  read(realized);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(realized);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
100	[BUG]  [BUGGY]  final  int  offset  =  read(expected.length);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(expected.length);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
101	[BUG]  [BUGGY]  final  int  offset  =  read(expected);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(expected);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(expected);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
102	[BUG]  [BUGGY]  final  int  offset  =  read(expected,  read);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(expected,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(expected,  read);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
103	[BUG]  [BUGGY]  final  int  offset  =  read(realized.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(realized.length);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
104	[BUG]  [BUGGY]  final  int  offset  =  read(refigured);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(refigured);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(refigured);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
105	[BUG]  [BUGGY]  final  int  offset  =  read(realized,  read);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(realized,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(realized,  read);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  cannot  find  symbol  refigured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	42	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	42	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
109	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	39	2	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	39	2	replace
111	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	39	2	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	39	2	replace
113	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
114	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  <  expected.length  ||  read  >  realized.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  <  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    if(read  <  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
115	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  If(read  <  expected.length  ||  read  >  realized.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  If(read  <  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    If(read  <  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
116	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  >=  expected.length  ||  read  >  realized.length)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  >=  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    if(read  >=  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
117	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  <  required.length  ||  read  >  realized.length)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  <  required.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    if(read  <  required.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
118	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  when(read  <  expected.length  ||  read  >  realized.length)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  when(read  <  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    when(read  <  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
119	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  <  expected.length  ||  read  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  <  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    if(read  <  expected.length  ||  read  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
120	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  If(read  <  expected.length  ||  read  >  0)  {  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  If(read  <  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    If(read  <  expected.length  ||  read  >  0)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
121	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  >=  expected.length  ||  read  >  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  >=  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    if(read  >=  expected.length  ||  read  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
122	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  <  required.length  ||  read  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  <  required.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    if(read  <  required.length  ||  read  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
123	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  >  expected.length  ||  read  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  if(read  >  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    if(read  >  expected.length  ||  read  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
124	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  while(read  <  expected.length  ||  read  >  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  while(read  <  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    while(read  <  expected.length  ||  read  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
125	[BUG]  [BUGGY]  if(read  <  expected.length)  {  (read  >  expected.length)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  (read  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  (read  >  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
126	[BUG]  [BUGGY]  if(read  <  expected.length)  {  (read  +  expected.length)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  (read  +  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  (read  +  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
127	[BUG]  [BUGGY]  if(read  ==  expected.length)  {  (read  <  expected.length)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  ==  expected.length)  {  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  ==  expected.length)  {  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
128	[BUG]  [BUGGY]  if(read  >=  expected.length)  {  (read  <  expected.length)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >=  expected.length)  {  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >=  expected.length)  {  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
129	[BUG]  [BUGGY]  if(read!=  expected.length)  {  (read  <  expected.length)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
130	[BUG]  [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    if(read  >  expected.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
131	[BUG]  [BUGGY]  if(read  >  expected.length)  {  If(read  >  expected.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  If(read  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    If(read  >  expected.length)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
132	[BUG]  [BUGGY]  if(read  >  expected.length)  {  if(read  >  anticipated.length)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  if(read  >  anticipated.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    if(read  >  anticipated.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
133	[BUG]  [BUGGY]  if(read  >  expected.length)  {  while(read  >  expected.length)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  while(read  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    while(read  >  expected.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
134	[BUG]  [BUGGY]  if(read  >  expected.length)  {  (read  >  expected.length)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  (read  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    (read  >  expected.length)  {	  	non-compiled	[CE]  not  a  statement	35	None	add
135	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
136	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
137	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
138	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f  [CE]  unclosed  string  literal  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "f	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
139	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
140	[BUG]  [BUGGY]  final  int  read  =  read(realized);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(realized);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
141	[BUG]  [BUGGY]  final  int  read  =  read(expected.length);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(expected.length);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
142	[BUG]  [BUGGY]  final  int  read  =  read(expected);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(expected);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(expected);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
143	[BUG]  [BUGGY]  final  int  read  =  read(realized.length);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(realized.length);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
144	[BUG]  [BUGGY]  final  int  read  =  read(realized,  read);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(realized,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(realized,  read);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
145	[BUG]  [BUGGY]  final  int  read  =  read(expected,  read);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(expected,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(expected,  read);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
146	[BUG]  [BUGGY]  final  int  read  =  read(refigured);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(refigured);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(refigured);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  final  int  expected  =  read(expected,  offset);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(expected,  offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(expected,  offset);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
148	[BUG]  [BUGGY]  final  int  expected  =  read(read,  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(read,  offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(read,  offset);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
149	[BUG]  [BUGGY]  final  int  expected  =  read(expected.length,  read);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(expected.length,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(expected.length,  read);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
150	[BUG]  [BUGGY]  final  int  expected  =  read(0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(0);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(0);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
151	[BUG]  [BUGGY]  final  int  expected.length  =  read(expected);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(expected);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(expected);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
152	[BUG]  [BUGGY]  final  int  expected.length  =  read(needed);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(needed);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(needed);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
153	[BUG]  [BUGGY]  final  int  expected.length  =  read(expected,  read);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(expected,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(expected,  read);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
154	[BUG]  [BUGGY]  final  int  expected.length  =  read(read,  offset);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(read,  offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(read,  offset);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length  ||  read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  >  expected.length  ||  read  <  expected.length)  {	  if(read    >    expected.length)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
156	[BUG]  [BUGGY]  if(read  >  expected.length  ||  read  <  expected.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length  ||  read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >  expected.length  ||  read  <  expected.length)  {	  if(read    >    expected.length)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
157	[BUG]  [BUGGY]  [FE]  IOException  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length  -  1)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  >  expected.length  -  1)  {	  if(read    >    expected.length)    {    	compilable	  [FE]  IOException  	36	2	replace
158	[BUG]  [BUGGY]  if(read  >  expected.length  -  1)  {  [FE]  IOException  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length  -  1)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >  expected.length  -  1)  {	  if(read    >    expected.length)    {    	compilable	  [FE]  IOException  	36	2	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
162	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
163	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
164	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
165	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
166	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  }  [CE]  cannot  find  symbol  refigured  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
167	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
168	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	compilable	  [FE]  AssertionFailedError  	43	1	replace
170	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	compilable	  [FE]  AssertionFailedError  	43	1	replace
171	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  }  [CE]  cannot  find  symbol  refigured  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	42	None	replace
172	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
173	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  >  expected.length  ||  read  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
174	[BUG]  [BUGGY]  if(read  >  expected.length  ||  read  >  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >  expected.length  ||  read  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
175	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >=  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  >=  expected.length  ||  read  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
176	[BUG]  [BUGGY]  if(read  >=  expected.length  ||  read  >  0)  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >=  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >=  expected.length  ||  read  >  0)  {	  if(read    <    expected.length    ||    read    >    0)    {    	compilable	  [FE]  IOException  	38	2	replace
177	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	41	None	replace
178	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
179	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
180	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	30	None	replace
181	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
182	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getNextArEntry();  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getNextArEntry();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
183	[BUG]  [BUGGY]  InputStream  input  =  getArInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getArInputStream();  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getArInputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
184	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	28	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
186	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	33	None	replace
187	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	2	None	replace
188	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  filemode  ==  null)  {  [CE]  cannot  find  symbol  filemode  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  filemode  ==  null)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  realized.length  ||  filemode  ==  null)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	2	None	replace
189	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  saved.length)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  saved.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  saved.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	non-compiled	[CE]  cannot  find  symbol  saved	2	None	replace
190	[BUG]  [BUGGY]  final  int  read  =  read(needed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(needed);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(needed);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
191	[BUG]  [BUGGY]  final  int  read  =  read(expected.length,  read);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(expected.length,  read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(expected.length,  read);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
192	[BUG]  [BUGGY]  final  int  read  =  read(read,  expected.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(read,  expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(read,  expected.length);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  if(read  ==  expected.length)  {  If  (read  <  expected.length)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  ==  expected.length)  {  If  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  ==  expected.length)  {  If  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    If    (read    <    expected.length)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
194	[BUG]  [BUGGY]  if(read!=  expected.length)  {  If  (read  <  expected.length)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  If  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  If  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    If    (read    <    expected.length)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
195	[BUG]  [BUGGY]  if(read  >=  expected.length)  {  If  (read  <  expected.length)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >=  expected.length)  {  If  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >=  expected.length)  {  If  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    If    (read    <    expected.length)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
196	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  for(read  <  expected.length  ||  read  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  0)  {  for(read  <  expected.length  ||  read  >  0)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    0)    {    for(read  <  expected.length  ||  read  >  0)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	add
197	[BUG]  [BUGGY]  final  int  saved  =  read(read,  expected.length);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(read,  expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(read,  expected.length);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
198	[BUG]  [BUGGY]  final  int  saved  =  read(needed);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(needed);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(needed);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
199	[BUG]  [BUGGY]  final  int  offset  =  read(read,  expected.length);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(read,  expected.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(read,  expected.length);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
200	[BUG]  [BUGGY]  final  int  offset  =  read(needed);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(needed);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(needed);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
201	[BUG]  [BUGGY]  if(read  >  expected.length)  {  int  read  =  read(expected.length);  if(read  >  expected.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  int  read  =  read(expected.length);  if(read  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    int  read  =  read(expected.length);  if(read  >  expected.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
202	[BUG]  [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  throw  new  IOException( "failed  to  read  header   ");  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  throw  new  IOException( "failed  to  read  header   ");  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    if(read  >  expected.length)  throw  new  IOException( "failed  to  read  header   ");	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
203	[BUG]  [BUGGY]  if(read  >  expected.length)  {  ((  read  >  expected.length)  ||(read  >  expected.length))  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  ((  read  >  expected.length)  ||(read  >  expected.length))  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    ((  read  >  expected.length)  ||(read  >  expected.length))  {	  	non-compiled	[CE]  not  a  statement	35	None	add
204	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  while(read  <  expected.length  ||  read  >  realized.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  while(read  <  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    while(read  <  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
205	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  for(read  <  expected.length  ||  read  >  realized.length)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  for(read  <  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    for(read  <  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	1	None	add
206	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	32	None	replace
207	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  unclosed  string  literal	32	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
209	[BUG]  [BUGGY]  int  expected  =  read(read,  offset);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(read,  offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(read,  offset);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
210	[BUG]  [BUGGY]  byte  expected  =  read(read);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  byte  expected  =  read(read);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	byte  expected  =  read(read);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
211	[BUG]  [BUGGY]  int  expected  =  read(expected,  offset);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(expected,  offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(expected,  offset);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
212	[BUG]  [BUGGY]  final  int  saved  =  read(read,  realized.length);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(read,  realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(read,  realized.length);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
213	[BUG]  [BUGGY]  final  int  saved  =  read(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(offset);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
214	[BUG]  [BUGGY]  final  int  saved  =  read(read,  realized);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  saved  =  read(read,  realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  saved  =  read(read,  realized);	  final    int    saved    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
215	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	39	1	replace
217	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	39	1	replace
218	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  unclosed  string  literal	39	None	replace
219	[BUG]  [BUGGY]  InputStream  input  =  getInputStream().readLine();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  InputStream  input  =  getInputStream().readLine();  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	InputStream  input  =  getInputStream().readLine();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
220	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	29	None	replace
221	[BUG]  [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	29	None	replace
222	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
223	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
224	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  }  [CE]  cannot  find  symbol  refigured  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	42	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  offset  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read  <  expected.length  ||  read  >  realized.length  ||  offset  >  expected.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
226	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  offset  >  expected.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  offset  >  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  realized.length  ||  offset  >  expected.length)  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
227	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.FLUSH_PASSED_ARRAY))  {  [CE]  cannot  find  symbol  Feature  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.FLUSH_PASSED_ARRAY))  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.FLUSH_PASSED_ARRAY))  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	2	None	replace
228	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  cannot  find  symbol  Feature  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  realized.length  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  if(read    <    expected.length    ||    read    >    realized.length)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	2	None	replace
229	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  >  expected.length  ||  read  >  realized.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  realized.length)  {  if(read  >  expected.length  ||  read  >  realized.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    <    expected.length    ||    read    >    realized.length)    {    if(read  >  expected.length  ||  read  >  realized.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
230	[BUG]  [BUGGY]  if(read  <  =  expected.length)  {  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  =  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  =  expected.length)  {	  if    (read    >=    expected.length)    {    if    (read    >=    expected.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
231	[BUG]  [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	32	None	replace
232	[BUG]  [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	32	None	replace
233	[BUG]  [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  <  throw  new  IOException( "failed  to  read  header   ");  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  <  throw  new  IOException( "failed  to  read  header   ");  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    if(read  >  expected.length)  <  throw  new  IOException( "failed  to  read  header   ");	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	35	None	add
234	[BUG]  [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  if(read  >  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read    >    expected.length)    {    if(read  >  expected.length)  {  throw  new  IOException( "failed  to  read  header   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
235	[BUG]  [BUGGY]  int  expected  =  read(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(offset);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
236	[BUG]  [BUGGY]  int  expected  =  read(read,  realized);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  int  expected  =  read(read,  realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	int  expected  =  read(read,  realized);	  int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
237	[BUG]  [BUGGY]  final  int  offset  =  read(read,  realized.length);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(read,  realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(read,  realized.length);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
238	[BUG]  [BUGGY]  final  int  offset  =  read(offset);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(offset);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
239	[BUG]  [BUGGY]  final  int  offset  =  read(read,  realized);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  offset  =  read(read,  realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  offset  =  read(read,  realized);	  final    int    offset    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
240	[BUG]  [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
241	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "failed    to    read    header       "    +    new    String(read));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	34	None	replace
242	[BUG]  [BUGGY]  final  int  read  =  read(offset);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(offset);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
243	[BUG]  [BUGGY]  final  int  read  =  read(read,  realized.length);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(read,  realized.length);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(read,  realized.length);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
244	[BUG]  [BUGGY]  final  int  read  =  read(read,  realized);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  read  =  read(read,  realized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  read  =  read(read,  realized);	  final    int    read    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
245	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
246	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	41	None	replace
247	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
248	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
249	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  }  [CE]  cannot  find  symbol  refigured  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(refigured));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(refigured));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
250	[BUG]  [BUGGY]  final  int  expected.length  =  read(actualized);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected.length  =  read(actualized);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected.length  =  read(actualized);	  final    int    expected.length    =    read(read);    	non-compiled	[CE]  ';'  expected	17	None	replace
251	[BUG]  [BUGGY]  if(read  <  expected.length)  {  (read  >=  expected.length)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length)  {  (read  >=  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length)  {  (read  >=  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
252	[BUG]  [BUGGY]  if(read  >  expected.length)  {  (read  <  expected.length)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  >  expected.length)  {  (read  <  expected.length)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  >  expected.length)  {  (read  <  expected.length)  {	  if    (read    <    expected.length)    {    (read    <    expected.length)    {    	non-compiled	[CE]  not  a  statement	7	None	replace
253	[BUG]  [BUGGY]  final  int  expected  =  read(offset);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  final  int  expected  =  read(offset);  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	final  int  expected  =  read(offset);	  final    int    expected    =    read(read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
254	[BUG]  [BUGGY]  if(read  <  expected.length  ||  read  >  MAX_ARRAY)  {  [CE]  cannot  find  symbol  MAX_ARRAY  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read  <  expected.length  ||  read  >  MAX_ARRAY)  {  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read  <  expected.length  ||  read  >  MAX_ARRAY)  {	  if(read    <    expected.length    ||    read    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_ARRAY	38	None	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
256	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	40	1	replace
257	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   ");  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
258	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
259	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }  [BUGGY]      throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(read));  }  }	  if(read    <    expected.length)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	30	None	replace
