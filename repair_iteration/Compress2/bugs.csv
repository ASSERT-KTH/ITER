bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   if (input.available() == 0) { [BUGGY] return null; [BUGGY] } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   if (input.available() == 0) { [BUGGY] [BUGGY] return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	
3	[BUG] [BUGGY] public ArArchiveInputStream( final InputStream pInput ) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public ArArchiveInputStream( final InputStream pInput ) { [BUGGY] input = pInput; closed = false; } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	47	47	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public ArArchiveInputStream( final InputStream pInput ) { input = pInput; closed = false; } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	47	47	1	add	
5	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final InputStream input; [CLASS] ArArchiveInputStream  [VARIABLES] 	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	36	36	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final InputStream input; [CLASS] ArArchiveInputStream  [VARIABLES] 	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	36	36	1	add	
7	[BUG] [BUGGY] input = pInput; [FE] AssertionFailedError [CONTEXT] public ArArchiveInputStream( final InputStream pInput ) { [BUGGY] input = pInput; [BUGGY] closed = false; } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	48	48	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveInputStream( final InputStream pInput ) { [BUGGY] [BUGGY] input = pInput; closed = false; } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	48	48	1	add	
9	[BUG] [BUGGY] closed = false; [FE] AssertionFailedError [CONTEXT] public ArArchiveInputStream( final InputStream pInput ) { input = pInput; [BUGGY] closed = false; [BUGGY] } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	49	49	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveInputStream( final InputStream pInput ) { input = pInput; [BUGGY] [BUGGY] closed = false; } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	49	49	1	add	
11	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public ArArchiveInputStream( final InputStream pInput ) { input = pInput; closed = false; [BUGGY] } [BUGGY]  [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	50	50	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveInputStream( final InputStream pInput ) { input = pInput; closed = false; [BUGGY] [BUGGY] } [CLASS] ArArchiveInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream pInput [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	50	50	1	add	
13	[BUG] [BUGGY] if (offset == 0) { [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   [BUGGY] if (offset == 0) { [BUGGY] final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   [BUGGY] [BUGGY] if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	
15	[BUG] [BUGGY] final byte[] expected = ArArchiveEntry.HEADER.getBytes(); [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { [BUGGY] final byte[] expected = ArArchiveEntry.HEADER.getBytes(); [BUGGY] final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { [BUGGY] [BUGGY] final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	64	64	1	add	
17	[BUG] [BUGGY] final byte[] realized = new byte[expected.length]; [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); [BUGGY] final byte[] realized = new byte[expected.length]; [BUGGY] final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); [BUGGY] [BUGGY] final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	65	65	1	add	
19	[BUG] [BUGGY] final int read = read(realized); [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; [BUGGY] final int read = read(realized); [BUGGY] if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }  [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; [BUGGY] [BUGGY] final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }  [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	66	66	1	add	
21	[BUG] [BUGGY] if (read != expected.length) { [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); [BUGGY] if (read != expected.length) { [BUGGY] throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArArchiveEntry getNextArEntry() throws IOException {   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); [BUGGY] [BUGGY] if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	67	67	1	add	
23	[BUG] [BUGGY] for (int i = 0; i < expected.length; i++) { [FE] AssertionFailedError [CONTEXT]   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } [BUGGY] for (int i = 0; i < expected.length; i++) { [BUGGY] if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   if (input.available() == 0) { return null; [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } [BUGGY] [BUGGY] for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   if (input.available() == 0) { return null; [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	
25	[BUG] [BUGGY] if (expected[i] != realized[i]) { [FE] AssertionFailedError [CONTEXT]  if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { [BUGGY] if (expected[i] != realized[i]) { [BUGGY] throw new IOException("invalid header " + new String(realized)); } } }   if (input.available() == 0) { return null; } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (offset == 0) { final byte[] expected = ArArchiveEntry.HEADER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read header"); } for (int i = 0; i < expected.length; i++) { [BUGGY] [BUGGY] if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   if (input.available() == 0) { return null; } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	add	
27	[BUG] [BUGGY] if (input.available() == 0) { [FE] AssertionFailedError [CONTEXT] } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   [BUGGY] if (input.available() == 0) { [BUGGY] return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid header " + new String(realized)); } } }   [BUGGY] [BUGGY] if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	
29	[BUG] [BUGGY] if (offset % 2 != 0) { [FE] AssertionFailedError [CONTEXT] } } }   if (input.available() == 0) { return null; } [BUGGY] if (offset % 2 != 0) { [BUGGY] read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	83	83	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } }   if (input.available() == 0) { return null; } [BUGGY] [BUGGY] if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	83	83	1	add	
31	[BUG] [BUGGY] final byte[] name = new byte[16]; [FE] AssertionFailedError [CONTEXT]   if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } [BUGGY] final byte[] name = new byte[16]; [BUGGY] final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	86	86	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } [BUGGY] [BUGGY] final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	86	86	1	add	
33	[BUG] [BUGGY] final byte[] lastmodified = new byte[12]; [FE] AssertionFailedError [CONTEXT]  if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; [BUGGY] final byte[] lastmodified = new byte[12]; [BUGGY] final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	87	87	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; [BUGGY] [BUGGY] final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	87	87	1	add	
35	[BUG] [BUGGY] final byte[] userid = new byte[6]; [FE] AssertionFailedError [CONTEXT] if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; [BUGGY] final byte[] userid = new byte[6]; [BUGGY] final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	88	88	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; [BUGGY] [BUGGY] final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	88	88	1	add	
37	[BUG] [BUGGY] final byte[] groupid = new byte[6]; [FE] AssertionFailedError [CONTEXT] if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; [BUGGY] final byte[] groupid = new byte[6]; [BUGGY] final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length);  [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	89	89	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (input.available() == 0) { return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; [BUGGY] [BUGGY] final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length);  [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	89	89	1	add	
39	[BUG] [BUGGY] final byte[] filemode = new byte[8]; [FE] AssertionFailedError [CONTEXT] return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; [BUGGY] final byte[] filemode = new byte[8]; [BUGGY] final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	90	90	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; [BUGGY] [BUGGY] final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	90	90	1	add	
41	[BUG] [BUGGY] final byte[] length = new byte[10]; [FE] AssertionFailedError [CONTEXT] } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; [BUGGY] final byte[] length = new byte[10]; [BUGGY]  read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	91	91	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; [BUGGY] [BUGGY] final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	91	91	1	add	
43	[BUG] [BUGGY] read(name); [FE] AssertionFailedError [CONTEXT] if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; [BUGGY] read(name); [BUGGY] read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	93	93	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (offset % 2 != 0) { read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; [BUGGY] [BUGGY] read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	93	93	1	add	
45	[BUG] [BUGGY] read(lastmodified); [FE] AssertionFailedError [CONTEXT] read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); [BUGGY] read(lastmodified); [BUGGY] read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	94	94	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] read(); } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); [BUGGY] [BUGGY] read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	94	94	1	add	
47	[BUG] [BUGGY] read(userid); [FE] AssertionFailedError [CONTEXT] } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); [BUGGY] read(userid); [BUGGY] read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	95	95	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); [BUGGY] [BUGGY] read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	95	95	1	add	
49	[BUG] [BUGGY] read(groupid); [FE] AssertionFailedError [CONTEXT] final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); [BUGGY] read(groupid); [BUGGY] read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	96	96	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final byte[] name = new byte[16]; final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); [BUGGY] [BUGGY] read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	96	96	1	add	
51	[BUG] [BUGGY] read(filemode); [FE] AssertionFailedError [CONTEXT] final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); [BUGGY] read(filemode); [BUGGY] read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	97	97	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final byte[] lastmodified = new byte[12]; final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); [BUGGY] [BUGGY] read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	97	97	1	add	
53	[BUG] [BUGGY] read(length); [FE] AssertionFailedError [CONTEXT] final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); [BUGGY] read(length); [BUGGY]  { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	98	98	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final byte[] userid = new byte[6]; final byte[] groupid = new byte[6]; final byte[] filemode = new byte[8]; final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); [BUGGY] [BUGGY] read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	98	98	1	add	
55	[BUG] [BUGGY] final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); [FE] AssertionFailedError [CONTEXT] final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { [BUGGY] final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); [BUGGY] final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	101	101	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final byte[] length = new byte[10]; read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { [BUGGY] [BUGGY] final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	101	101	1	add	
57	[BUG] [BUGGY] final byte[] realized = new byte[expected.length]; [FE] AssertionFailedError [CONTEXT] read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); [BUGGY] final byte[] realized = new byte[expected.length]; [BUGGY] final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	102	102	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); [BUGGY] [BUGGY] final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	102	102	1	add	
59	[BUG] [BUGGY] final int read = read(realized); [FE] AssertionFailedError [CONTEXT] read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; [BUGGY] final int read = read(realized); [BUGGY] if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } }  [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	103	103	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] read(name); read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; [BUGGY] [BUGGY] final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } }  [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	103	103	1	add	
61	[BUG] [BUGGY] if (read != expected.length) { [FE] AssertionFailedError [CONTEXT] read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); [BUGGY] if (read != expected.length) { [BUGGY] throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } return new ArArchiveEntry(new String(name).trim(), [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	104	104	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] read(lastmodified); read(userid); read(groupid); read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); [BUGGY] [BUGGY] if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } return new ArArchiveEntry(new String(name).trim(), [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	104	104	1	add	
63	[BUG] [BUGGY] for (int i = 0; i < expected.length; i++) { [FE] AssertionFailedError [CONTEXT] read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } [BUGGY] for (int i = 0; i < expected.length; i++) { [BUGGY] if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length) .trim())); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	107	107	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] read(filemode); read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } [BUGGY] [BUGGY] for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length) .trim())); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	107	107	1	add	
65	[BUG] [BUGGY] if (expected[i] != realized[i]) { [FE] AssertionFailedError [CONTEXT] read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { [BUGGY] if (expected[i] != realized[i]) { [BUGGY] throw new IOException("invalid entry header. not read the content?"); } } } return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length) .trim())); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	108	108	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] read(length); { final byte[] expected = ArArchiveEntry.TRAILER.getBytes(); final byte[] realized = new byte[expected.length]; final int read = read(realized); if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { [BUGGY] [BUGGY] if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length) .trim())); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	108	108	1	add	
67	[BUG] [BUGGY] return new ArArchiveEntry(new String(name).trim(),   Long.parseLong(new String(length)        .trim())); [FE] AssertionFailedError [CONTEXT] if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } [BUGGY] return new ArArchiveEntry(new String(name).trim(),           Long.parseLong(new String(length)                             .trim())); [BUGGY] Long.parseLong(new String(length) .trim())); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	114	116	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (read != expected.length) { throw new IOException("failed to read entry header"); } for (int i = 0; i < expected.length; i++) { if (expected[i] != realized[i]) { throw new IOException("invalid entry header. not read the content?"); } } } [BUGGY] [BUGGY] return new ArArchiveEntry(new String(name).trim(),           Long.parseLong(new String(length)                             .trim())); Long.parseLong(new String(length) .trim())); } [CLASS] ArArchiveInputStream [METHOD] getNextArEntry [RETURN_TYPE] ArArchiveEntry  [VARIABLES] byte[] expected filemode groupid lastmodified length name realized userid boolean closed InputStream input pInput long offset int i read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	114	116	1	add	
69	[BUG] [BUGGY] return getNextArEntry(); [FE] AssertionFailedError [CONTEXT] public ArchiveEntry getNextEntry() throws IOException { [BUGGY] return getNextArEntry(); [BUGGY] } [CLASS] ArArchiveInputStream [METHOD] getNextEntry [RETURN_TYPE] ArchiveEntry  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	121	121	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ArchiveEntry getNextEntry() throws IOException { [BUGGY] [BUGGY] return getNextArEntry(); } [CLASS] ArArchiveInputStream [METHOD] getNextEntry [RETURN_TYPE] ArchiveEntry  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	121	121	1	add	
71	[BUG] [BUGGY] if (!closed) { [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { [BUGGY] if (!closed) { [BUGGY] closed = true; input.close(); } } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	125	125	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { [BUGGY] [BUGGY] if (!closed) { closed = true; input.close(); } } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	125	125	1	add	
73	[BUG] [BUGGY] closed = true; [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { if (!closed) { [BUGGY] closed = true; [BUGGY] input.close(); } } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	126	126	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { if (!closed) { [BUGGY] [BUGGY] closed = true; input.close(); } } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	126	126	1	add	
75	[BUG] [BUGGY] input.close(); [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; [BUGGY] input.close(); [BUGGY] } } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	127	127	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; [BUGGY] [BUGGY] input.close(); } } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	127	127	1	add	
77	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; input.close(); } [BUGGY] } [BUGGY]  [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	129	129	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; input.close(); } [BUGGY] [BUGGY] } [CLASS] ArArchiveInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	129	129	1	add	
79	[BUG] [BUGGY] return read(b, 0, b.length); [FE] AssertionFailedError [CONTEXT] public int read(byte[] b) throws IOException { [BUGGY] return read(b, 0, b.length); [BUGGY] } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b [VARIABLES] byte[] b boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	138	138	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int read(byte[] b) throws IOException { [BUGGY] [BUGGY] return read(b, 0, b.length); } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b [VARIABLES] byte[] b boolean closed InputStream input pInput long offset  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	138	138	1	add	
81	[BUG] [BUGGY] int toRead = len; [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { [BUGGY] int toRead = len; [BUGGY] final int ret = this.input.read(b, off, toRead); offset += (ret > 0 ? ret : 0); return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	142	142	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { [BUGGY] [BUGGY] int toRead = len; final int ret = this.input.read(b, off, toRead); offset += (ret > 0 ? ret : 0); return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	142	142	1	add	
83	[BUG] [BUGGY] final int ret = this.input.read(b, off, toRead); [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { int toRead = len; [BUGGY] final int ret = this.input.read(b, off, toRead); [BUGGY] offset += (ret > 0 ? ret : 0); return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	143	143	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { int toRead = len; [BUGGY] [BUGGY] final int ret = this.input.read(b, off, toRead); offset += (ret > 0 ? ret : 0); return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	143	143	1	add	
85	[BUG] [BUGGY] offset += (ret > 0 ? ret : 0); [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { int toRead = len; final int ret = this.input.read(b, off, toRead); [BUGGY] offset += (ret > 0 ? ret : 0); [BUGGY] return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	144	144	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { int toRead = len; final int ret = this.input.read(b, off, toRead); [BUGGY] [BUGGY] offset += (ret > 0 ? ret : 0); return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	144	144	1	add	
87	[BUG] [BUGGY] return ret; [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { int toRead = len; final int ret = this.input.read(b, off, toRead); offset += (ret > 0 ? ret : 0); [BUGGY] return ret; [BUGGY] } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	145	145	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int read(byte[] b, final int off, final int len) throws IOException { int toRead = len; final int ret = this.input.read(b, off, toRead); offset += (ret > 0 ? ret : 0); [BUGGY] [BUGGY] return ret; } [CLASS] ArArchiveInputStream [METHOD] read [RETURN_TYPE] int  byte[] b final int off final int len [VARIABLES] byte[] b boolean closed InputStream input pInput long offset int len off ret toRead  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	145	145	1	add	
89	[BUG] [BUGGY] if (length < 8) { [FE] AssertionFailedError [CONTEXT] public static boolean matches(byte[] signature, int length) {  [BUGGY] if (length < 8) { [BUGGY] return false; } if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	151	151	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean matches(byte[] signature, int length) {  [BUGGY] [BUGGY] if (length < 8) { return false; } if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	151	151	1	add	
91	[BUG] [BUGGY] if (signature[0] != 0x21) { [FE] AssertionFailedError [CONTEXT] public static boolean matches(byte[] signature, int length) {  if (length < 8) { return false; } [BUGGY] if (signature[0] != 0x21) { [BUGGY] return false; } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	154	154	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean matches(byte[] signature, int length) {  if (length < 8) { return false; } [BUGGY] [BUGGY] if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	154	154	1	add	
93	[BUG] [BUGGY] if (signature[1] != 0x3c) { [FE] AssertionFailedError [CONTEXT] public static boolean matches(byte[] signature, int length) {  if (length < 8) { return false; } if (signature[0] != 0x21) { return false; } [BUGGY] if (signature[1] != 0x3c) { [BUGGY] return false; } if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; } if (signature[4] != 0x63) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	157	157	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean matches(byte[] signature, int length) {  if (length < 8) { return false; } if (signature[0] != 0x21) { return false; } [BUGGY] [BUGGY] if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; } if (signature[4] != 0x63) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	157	157	1	add	
95	[BUG] [BUGGY] if (signature[2] != 0x61) { [FE] AssertionFailedError [CONTEXT] if (length < 8) { return false; } if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } [BUGGY] if (signature[2] != 0x61) { [BUGGY] return false; } if (signature[3] != 0x72) { return false; } if (signature[4] != 0x63) { return false; } if (signature[5] != 0x68) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	160	160	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (length < 8) { return false; } if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } [BUGGY] [BUGGY] if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; } if (signature[4] != 0x63) { return false; } if (signature[5] != 0x68) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	160	160	1	add	
97	[BUG] [BUGGY] if (signature[3] != 0x72) { [FE] AssertionFailedError [CONTEXT] } if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } [BUGGY] if (signature[3] != 0x72) { [BUGGY] return false; } if (signature[4] != 0x63) { return false; } if (signature[5] != 0x68) { return false; } if (signature[6] != 0x3e) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	163	163	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (signature[0] != 0x21) { return false; } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } [BUGGY] [BUGGY] if (signature[3] != 0x72) { return false; } if (signature[4] != 0x63) { return false; } if (signature[5] != 0x68) { return false; } if (signature[6] != 0x3e) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	163	163	1	add	
99	[BUG] [BUGGY] if (signature[4] != 0x63) { [FE] AssertionFailedError [CONTEXT] } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; } [BUGGY] if (signature[4] != 0x63) { [BUGGY] return false; } if (signature[5] != 0x68) { return false; } if (signature[6] != 0x3e) { return false; } if (signature[7] != 0x0a) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	166	166	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (signature[1] != 0x3c) { return false; } if (signature[2] != 0x61) { return false; } if (signature[3] != 0x72) { return false; } [BUGGY] [BUGGY] if (signature[4] != 0x63) { return false; } if (signature[5] != 0x68) { return false; } if (signature[6] != 0x3e) { return false; } if (signature[7] != 0x0a) { return false; [CLASS] ArArchiveInputStream [METHOD] matches [RETURN_TYPE] boolean  byte[] signature int length [VARIABLES] byte[] signature boolean closed InputStream input pInput long offset int length  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	166	166	1	add	
