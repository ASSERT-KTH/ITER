bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	if  (offset  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
2	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	if  (offset  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
3	[BUG]  [BUGGY]  [FE]  IOException  [FE]      AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	if  (offset  ==  0)  {  	compilable	  [FE]  IOException  	13	1	replace
4	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]      AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	if  (offset  ==  0)  {  	compilable	  [FE]  IOException  	13	1	replace
5	[BUG]  [BUGGY]  [FE]  IOException  [FE]        AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	if  (offset  ==  0)  {  	compilable	  [FE]  IOException  	13	1	replace
6	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]        AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	if  (offset  ==  0)  {  	compilable	  [FE]  IOException  	13	1	replace
7	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {	if  (offset  ==  0)  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	13	None	replace
8	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {	if  (offset  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]    [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	  	if  (offset  ==  0)  {  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]    AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  expected.length  ==  0)  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  ==  0)  {	if  (offset  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  expected	13	None	replace
11	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]      AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {	if  (offset  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
12	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length)  {	if  (offset  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
13	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {	if  (offset  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
14	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getBytes())  {	if  (offset  ==  0)  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	13	None	replace
15	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  filemode.length)  {  [CE]  cannot  find  symbol  filemode  [FE]        AssertionFailedError  [CONTEXT]  public  ArArchiveEntry  getNextArEntry()  throws  IOException  {    [BUGGY]  if(offset  ==  0  ||  offset  >  filemode.length)  {  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  filemode.length)  {	if  (offset  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  filemode	13	None	replace
