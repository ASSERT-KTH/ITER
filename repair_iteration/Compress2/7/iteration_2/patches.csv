bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
2	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
3	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
4	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
5	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
7	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
8	[BUG]  [BUGGY]  if(offset!=  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	87	None	replace
9	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	87	None	replace
10	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	87	None	replace
11	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length!=  arArchiveEntry.HEADER.getBytes())  {  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length!=  arArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length!=  arArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	87	None	replace
12	[BUG]  [BUGGY]  if(offset  ==  0  ||  header.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  header  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  header.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  header.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  header	87	None	replace
13	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length!=  0)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	43	None	replace
14	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length!=  0)  {  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	43	None	replace
15	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length!=  0)  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	43	None	replace
16	[BUG]  [BUGGY]  if(read  ==  0  ||  expected.length!=  0)  {  [CE]  cannot  find  symbol  read  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(read  ==  0  ||  expected.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(read  ==  0  ||  expected.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	43	None	replace
17	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  length  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
18	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	48	2	replace
19	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	48	2	replace
20	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
21	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
22	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  1  ||  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
23	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	65	None	add
24	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
25	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
26	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
27	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	13	1	replace
28	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	13	1	replace
29	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	13	1	replace
30	[BUG]  [BUGGY]  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	13	1	replace
31	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getValue())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getValue())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getValue())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.size())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
32	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getCount())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getCount())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getCount())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.size())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
33	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.size())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.size())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.size())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.size())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
34	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ".s.IFJDCS ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ".s.IFJDCS ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ".s.IFJDCS ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
35	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode, "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode, "UTF-8 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode, "UTF-8 ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
36	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "US-ASCII ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "US-ASCII ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "US-ASCII ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
37	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ").getBytes();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ").getBytes();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ").getBytes();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
38	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ",UTF-8 ");  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ",UTF-8 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ",UTF-8 ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  ||  offset  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
40	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  0)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
41	[BUG]  [BUGGY]  if(offset  ==  0  ||  read  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	92	None	replace
42	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified  ==  0)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	92	None	replace
43	[BUG]  [BUGGY]  if(offset  ==  0  ||  groupid  ==  0)  {  [CE]  cannot  find  symbol  groupid  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  groupid  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  groupid  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  groupid	92	None	replace
44	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	92	None	replace
45	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.length())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    arArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	123	None	replace
46	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.length())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    arArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	123	None	replace
47	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  arArchiveEntry.HEADER.length())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  arArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    arArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	123	None	replace
48	[BUG]  [BUGGY]  if(offset  ==  0  ||  groupid.length  ==  0)  {  [CE]  cannot  find  symbol  groupid  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  groupid.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  groupid.length  ==  0)  {	  if(offset    ==    0    ||    lastmodified.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  groupid	90	None	replace
49	[BUG]  [BUGGY]  if(length  ==  0  ||  offset.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset.length  ==  0)  {	  if(offset    ==    0    ||    lastmodified.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	90	None	replace
50	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_HOUR_OFFSET)  {  [CE]  cannot  find  symbol  HOUR_HOUR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_HOUR_OFFSET)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_HOUR_OFFSET)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_HOUR_OFFSET	111	None	replace
51	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_BACKSLASH)  {  [CE]  cannot  find  symbol  HOUR_BACKSLASH  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_BACKSLASH)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_BACKSLASH)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_BACKSLASH	111	None	replace
52	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_LONG)  {  [CE]  cannot  find  symbol  HOUR_LONG  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_LONG)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_LONG)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_LONG	111	None	replace
53	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  length)  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  length)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  length	111	None	replace
54	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  lastmodified  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	56	None	replace
55	[BUG]  [BUGGY]  if(offset  ==  0  ||  groupid!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  groupid  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  groupid!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  groupid!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  groupid	56	None	replace
56	[BUG]  [BUGGY]  if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	56	None	replace
57	[BUG]  [BUGGY]  if(offset  ==  0  ||  leftModified!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  leftModified  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  leftModified!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  leftModified!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  leftModified	56	None	replace
58	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
59	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(null);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
60	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "ERROR ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "ERROR ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "ERROR ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
61	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(this.groupid);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(this.groupid);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(this.groupid);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length)  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >    required.length)    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	112	None	replace
63	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  requested.length)  {  [CE]  cannot  find  symbol  requested  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  requested.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  requested.length)  {	  if(offset    ==    0    ||    offset    >    required.length)    {    	non-compiled	[CE]  cannot  find  symbol  requested	112	None	replace
64	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  needed.length)  {  [CE]  cannot  find  symbol  needed  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  needed.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  needed.length)  {	  if(offset    ==    0    ||    offset    >    required.length)    {    	non-compiled	[CE]  cannot  find  symbol  needed	112	None	replace
65	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
66	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
67	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(null);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(null);	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
68	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getAllArEntries();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getAllArEntries();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getAllArEntries();	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
69	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getHeaders();	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
70	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  arArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  arArchiveEntry.HEADER.getBytes();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  arArchiveEntry.HEADER.getBytes();	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
71	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(length    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
72	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	29	None	replace
73	[BUG]  [BUGGY]  if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
74	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  length	60	None	replace
75	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  filemode!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
76	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  header!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  header!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  header!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
77	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
78	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
79	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  result.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  result.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  result.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
80	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  >=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
81	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry().getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry().getValue();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry().getValue();	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
82	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry(null);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry(null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry(null);	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
83	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry().getArgumentCount();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry().getArgumentCount();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry().getArgumentCount();	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
84	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextAREntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextAREntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextAREntry();	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
85	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
86	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
87	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
88	[BUG]  [BUGGY]  if(offset  ==  0  ||  read  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  read  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  read	101	None	replace
89	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	101	None	replace
90	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  lastmodified  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	101	None	replace
91	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
92	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
93	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	17	None	replace
94	[BUG]  [BUGGY]  if(this.groupid  ==  0  ||  offset  >  this.groupid.length)  {  [CE]  cannot  find  symbol  groupid  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.groupid  ==  0  ||  offset  >  this.groupid.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.groupid  ==  0  ||  offset  >  this.groupid.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  groupid	74	None	replace
95	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  this.groupid.length)  {  [CE]  cannot  find  symbol  groupid  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  this.groupid.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  this.groupid.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  groupid	74	None	replace
96	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  this.filemode.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  this.filemode.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  this.filemode.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	74	None	replace
97	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  this.groupid.length)  {  [CE]  cannot  find  symbol  groupid  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  this.groupid.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  this.groupid.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  groupid	74	None	replace
98	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  this.groupmode.length)  {  [CE]  cannot  find  symbol  groupmode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  this.groupmode.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  this.groupmode.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  groupmode	74	None	replace
99	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	53	2	replace
100	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	53	2	replace
101	[BUG]  [BUGGY]  if(offset  ==  0  ||  groupid  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  groupid  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  groupid  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  groupid  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  groupid	99	None	replace
102	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  =  ArArchiveEntry.HEADER.length)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  =  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  =  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
103	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
104	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
105	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER)  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	67	None	replace
106	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(this.getNextArEntry());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(this.getNextArEntry());  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(this.getNextArEntry());	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
107	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getArEntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getArEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getArEntry();	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
108	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(null);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(null);	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
109	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextAREntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextAREntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextAREntry();	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
110	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
111	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_OFFSET.length)  {  [CE]  cannot  find  symbol  HEAD_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_OFFSET.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_OFFSET.length)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_OFFSET	110	None	replace
112	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_HOUR_OFFSET.length)  {  [CE]  cannot  find  symbol  HOUR_HOUR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_HOUR_OFFSET.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_HOUR_OFFSET.length)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET.length)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_HOUR_OFFSET	110	None	replace
113	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_LONG.length)  {  [CE]  cannot  find  symbol  HOUR_LONG  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_LONG.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_LONG.length)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET.length)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_LONG	110	None	replace
114	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	2	replace
115	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	2	replace
116	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	2	replace
117	[BUG]  [BUGGY]  if(offset  >=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	2	replace
118	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	1	replace
119	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	1	replace
120	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	2	replace
121	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	119	2	replace
122	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
123	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
124	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
125	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
126	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
127	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
128	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  >>  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
129	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                  IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	95	None	add
130	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	122	None	replace
131	[BUG]  [BUGGY]  if(this.offset!=  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset!=  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset!=  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	122	None	replace
132	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	122	None	replace
133	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	122	None	replace
134	[BUG]  [BUGGY]  if(length  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	122	None	replace
135	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.offset  >=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	122	None	replace
136	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length  >=  0)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length  >=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length  >=  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	46	None	replace
137	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length  >=  0)  {  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length  >=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length  >=  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	46	None	replace
138	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >>  0)  {  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >>  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >>  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	46	None	replace
139	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	32	None	replace
140	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	32	None	replace
141	[BUG]  [BUGGY]  if(Offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  Offset  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(Offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(Offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  Offset	14	None	replace
142	[BUG]  [BUGGY]  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  Offset  [FE]                      IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  Offset	14	None	replace
143	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  length  [FE]                        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  length	14	None	replace
144	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
145	[BUG]  [BUGGY]  ArArchiveEntry  <  K,  V>  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry  <  K,  V>  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry  <  K,  V>  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	40	None	replace
146	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " "));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " "));  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " "));  }	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
147	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
148	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	81	1	replace
149	[BUG]  [BUGGY]  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	81	1	replace
150	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(1);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(1);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(1);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
151	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(ArArchiveEntry.HEADER);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(ArArchiveEntry.HEADER);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(ArArchiveEntry.HEADER);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
152	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(null);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(null);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
153	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(2);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(2);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(2);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
154	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(arArchiveEntry.HEADER);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(arArchiveEntry.HEADER);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(arArchiveEntry.HEADER);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
155	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(arArchiveEntry.HEADER.getBytes());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(arArchiveEntry.HEADER.getBytes());  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(arArchiveEntry.HEADER.getBytes());	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
156	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_HEADER.length)  {  [CE]  cannot  find  symbol  HEAD_HEADER  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_HEADER.length)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_HEADER	76	None	replace
157	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_BACKSLASH.length)  {  [CE]  cannot  find  symbol  HEAD_BACKSLASH  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_BACKSLASH.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_BACKSLASH.length)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_BACKSLASH	76	None	replace
158	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_BYTE.length)  {  [CE]  cannot  find  symbol  HEAD_BYTE  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_BYTE.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_BYTE.length)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_BYTE	76	None	replace
159	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_HOUR_LENGTH)  {  [CE]  cannot  find  symbol  HEAD_HOUR_LENGTH  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_HOUR_LENGTH)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_HOUR_LENGTH)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_HOUR_LENGTH	76	None	replace
160	[BUG]  [BUGGY]  if(offset  ==  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  input.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  input.length  ==  0)  {	  if(offset    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	44	None	replace
161	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  ==  4)  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length  ==  4)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  ==  4)  {	  if(offset    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	44	None	replace
162	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  ==  3)  {  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length  ==  3)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  ==  3)  {	  if(offset    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	44	None	replace
163	[BUG]  [BUGGY]  if(expected  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  expected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  expected.length  ==  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
164	[BUG]  [BUGGY]  if(expected!=  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected!=  0  ||  expected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected!=  0  ||  expected.length  ==  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
165	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  expected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  expected.length  ==  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
166	[BUG]  [BUGGY]  if(expected  ==  0  ||  expected.length!=  0)  {  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  expected.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  expected.length!=  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
167	[BUG]  [BUGGY]  if(expected  ==  0  ||  read  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  read  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  read  ==  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
168	[BUG]  [BUGGY]  if(expected  >=  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  >=  0  ||  expected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  >=  0  ||  expected.length  ==  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
169	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	117	2	replace
170	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	117	2	replace
171	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  <  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	117	2	replace
172	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	117	2	replace
173	[BUG]  [BUGGY]  if(offset  <  =  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  =  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  =  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
174	[BUG]  [BUGGY]  if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  read  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  read	57	None	replace
175	[BUG]  [BUGGY]  if(offset  ==  0  ||  input.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  input.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  input.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	57	None	replace
176	[BUG]  [BUGGY]  if(offset  ==  0  ||  name!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  name!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  name!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  name	57	None	replace
177	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
178	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	3	None	add
179	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
180	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
181	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
182	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  <  arArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  <  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  <  arArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
183	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  <  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
184	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
185	[BUG]  [BUGGY]  if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  filemode  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	2	None	replace
186	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  1  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
187	[BUG]  [BUGGY]  if(offset  ==  1  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  1  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
188	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length  ==  0)  {	  if(expected    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	91	None	replace
189	[BUG]  [BUGGY]  if(input  ==  0  ||  offset.length  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(input  ==  0  ||  offset.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(input  ==  0  ||  offset.length  ==  0)  {	  if(expected    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	91	None	replace
190	[BUG]  [BUGGY]  if(offset!=  0  ||  offset.length  ==  0)  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset.length  ==  0)  {	  if(expected    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	91	None	replace
191	[BUG]  [BUGGY]  if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  read  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  read	107	None	replace
192	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	107	None	replace
193	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  lastmodified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	107	None	replace
194	[BUG]  [BUGGY]  if(offset  ==  0  ||  input.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  input.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  input.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	107	None	replace
195	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
196	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
197	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
198	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  1  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
199	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  1  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
200	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	1	replace
201	[BUG]  [BUGGY]  if(offset!=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	1	replace
202	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  1  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
203	[BUG]  [BUGGY]  if(offset  ==  1  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  1  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
204	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
205	[BUG]  [BUGGY]  if(offset  >=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  1  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	2	replace
206	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHeader();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHeader();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextHeader();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
207	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  this.getNextArEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  this.getNextArEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  this.getNextArEntry();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
208	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getHeader();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getHeader();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getHeader();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
209	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextName();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextName();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextName();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
210	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextAREntry();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextAREntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextAREntry();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
211	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNext();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNext();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNext();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
212	[BUG]  [BUGGY]  if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  filemode  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	21	None	replace
213	[BUG]  [BUGGY]  if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	21	None	replace
214	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	34	None	replace
215	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	34	None	replace
216	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	34	None	replace
217	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	34	None	replace
218	[BUG]  [BUGGY]  if(offset!=  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	34	None	replace
219	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  this.length)  {  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  this.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  this.length)  {	  if(offset    ==    0    ||    offset    >    this.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
220	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  this.length)  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  this.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  this.length)  {	  if(offset    ==    0    ||    offset    >    this.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
221	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  this.length)  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  this.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  this.length)  {	  if(offset    ==    0    ||    offset    >    this.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
222	[BUG]  [BUGGY]  if(offset  ==  0  ||  read  >  this.length)  {  [CE]  cannot  find  symbol  read  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read  >  this.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read  >  this.length)  {	  if(offset    ==    0    ||    offset    >    this.length)    {    	non-compiled	[CE]  cannot  find  symbol  read	75	None	replace
223	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >  this.length)  {  [CE]  cannot  find  symbol  length  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  >  this.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >  this.length)  {	  if(offset    ==    0    ||    offset    >    this.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
224	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
225	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
226	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
227	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
228	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
229	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
230	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  >>  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
231	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                  IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	80	None	add
232	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  expected.length)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  expected.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  expected.length)  {	  if(offset    ==    0    ||    offset    >    expected.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	72	None	replace
233	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  expected.length)  {  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  expected.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  expected.length)  {	  if(offset    ==    0    ||    offset    >    expected.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	72	None	replace
234	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  expected.length)  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  expected.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  expected.length)  {	  if(offset    ==    0    ||    offset    >    expected.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	72	None	replace
235	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	124	None	replace
236	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	124	None	replace
237	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >>  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >>  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >>  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	124	None	replace
238	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	124	None	replace
239	[BUG]  [BUGGY]  if(offset  ==  0  ||  input.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  input.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  input.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    header    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
240	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
241	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
242	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	22	None	add
243	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
244	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
245	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
246	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
247	[BUG]  [BUGGY]  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
248	[BUG]  [BUGGY]  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
249	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
250	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
252	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
253	[BUG]  [BUGGY]  if(offset  <  =  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  =  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  =  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
254	[BUG]  [BUGGY]  if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	16	None	replace
255	[BUG]  [BUGGY]  if(offset  ==  0  &&  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
256	[BUG]  [BUGGY]  if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  header  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  header	16	None	replace
257	[BUG]  [BUGGY]  if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
258	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NAMES))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NAMES))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
259	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARRAY))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARRAY))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARRAY))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
260	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARGUMENTS))  {  [CE]  cannot  find  symbol  Feature  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARGUMENTS))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARGUMENTS))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
261	[BUG]  [BUGGY]  if(offset  ==  0  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
262	[BUG]  [BUGGY]  if(length  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
263	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FILE))  {  [CE]  cannot  find  symbol  Feature  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FILE))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FILE))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
264	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
265	[BUG]  [BUGGY]  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  incompatible  types	41	None	replace
266	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  incompatible  types	41	None	replace
267	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
268	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  filemode  [FE]                                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes(filemode);  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  filemode	41	None	replace
269	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getAllArEntries();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getAllArEntries();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getAllArEntries();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
270	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	41	None	replace
271	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	106	None	replace
272	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	106	None	replace
273	[BUG]  [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	106	None	replace
274	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	106	None	replace
275	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	106	None	replace
276	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	106	None	replace
277	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  this.filemode.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  this.filemode.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  this.filemode.length)  {	  if(offset    ==    0    ||    offset    >    this.filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	73	None	replace
278	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  this.filemode.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  this.filemode.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  this.filemode.length)  {	  if(offset    ==    0    ||    offset    >    this.filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	73	None	replace
279	[BUG]  [BUGGY]  if(this.filemode  ==  0  ||  offset  >  this.filemode.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.filemode  ==  0  ||  offset  >  this.filemode.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.filemode  ==  0  ||  offset  >  this.filemode.length)  {	  if(offset    ==    0    ||    offset    >    this.filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	73	None	replace
280	[BUG]  [BUGGY]  if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	30	None	replace
281	[BUG]  [BUGGY]  if(offset  ==  0  &&  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	30	None	replace
282	[BUG]  [BUGGY]  if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  header  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  header	30	None	replace
283	[BUG]  [BUGGY]  if(offset  ==  0  &&  result.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  result  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  result.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  result.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  result	30	None	replace
284	[BUG]  [BUGGY]  if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER))  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
285	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
286	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  filemode);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  filemode);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  filemode);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
287	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(this.filemode);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(this.filemode);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(this.filemode);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
288	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  null);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  null);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
289	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  0);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  0);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  0);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
290	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
291	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this.groupid);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this.groupid);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this.groupid);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
292	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
293	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
294	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
295	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >>  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
296	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
297	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	82	None	add
298	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
299	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  arArchiveEntry.HEADER.getLength())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  arArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset!=  arArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    arArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	26	None	replace
300	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.getLength())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    arArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	26	None	replace
301	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  arArchiveEntry.HEADER.getLength())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  arArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  arArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    arArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	26	None	replace
302	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  length  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  length	120	None	replace
303	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  filemode  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	120	None	replace
304	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	120	None	replace
305	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	120	None	replace
306	[BUG]  [BUGGY]  if(OffsetUtils.length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  OffsetUtils  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(OffsetUtils.length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(OffsetUtils.length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  OffsetUtils	120	None	replace
307	[BUG]  [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	120	None	replace
308	[BUG]  [BUGGY]  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  Offset  [FE]        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  Offset	97	None	replace
309	[BUG]  [BUGGY]  if(offset  ==  0  ||  read  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  read  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read  >=  ArArchiveEntry.HEADER.length)  {	  if(length    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  read	69	None	replace
310	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
311	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
312	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
313	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  If(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  If(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    If(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	116	None	add
314	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(Offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
315	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  <  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
316	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  offset  >  arArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  offset  >  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  <  0  ||  offset  >  arArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
317	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
318	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
319	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
320	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
321	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >>  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
322	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	6	None	add
323	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
324	[BUG]  [BUGGY]  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
325	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
326	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
327	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
328	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
329	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
330	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  currentOffset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  currentOffset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  currentOffset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
331	[BUG]  [BUGGY]  if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	25	None	replace
332	[BUG]  [BUGGY]  if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	25	None	replace
333	[BUG]  [BUGGY]  if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  header  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  header	25	None	replace
334	[BUG]  [BUGGY]  if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  result	25	None	replace
335	[BUG]  [BUGGY]  if(offset  ==  0  &&  this.offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  this.offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  this.offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
336	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  filemode  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
337	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
338	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  filemode!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
339	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  result.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  result.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  result.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
340	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  header!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  header!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  header!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
341	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  >=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  >=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  >=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
342	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
343	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
344	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
345	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
346	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >>  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
347	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	93	None	add
348	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
349	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextHeader();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextHeader();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextHeader();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
350	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  this.getNextArEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  this.getNextArEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  this.getNextArEntry();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
351	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextArEntry(null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextArEntry(null);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextArEntry(null);	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
352	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextName();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextName();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextName();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
353	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextErrorEntry();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextErrorEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextErrorEntry();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
354	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextFile();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextFile();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextFile();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
355	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
356	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
357	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
358	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >>  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  >>  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
359	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  If(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  If(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    If(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	118	None	add
360	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(Offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
361	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  [Delete]  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [CE]  ')'  expected  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  [Delete]  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  [Delete]  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ')'  expected	118	None	add
362	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	28	None	replace
363	[BUG]  [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	28	None	replace
364	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	28	None	replace
365	[BUG]  [BUGGY]  if(offset  ==  0  ||  off!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  off  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  off!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  off!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    off!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  off	103	None	replace
366	[BUG]  [BUGGY]  if(offset  ==  0  ||  off  >=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  off  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  off  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  off  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    off!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  off	103	None	replace
367	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
368	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
369	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
370	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
371	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	20	None	add
372	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
373	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  [BUGGY]  ArArchiveEntry.HEADER.length())  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  [BUGGY]  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  [BUGGY]  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ')'  expected	20	None	add
374	[BUG]  [BUGGY]  if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	31	None	replace
375	[BUG]  [BUGGY]  if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  filemode!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	31	None	replace
376	[BUG]  [BUGGY]  if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  header	31	None	replace
377	[BUG]  [BUGGY]  if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  result  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  result	31	None	replace
378	[BUG]  [BUGGY]  if(offset  ==  0  &&  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	31	None	replace
379	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	109	None	replace
380	[BUG]  [BUGGY]  if(this.offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	109	None	replace
381	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	109	None	replace
382	[BUG]  [BUGGY]  if(length  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	109	None	replace
383	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	109	None	replace
384	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	55	None	replace
385	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	55	None	replace
386	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	55	None	replace
387	[BUG]  [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	55	None	replace
388	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	55	None	replace
389	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  +  1];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  +  1];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  +  1];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
390	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  -  1];  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  -  1];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  -  1];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
391	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  *  2];  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  *  2];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  *  2];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
392	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  /  2];  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  /  2];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  /  2];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
393	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  *  4];  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  *  4];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  *  4];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
394	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
395	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
396	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
397	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
398	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	18	None	add
399	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
400	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
401	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
402	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
403	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
404	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HeADER.getRawOffset())  {  [CE]  cannot  find  symbol  HeADER  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HeADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HeADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol  HeADER	88	None	replace
405	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
406	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
407	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
408	[BUG]  [BUGGY]  if(this.offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
409	[BUG]  [BUGGY]  if(length  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	100	None	replace
410	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	100	None	replace
411	[BUG]  [BUGGY]  if(offset  ==  0  ||  read  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  read  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  read  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  read	85	None	replace
412	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  lastmodified  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	85	None	replace
413	[BUG]  [BUGGY]  if(offset  ==  0  ||  input.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  input.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  input.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	85	None	replace
414	[BUG]  [BUGGY]  if(offset  ==  0  ||  groupid  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  groupid  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  groupid  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  groupid  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  groupid	33	None	replace
415	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	33	None	replace
416	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  expected.length!=  0)  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  expected.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  expected.length!=  0)  {	  if(length    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	42	None	replace
417	[BUG]  [BUGGY]  if(read  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  read  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(read  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(read  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    read!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  read	125	None	replace
418	[BUG]  [BUGGY]  if(offset!=  0  &&  filemode  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  filemode  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  filemode  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  filemode  ==  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	94	None	replace
419	[BUG]  [BUGGY]  if(offset!=  0  ||  offset!=  arArchiveEntry.HEADER.getLength())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset!=  arArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset!=  arArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	24	None	replace
420	[BUG]  [BUGGY]  if(input  ==  null)  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(input  ==  null)  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(input  ==  null)  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
421	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
422	[BUG]  [BUGGY]  [FE]  IOException  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	58	1	replace
423	[BUG]  [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	58	1	replace
424	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextSegment();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextSegment();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextSegment();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
425	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
426	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
427	[BUG]  [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
428	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
429	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(Offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
430	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
431	[BUG]  [BUGGY]  if(length  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
432	[BUG]  [BUGGY]  if(offset  ==  0  ||  firstmodified!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  firstmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  firstmodified!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  firstmodified!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  firstmodified	29	None	replace
433	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER)  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	100	None	replace
434	[BUG]  [BUGGY]  if(offset  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	21	None	replace
435	[BUG]  [BUGGY]  if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  header  [FE]      AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  header!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  header	21	None	replace
436	[BUG]  [BUGGY]  if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  result.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  result	21	None	replace
437	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry(source);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry(source);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry(source);	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
438	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextFile();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextFile();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextFile();	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
439	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ".UTF-8 ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ".UTF-8 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( ".UTF-8 ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
440	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ", "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ", "UTF-8 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ", "UTF-8 ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
441	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 "  +  File.separator);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 "  +  File.separator);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 "  +  File.separator);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
442	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  lastmodified);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  lastmodified);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  lastmodified);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
443	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(lastmodified);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(lastmodified);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(lastmodified);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
444	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  header);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  header);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  header);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
445	[BUG]  [BUGGY]  if(offset  ==  0  ||  extended.length  ==  0)  {  [CE]  cannot  find  symbol  extended  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  extended.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  extended.length  ==  0)  {	  if(offset    ==    0    ||    lastmodified.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  extended	90	None	replace
446	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	117	2	replace
447	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	117	2	replace
448	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length  >=  0)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length  >=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length  >=  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	46	None	replace
449	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length  >=  0)  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length  >=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length  >=  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	46	None	replace
450	[BUG]  [BUGGY]  if(OffsetUtil.length()  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  OffsetUtil  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(OffsetUtil.length()  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(OffsetUtil.length()  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  OffsetUtil	54	None	replace
451	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length!=  0)  {  [CE]  cannot  find  symbol  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	43	None	replace
452	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  0)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	43	None	replace
453	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode!=  0)  {  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	43	None	replace
454	[BUG]  [BUGGY]  if(offset  ==  0  &&  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	30	None	replace
455	[BUG]  [BUGGY]  if(offset  ==  0  &&  getNextArEntry()  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  incomparable  types:  ArArchiveEntry  and  byte[]  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  getNextArEntry()  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  getNextArEntry()  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  incomparable  types:  ArArchiveEntry  and  byte[]	30	None	replace
456	[BUG]  [BUGGY]  if(this.offset  >=  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  >=  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  >=  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	122	None	replace
457	[BUG]  [BUGGY]  if(read  ==  0  ||  offset.length  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(read  ==  0  ||  offset.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(read  ==  0  ||  offset.length  ==  0)  {	  if(expected    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	91	None	replace
458	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
459	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FILENAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FILENAME))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FILENAME))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
460	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	106	None	replace
461	[BUG]  [BUGGY]  if(offset  ==  0  ||  expect.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expect  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expect.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expect.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expect	106	None	replace
462	[BUG]  [BUGGY]  if(width  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  width  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(width  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(width  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  width	106	None	replace
463	[BUG]  [BUGGY]  if(OffsetUtils.length()  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  OffsetUtils  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(OffsetUtils.length()  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(OffsetUtils.length()  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  OffsetUtils	14	None	replace
464	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	120	None	replace
465	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  lastmodified  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	120	None	replace
466	[BUG]  [BUGGY]  if(offset  ==  0  ||  expect.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expect  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expect.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expect.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expect	120	None	replace
467	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
468	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
469	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
470	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
471	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
472	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
473	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
474	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
475	[BUG]  [BUGGY]  if(offset  ==  0  ||  leftModified  ==  0)  {  [CE]  cannot  find  symbol  leftModified  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  leftModified  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  leftModified  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  leftModified	92	None	replace
476	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
477	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
478	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
479	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
480	[BUG]  [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
481	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
482	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
483	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
484	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
485	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_LENGTH.length)  {  [CE]  cannot  find  symbol  HEAD_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_LENGTH.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_LENGTH.length)  {	  if(offset    ==    0    ||    offset    >    expected.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_LENGTH	72	None	replace
486	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  header  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  header  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  header  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
487	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
488	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  this.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  this.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  this.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
489	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  isEnabled(ArchiveEntry.HEADER))  {  [CE]  cannot  find  symbol  HEADER  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  isEnabled(ArchiveEntry.HEADER))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  isEnabled(ArchiveEntry.HEADER))  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
490	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
491	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_OFFSET)  {  [CE]  cannot  find  symbol  HEAD_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_OFFSET)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_OFFSET)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_OFFSET	111	None	replace
492	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD)  {  [CE]  cannot  find  symbol  HEAD  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD	111	None	replace
493	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
494	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ")  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ")  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ")	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
495	[BUG]  [BUGGY]  static  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  static  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	static  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
496	[BUG]  [BUGGY]  if(expected  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	28	None	replace
497	[BUG]  [BUGGY]  if(format  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  format  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(format  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(format  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  format	28	None	replace
498	[BUG]  [BUGGY]  if(read  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  read  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(read  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(read  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  read	28	None	replace
499	[BUG]  [BUGGY]  if(offset  ==  0  ||  start.length  ==  0)  {  [CE]  cannot  find  symbol  start  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  start.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  start.length  ==  0)  {	  if(offset    ==    0    ||    filemode.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  start	45	None	replace
500	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >>    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
501	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >>    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
502	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	124	None	replace
503	[BUG]  [BUGGY]  if(offset  ==  0  ||  left!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  left  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  left!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  left!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    read!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  left	125	None	replace
504	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
505	[BUG]  [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
506	[BUG]  [BUGGY]  if(length  ==  0)  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0)  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0)  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
507	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  this.lastmodified.length)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  this.lastmodified.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  this.lastmodified.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	74	None	replace
508	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
509	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextFile();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextFile();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextFile();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
510	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextErrorEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextErrorEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextErrorEntry();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
511	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  isEnabled(ArArchiveEntry.HEADER))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  isEnabled(ArArchiveEntry.HEADER))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  isEnabled(ArArchiveEntry.HEADER))  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
512	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  ArArchiveEntry.HEADER!=  this.header.getBytes())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  ArArchiveEntry.HEADER!=  this.header.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  ArArchiveEntry.HEADER!=  this.header.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
513	[BUG]  [BUGGY]  if(offset  ==  0  ||  off  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  off  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  off  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  off  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    off!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  off	103	None	replace
514	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeaders();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
515	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(false);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(false);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(false);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
516	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HeADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
517	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HeADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
518	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
519	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
520	[BUG]  [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
521	[BUG]  [BUGGY]  if(offset  ==  0  ||  firstmodified!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  firstmodified  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  firstmodified!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  firstmodified!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  firstmodified	56	None	replace
522	[BUG]  [BUGGY]  if(offset  ==  0  ||  firstModified!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  firstModified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  firstModified!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  firstModified!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  firstModified	56	None	replace
523	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.size())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.size())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.size())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.size())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	86	None	replace
524	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
525	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
526	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
527	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_BACKSLASH.length)  {  [CE]  cannot  find  symbol  HOUR_BACKSLASH  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_BACKSLASH.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_BACKSLASH.length)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET.length)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_BACKSLASH	110	None	replace
528	[BUG]  [BUGGY]  if(offset  >=  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  &&  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
529	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD.length)  {  [CE]  cannot  find  symbol  HEAD  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD.length)  {	  if(offset    ==    0    ||    offset    >    required.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD	112	None	replace
530	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  arArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length!=  arArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  arArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    arArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	26	None	replace
531	[BUG]  [BUGGY]  if(offset  ==  0  &&  result.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  result  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  result.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  result.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  result	16	None	replace
532	[BUG]  [BUGGY]  if(width  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  width  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(width  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(width  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  width	55	None	replace
533	[BUG]  [BUGGY]  if(left  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  left  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(left  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(left  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  left	55	None	replace
534	[BUG]  [BUGGY]  if(format  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  format  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(format  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(format  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  format	55	None	replace
535	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
536	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
537	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
538	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
539	[BUG]  [BUGGY]  if(offset  ==  0  &&  expected.length  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  expected.length  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  expected.length  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	2	None	replace
540	[BUG]  [BUGGY]  if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  header  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  header  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  header	2	None	replace
541	[BUG]  [BUGGY]  if(format  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  format  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(format  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(format  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  format	34	None	replace
542	[BUG]  [BUGGY]  if(left  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  left  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(left  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(left  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  left	34	None	replace
543	[BUG]  [BUGGY]  if(offset  ==  0  ||  expect.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expect  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expect.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expect.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expect	34	None	replace
544	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	107	None	replace
545	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	88	None	replace
546	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
547	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
548	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length  >=  ArArchiveEntry.HEADER.length)  {	  if(length    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
549	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_HOUR_PREFIX)  {  [CE]  cannot  find  symbol  HEAD_HOUR_PREFIX  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_HOUR_PREFIX)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_HOUR_PREFIX)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_HOUR_PREFIX	76	None	replace
550	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getNextArEntry();	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
551	[BUG]  [BUGGY]  if(length  ==  0  ||  header!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  header!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  header!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    header!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	57	None	replace
552	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
553	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  final  byte[]  offset  =  ArArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  final  byte[]  offset  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    final  byte[]  offset  =  ArArchiveEntry.HEADER.getBytes();	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
554	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
555	[BUG]  [BUGGY]  if(offset  ==  0  ||  endOffset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  endOffset  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  endOffset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  endOffset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  endOffset	99	None	replace
556	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
557	[BUG]  [BUGGY]  if(offset  ==  0  ||  firstModified  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  firstModified  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  firstModified  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  firstModified  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  firstModified	33	None	replace
558	[BUG]  [BUGGY]  if(offset  ==  0  &&  expected.length  >=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  expected.length  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  expected.length  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	19	None	replace
559	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  +  2];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  +  2];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  +  2];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
560	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  header  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  header  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  header  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
561	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  getNextArEntry()  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  getNextArEntry()  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  getNextArEntry()  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
562	[BUG]  [BUGGY]  if(offset!=  0  &&  filemode!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  filemode  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  filemode!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  filemode!=  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	81	None	replace
563	[BUG]  [BUGGY]  if(offset!=  0  &&  expected.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  expected.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  expected.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	81	None	replace
564	[BUG]  [BUGGY]  if(offset  ==  0  ||  header.length  ==  0)  {  [CE]  cannot  find  symbol  header  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  header.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  header.length  ==  0)  {	  if(offset    ==    0    ||    offset.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  header	44	None	replace
565	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(this);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(this);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(this);	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
566	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNext();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNext();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNext();	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
567	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(0);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(0);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry(0);	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
568	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	67	None	replace
569	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	67	None	replace
570	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  cannot  find  symbol  Feature  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
571	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  Feature  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
572	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  read  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(read  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  read	84	None	replace
573	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.HEADER_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.HEADER_NON_NUMERIC_NUMBERS))  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.HEADER_NON_NUMERIC_NUMBERS))  {	  if(offset    ==    0    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	84	None	replace
574	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  MAX_ARGUMENT)  {  [CE]  cannot  find  symbol  MAX_ARGUMENT  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  MAX_ARGUMENT)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  MAX_ARGUMENT)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_ARGUMENT	111	None	replace
575	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  MAX_ARRAY)  {  [CE]  cannot  find  symbol  MAX_ARRAY  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  MAX_ARRAY)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  MAX_ARRAY)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_ARRAY	111	None	replace
576	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  <  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  <  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  <  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    <    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	71	None	replace
577	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	54	2	replace
578	[BUG]  [BUGGY]  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	54	2	replace
579	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	28	None	replace
580	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	28	None	replace
581	[BUG]  [BUGGY]  if(expected.length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	28	None	replace
582	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
583	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  this.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  this.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  this.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	100	None	replace
584	[BUG]  [BUGGY]  if(width  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  width  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(width  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(width  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  width	100	None	replace
585	[BUG]  [BUGGY]  if(offset  ==  0  ||  startModified  ==  0)  {  [CE]  cannot  find  symbol  startModified  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  startModified  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  startModified  ==  0)  {	  if(offset    ==    0    ||    filemode    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  startModified	92	None	replace
586	[BUG]  [BUGGY]  if(offset  ==  0  &&  name!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  name!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  name!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  name	31	None	replace
587	[BUG]  [BUGGY]  if(offset  ==  0  &&  this.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  this.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  this.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
588	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  filemode  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  filemode.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	124	None	replace
589	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None	replace
590	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  lastmodified  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    expected.length    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	124	None	replace
591	[BUG]  [BUGGY]  if(offset  ==  0  ||  startModified  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  startModified  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  startModified  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  startModified  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  startModified	99	None	replace
592	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  long  cannot  be  dereferenced  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	120	None	replace
593	[BUG]  [BUGGY]  if(offset  ==  0  ||  left.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  left  [FE]          IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  left.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  left.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  left	120	None	replace
594	[BUG]  [BUGGY]  if(offset  ==  0  ||  set.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  set  [FE]            IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  set.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  set.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  set	120	None	replace
595	[BUG]  [BUGGY]  if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
596	[BUG]  [BUGGY]  if(offset  ==  0  &&  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
597	[BUG]  [BUGGY]  if(offset  ==  0  &&  this.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  this.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  this.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	16	None	replace
598	[BUG]  [BUGGY]  if(offset  ==  0  &&  nextEntry  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  nextEntry  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  nextEntry  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  nextEntry  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  nextEntry	16	None	replace
599	[BUG]  [BUGGY]  if(offset  ==  0  &&  ArArchiveEntry.HEADER!=  input.getLength())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  ArArchiveEntry.HEADER!=  input.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  ArArchiveEntry.HEADER!=  input.getLength())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
600	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	96	1	replace
601	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset!=    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	96	1	replace
602	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
603	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]        IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  arArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset    ==    0    ||    offset    >=    arArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	123	None	replace
604	[BUG]  [BUGGY]  if(expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(expected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected.length  ==  0)  {	  if(read    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	47	None	replace
605	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	32	None	replace
606	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >  this.length)  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >  this.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >  this.length)  {	  if(offset    ==    0    ||    offset    >    this.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	75	None	replace
607	[BUG]  [BUGGY]  if(offset  ==  0  &&  lastmodified!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  lastmodified  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  lastmodified!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  lastmodified!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	25	None	replace
608	[BUG]  [BUGGY]  if(offset  ==  0  &&  this.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  this.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  this.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
609	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    <    =    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
610	[BUG]  [BUGGY]  if(offset  ==  0  ||  written!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  written  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  written!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  written!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    read!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  written	125	None	replace
611	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
612	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
613	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  realized  [FE]                                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  realized	40	None	replace
614	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  this.groupId.length)  {  [CE]  cannot  find  symbol  groupId  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  this.groupId.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  this.groupId.length)  {	  if(offset    ==    0    ||    offset    >    this.groupid.length)    {    	non-compiled	[CE]  cannot  find  symbol  groupId	74	None	replace
615	[BUG]  [BUGGY]  if(Offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  Offset  [FE]                    IOException      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(Offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(Offset  <  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  Offset	14	None	replace
616	[BUG]  [BUGGY]  if(this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	109	None	replace
617	[BUG]  [BUGGY]  if(this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	109	None	replace
618	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  >  0  ];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  >  0  ];  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  >  0  ];	  final    ArArchiveEntry[]    expected    =    new    ArArchiveEntry[size()    ];    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
619	[BUG]  [BUGGY]  if(offset  ==  0  ||  left.length!=  0)  {  [CE]  cannot  find  symbol  left  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  left.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  left.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  left	43	None	replace
620	[BUG]  [BUGGY]  if(offset  ==  0  ||  set.length!=  0)  {  [CE]  cannot  find  symbol  set  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  set.length!=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  set.length!=  0)  {	  if(offset    ==    0    ||    expected.length!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  set	43	None	replace
621	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  >=  0)  {  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length  >=  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  >=  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	46	None	replace
622	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >  0)  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >  0)  {	  if(offset    ==    0    ||    expected.length    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	46	None	replace
623	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getArEntryNames();	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
624	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getArEntryArray();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getArEntryArray();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getArEntryArray();	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
625	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  arArchiveEntry.HEADER!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  arArchiveEntry.HEADER!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  arArchiveEntry.HEADER!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
626	[BUG]  [BUGGY]  if(offset!=  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	17	None	replace
627	[BUG]  [BUGGY]  if(offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
628	[BUG]  [BUGGY]  if(offset!=  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	17	None	replace
629	[BUG]  [BUGGY]  if(offset!=  0  ||  length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	17	None	replace
630	[BUG]  [BUGGY]  if(offset!=  0  ||  header  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  header  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  header  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  header  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  header	17	None	replace
631	[BUG]  [BUGGY]  if(offset!=  0  ||  buffer.getLength()  ==  ArArchiveEntry.HEADER)  {  [CE]  cannot  find  symbol  buffer  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  buffer.getLength()  ==  ArArchiveEntry.HEADER)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  buffer.getLength()  ==  ArArchiveEntry.HEADER)  {	  if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  buffer	17	None	replace
632	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  >  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
633	[BUG]  [BUGGY]  if(offset!=  0  &&  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	30	None	replace
634	[BUG]  [BUGGY]  if(offset  ==  0L  &&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0L  &&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0L  &&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	30	None	replace
635	[BUG]  [BUGGY]  if(offset  ==  0  &&  arArchiveEntry.HEADER.getBytes())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  arArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  arArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	30	None	replace
636	[BUG]  [BUGGY]  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length()  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  ArArchiveEntry.HEADER.length()  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	62	2	replace
637	[BUG]  [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length()  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  ArArchiveEntry.HEADER.length()  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  ArArchiveEntry.HEADER.length()  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	62	2	replace
638	[BUG]  [BUGGY]  if(input  ==  null)  {  if(offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(input  ==  null)  {  if(offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(input  ==  null)  {  if(offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
639	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(input  ==  null  ||  input  ==  null)  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
640	[BUG]  [BUGGY]  if(length  ==  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(length  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  length	62	None	replace
641	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHandlerEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHandlerEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextHandlerEntry();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
642	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHeaderEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHeaderEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextHeaderEntry();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
643	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHandler();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextHandler();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextHandler();	  final    ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
644	[BUG]  [BUGGY]  if(offset  ==  0  ||  count!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  count  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  count!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  count!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  count	107	None	replace
645	[BUG]  [BUGGY]  if(offset  ==  0  ||  scheduled.length  ==  0)  {  [CE]  cannot  find  symbol  scheduled  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  scheduled.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  scheduled.length  ==  0)  {	  if(offset    ==    0    ||    lastmodified.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  scheduled	90	None	replace
646	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  lastmodified  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	55	None	replace
647	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextSegmentArEntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextSegmentArEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextSegmentArEntry();	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
648	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextRawEntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextRawEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextRawEntry();	  final    ArArchiveEntry    <    K,    V>    expected    =    getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	37	None	replace
649	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_BUFFER_LENGTH)  {  [CE]  cannot  find  symbol  HEAD_BUFFER_LENGTH  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_BUFFER_LENGTH)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_BUFFER_LENGTH)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_BUFFER_LENGTH	76	None	replace
650	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_PREFIX)  {  [CE]  cannot  find  symbol  HEAD_PREFIX  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_PREFIX)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_PREFIX)  {	  if(offset    ==    0    ||    offset    >    HEAD_PREFIX.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_PREFIX	76	None	replace
651	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  name);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  name);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  name);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
652	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(length);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(length);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(length);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
653	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this.lastmodified);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this.lastmodified);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode,  this.lastmodified);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>(filemode);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	113	None	replace
654	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getHeader();	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
655	[BUG]  [BUGGY]  if(offset!=  0  ||  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  filemode!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  filemode!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	24	None	replace
656	[BUG]  [BUGGY]  if(offset!=  0  ||  length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	24	None	replace
657	[BUG]  [BUGGY]  if(offset!=  0  ||  header!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  header  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  header!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  header!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset!=    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  header	24	None	replace
658	[BUG]  [BUGGY]  if(input  ==  null)  {  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(input  ==  null)  {  if(offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(input  ==  null)  {  if(offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset    >=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
659	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  expected.length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
660	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  this.filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  this.filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  this.filemode  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    isEnabled(ArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	98	None	replace
661	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0L  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0L  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
663	[BUG]  [BUGGY]  if(offset  ==  0L  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0L  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0L  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
664	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_ENTRY.length)  {  [CE]  cannot  find  symbol  HOUR_ENTRY  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_ENTRY.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_ENTRY.length)  {	  if(offset    ==    0    ||    offset    >    HOUR_OFFSET.length)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_ENTRY	110	None	replace
665	[BUG]  [BUGGY]  if(offset  ==  0  ||  leftModified!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  leftModified  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  leftModified!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  leftModified!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    filemode!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  leftModified	29	None	replace
666	[BUG]  [BUGGY]  if(offset  ==  0  ||  selected.length  ==  0)  {  [CE]  cannot  find  symbol  selected  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  selected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  selected.length  ==  0)  {	  if(offset    ==    0    ||    set.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  selected	104	None	replace
667	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
668	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  arArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  arArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  arArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
669	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  this.filemode  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    isEnabled(ArArchiveEntry.HEADER)&&    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
670	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "failed  to  read  header  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "failed  to  read  header  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "failed  to  read  header	  final    ArArchiveEntry[]    expected    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
671	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  off  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  off  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  off  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
672	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  off  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  <  0  ||  off  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    <    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  <  0  ||  off  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
673	[BUG]  [BUGGY]  if(size  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  size  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(size  ==  0  ||  expected.length  ==  0)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(size  ==  0  ||  expected.length  ==  0)  {	  if(length    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  size	42	None	replace
674	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  off!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  off!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  off!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
675	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
676	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  HEADER  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	88	None	replace
677	[BUG]  [BUGGY]  if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
678	[BUG]  [BUGGY]  if(offset  ==  0  ||  slot  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  slot  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  slot  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  slot  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol  slot	88	None	replace
679	[BUG]  [BUGGY]  if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  header  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getRawOffset())    {    	non-compiled	[CE]  cannot  find  symbol  header	88	None	replace
680	[BUG]  [BUGGY]  if(this.offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(this.offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(this.offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    this.offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	122	None	replace
681	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length  >  ArArchiveEntry.HEADER.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	68	None	replace
682	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  saved.length)  {  [CE]  cannot  find  symbol  saved  [FE]                    AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  saved.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  saved.length)  {	  if(offset    ==    0    ||    offset    >    required.length)    {    	non-compiled	[CE]  cannot  find  symbol  saved	112	None	replace
683	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(System.identityHashCode(this));  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(System.identityHashCode(this));  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(System.identityHashCode(this));	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
684	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(source);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(source);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(source);	  final    ArArchiveEntry    <    K,    V>    expected    =    new    ArArchiveEntry    <    K,    V>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	78	None	replace
685	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	1	replace
686	[BUG]  [BUGGY]  if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	66	1	replace
687	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  >  this.filemode.length)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  length  >  this.filemode.length)  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length  >  this.filemode.length)  {	  if(offset    ==    0    ||    offset    >    this.filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	73	None	replace
688	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.size())  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.size())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.size())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.size())    {    	non-compiled	[CE]  cannot  find  symbol  expected	86	None	replace
689	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getSize())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getSize())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.getSize())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.size())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
690	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  off  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  &&  off  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    &&    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  &&  off  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
691	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  >=  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset    >=    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
692	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  2  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
693	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HeADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    1    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  1  ||  offset!=  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
694	[BUG]  [BUGGY]  if(offset  ==  0  ||  endOffset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  endOffset  [FE]                        AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  endOffset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  endOffset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  endOffset	33	None	replace
695	[BUG]  [BUGGY]  if(offset  ==  0  ||  startModified  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  startModified  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  startModified  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  startModified  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    filemode    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  startModified	33	None	replace
696	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextSecondArEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  ArArchiveEntry.HEADER  =  getNextSecondArEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextSecondArEntry();	  ArArchiveEntry.HEADER    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
697	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	34	None	replace
698	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  lastmodified  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    expected.length    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	34	None	replace
699	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  off  >  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  off  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  off  >  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
700	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  lastmodified  [FE]            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	106	None	replace
701	[BUG]  [BUGGY]  if(offset  ==  0  ||  left.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  left  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  left.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  left.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    expected.length!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  left	106	None	replace
702	[BUG]  [BUGGY]  if(offset  ==  0  ||  set.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  set  [FE]              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset  ==  0  ||  set.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  set.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset.length!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  set	87	None	replace
703	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextRawEntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextRawEntry();  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextRawEntry();	  final    ArArchiveEntry    <    K,    V>    expected    =    this.getNextArEntry();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
704	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  off  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  &&  off  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=    0    &&    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  &&  off  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
705	[BUG]  [BUGGY]  static  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  static  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	static  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
706	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-16 ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-16 ");  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-16 ");	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
707	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(0);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  ArArchiveEntry  getNextArEntry()  throws  IOException  {        [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(0);  [BUGGY]      final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes(0);	  final    byte[]    expected    =    ArArchiveEntry.HEADER.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
