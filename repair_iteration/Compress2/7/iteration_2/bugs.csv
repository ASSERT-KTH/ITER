bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
2	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
4	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
5	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  =  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  [FE]  IOException  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
7	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
8	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
11	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	5	None	add
12	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
13	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
14	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
15	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
16	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
17	[BUG]  [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
18	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
19	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
21	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
22	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	1	replace
23	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	1	replace
24	[BUG]  [BUGGY]  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  ||  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
25	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
26	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.getLength())  {  [CE]  package  arArchiveEntry  does  not  exist  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  arArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  package  arArchiveEntry  does  not  exist	13	None	replace
27	[BUG]  [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	11	None	replace
28	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	11	None	replace
29	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	11	None	replace
30	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	7	None	replace
31	[BUG]  [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  &&  offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	7	None	replace
32	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	replace
33	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	7	None	replace
34	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
35	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  getNextArEntry();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	replace
38	[BUG]  [BUGGY]  ArArchiveEntry.HEADER  =  getNextArEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  ArArchiveEntry.HEADER  =  getNextArEntry();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	ArArchiveEntry.HEADER  =  getNextArEntry();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextArEntry();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry.HEADER  =  getNextArEntry();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry.HEADER  =  getNextArEntry();	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  realized  [FE]                            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  realized	9	None	replace
41	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  incompatible  types  [FE]                              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  incompatible  types	9	None	replace
42	[BUG]  [BUGGY]  if(length  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  expected.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  expected.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
43	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  0)  {  [CE]  cannot  find  symbol  expected  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length!=  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	10	None	replace
44	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length  ==  0)  {  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	10	None	replace
45	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode.length  ==  0)  {  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  filemode.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	10	None	replace
46	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >=  0)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length  >=  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >=  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	10	None	replace
47	[BUG]  [BUGGY]  if(read  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(read  ==  0  ||  expected.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(read  ==  0  ||  expected.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	10	None	replace
48	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
49	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
50	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
51	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	3	None	add
52	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
53	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
54	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
55	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  expected  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  expected	14	None	replace
56	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  filemode  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	14	None	replace
57	[BUG]  [BUGGY]  if(offset  ==  0  ||  header!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  header  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  header!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  header!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  header	14	None	replace
58	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
59	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
60	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
61	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    If(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
62	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset!=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
63	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
64	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
65	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	6	1	replace
66	[BUG]  [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  1  ||  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	6	1	replace
67	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
68	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
69	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(length  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
70	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >>  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
71	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  <  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
72	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  expected.length)  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  expected.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  expected.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	15	None	replace
73	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  this.filemode.length)  {  [CE]  cannot  find  symbol  filemode  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  this.filemode.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  this.filemode.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	15	None	replace
74	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  this.groupid.length)  {  [CE]  cannot  find  symbol  groupid  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  this.groupid.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  this.groupid.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  groupid	15	None	replace
75	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  this.length)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  this.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  this.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
76	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_PREFIX.length)  {  [CE]  cannot  find  symbol  HEAD_PREFIX  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  HEAD_PREFIX.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HEAD_PREFIX.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  HEAD_PREFIX	15	None	replace
77	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  this.getNextArEntry();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	replace
78	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>();  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	replace
79	[BUG]  [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes( "UTF-8 ");	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	6	2	replace
81	[BUG]  [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	6	2	replace
82	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	6	1	replace
83	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	6	1	replace
84	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
85	[BUG]  [BUGGY]  if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  header  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol  header	7	None	replace
86	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.size())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.size())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.size())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
87	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  long  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset.length!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	14	None	replace
88	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.getRawOffset())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
89	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  lastmodified.length)  {  [CE]  cannot  find  symbol  lastmodified  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  lastmodified.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  lastmodified.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	15	None	replace
90	[BUG]  [BUGGY]  if(offset  ==  0  ||  lastmodified.length  ==  0)  {  [CE]  cannot  find  symbol  lastmodified  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  lastmodified.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  lastmodified.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  lastmodified	10	None	replace
91	[BUG]  [BUGGY]  if(expected  ==  0  ||  offset.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(expected  ==  0  ||  offset.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(expected  ==  0  ||  offset.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	10	None	replace
92	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode  ==  0)  {  [CE]  cannot  find  symbol  filemode  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  filemode  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	10	None	replace
93	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
94	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset  ==  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	2	2	replace
95	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
96	[BUG]  [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset!=  0  &&  offset  >=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
97	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(Offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
98	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  HEADER  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  HEADER	8	None	replace
99	[BUG]  [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  filemode  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  filemode  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  filemode	8	None	replace
100	[BUG]  [BUGGY]  if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
101	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  length  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
102	[BUG]  [BUGGY]  if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  header  [FE]                        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  header  ==  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  header	8	None	replace
103	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  off!=  ArArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset!=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  off!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  off!=  ArArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
104	[BUG]  [BUGGY]  if(offset  ==  0  ||  set.length  ==  0)  {  [CE]  cannot  find  symbol  set  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  set.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  set.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  set	10	None	replace
105	[BUG]  [BUGGY]  if(offset  ==  0  ||  left.length  ==  0)  {  [CE]  cannot  find  symbol  left  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  left.length  ==  0)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  left.length  ==  0)  {	  if(offset    ==    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  left	10	None	replace
106	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  expected  [FE]        AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  expected	13	None	replace
107	[BUG]  [BUGGY]  if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.getLength())  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.getLength())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  length!=  ArArchiveEntry.HEADER.getLength())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
108	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
109	[BUG]  [BUGGY]  if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  this.offset  ==  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	7	None	replace
110	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_OFFSET.length)  {  [CE]  cannot  find  symbol  HOUR_OFFSET  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_OFFSET.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_OFFSET.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_OFFSET	15	None	replace
111	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_OFFSET)  {  [CE]  cannot  find  symbol  HOUR_OFFSET  [FE]              AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  HOUR_OFFSET)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  HOUR_OFFSET)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_OFFSET	15	None	replace
112	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >  required.length)  {  [CE]  cannot  find  symbol  required  [FE]                AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >  required.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  offset  >  required.length)  {	  if(offset    ==    0    ||    offset    >    filemode.length)    {    	non-compiled	[CE]  cannot  find  symbol  required	15	None	replace
113	[BUG]  [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode);  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry  <  K,  V>  expected  =  new  ArArchiveEntry  <  K,  V>(filemode);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	replace
114	[BUG]  [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  ];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  ];  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	final  ArArchiveEntry[]  expected  =  new  ArArchiveEntry[size()  ];	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
115	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    ==    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  ==  ArArchiveEntry.HeADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
116	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
117	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  <  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	2	replace
118	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	add	if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	1	replace
119	[BUG]  [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  >=  0  ||  offset  >  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    	compilable	  [FE]  IOException  	4	1	replace
120	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [CE]  cannot  find  symbol  expected  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length!=  ArArchiveEntry.HEADER.length())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length())    {    	non-compiled	[CE]  cannot  find  symbol  expected	6	None	replace
121	[BUG]  [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  isEnabled(ArArchiveEntry.HEADER)&&  offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
122	[BUG]  [BUGGY]  if(offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  this.offset!=  ArArchiveEntry.HEADER.getBytes())  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.getBytes())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	14	None	replace
123	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.length())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  >=  ArArchiveEntry.HEADER.length())  {  if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.length())  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length())    {    if(offset  ==  0  ||  offset  >=  arArchiveEntry.HEADER.length())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
124	[BUG]  [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  expected.length  >=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset    >=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  expected	12	None	replace
125	[BUG]  [BUGGY]  if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.length)  {  [CE]  cannot  find  symbol  read  [FE]          AssertionFailedError    [CONTEXT]    public  ArArchiveEntry  getNextArEntry()  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.length)  {  [BUGGY]    final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	63	63	1	replace	if(offset  ==  0  ||  read!=  ArArchiveEntry.HEADER.length)  {	  if(offset    ==    0    ||    offset!=    ArArchiveEntry.HEADER.length)    {    	non-compiled	[CE]  cannot  find  symbol  read	11	None	replace
