bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
2	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  For(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  For(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    For(int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	9	None	add
3	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
4	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
5	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	add
6	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  estimated.length;  i++)  {	  for(int    i    =    0;    i    <    unexpected.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	12	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  realized.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
9	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
10	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  1;  i  <  expected.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
11	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
13	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  read.length;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  read.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  read.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  realized.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
15	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  realized.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  2;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
19	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  2;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
21	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  [CE]  cannot  find  symbol  implemented  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  implemented.length;  i++)  {	  for(int    i    =    0;    i    <    imagined.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  implemented	15	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  -  read;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	6	None	replace
32	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry();  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry(read);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  pInput.readInput();  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntryInput();  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry(offset);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(read);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  pInput.readInput(read);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(read);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int  i  =  0;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  For(int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  For(int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    For(int  i  =  0;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    int  i  =  0;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	1	None	add
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	add
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	add
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read);  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read);  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  read);  i++)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  read;  i++)  {  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int  i  =  0;  i  <  expected[length  -  read;  i++)  {	  	non-compiled	[CE]  ']'  expected	5	None	add
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
65	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
69	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  -  1;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	4	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  imagined.length  -  1;  i++)  {  [CE]  cannot  find  symbol  imagined  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  imagined.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  imagined.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  imagined	4	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length  -  1;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  estimated.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  estimated.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	4	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
82	[BUG]  [BUGGY]  int  i  =  input.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  int  i  =  input.length();  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  input.length();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input,  read);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry(input,  read);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(input,  read);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
84	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry(input);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(input);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {	  for(int    i    =    0;    i    <    unexpected.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  saved	12	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
90	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
91	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=  realized[i])  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  	non-compiled	[CE]  unclosed  string  literal	9	None	add
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expecting.length  -  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expecting.length  -  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int  i  =  0;  i  <  expecting.length  -  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    (int  i  =  0;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
101	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
102	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  unexpected.length;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  unexpected.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  unexpected.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
103	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  saved.length;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  For(int  i  =  0;  i  <  saved.length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  saved.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	14	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  length;  i++)  {  [CE]  cannot  find  symbol  length  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  length;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read;  i++)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1,  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [Delete]  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [Delete]  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [Delete]  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
110	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
112	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	7	None	add
116	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	      	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
117	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  if(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	      	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
118	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	      	non-compiled	[CE]  cannot  find  symbol	11	None	replace
119	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	      	non-compiled	[CE]  cannot  find  symbol  filemode	11	None	replace
120	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
121	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int  i  =  1;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int  i  =  0;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]    if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
