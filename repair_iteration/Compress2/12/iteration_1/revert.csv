projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<imagined.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){For(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<read.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<implemented.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){For(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){For(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){For(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]>=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){For(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected[length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<imagined.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<saved.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expecting.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<unexpected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<saved.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){[Delete]if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
