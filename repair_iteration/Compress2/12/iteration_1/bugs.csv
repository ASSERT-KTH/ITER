bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	2	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	2	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  expected.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
10	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  	23	1	replace
11	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]    [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	  	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	non-compiled	[CE]  illegal  start  of  type	23	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]    AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  unexpected	23	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	non-compiled	[CE]  '.class'  expected	23	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  imagined.length;  i++)  {  [CE]  cannot  find  symbol  imagined  [FE]    AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  [BUGGY]  for(int  i  =  0;  i  <  imagined.length;  i++)  {  [BUGGY]  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  imagined.length;  i++)  {	for  (int  i  =  0;  i  <  expected.length;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  imagined	23	None	replace
