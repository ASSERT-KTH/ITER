bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	54	1	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	54	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	54	1	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	54	1	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	54	None	replace
6	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	54	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  realized.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
8	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  realized.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
10	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
11	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  unexpected.length  -  1;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  unexpected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  unexpected.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	21	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  2;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
13	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  2;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
14	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  estimated.length  -  1;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  estimated.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  estimated.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	21	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	93	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	93	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	93	None	replace
18	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	93	None	replace
19	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
20	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
21	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
22	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
23	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  /  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
24	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read,  offset);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(read,  offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read,  offset);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
25	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(pInput);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(pInput);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(pInput);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
26	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read,  expected.length);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(read,  expected.length);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read,  expected.length);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
27	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read,  expected);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(read,  expected);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read,  expected);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
28	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(realized);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(realized);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(realized);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
29	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  read);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(pInput,  read);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
30	[BUG]  [BUGGY]  InputStream  input  =  read.readInput(pInput);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  read.readInput(pInput);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  read.readInput(pInput);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
31	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(read,  offset);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readInput(read,  offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(read,  offset);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
32	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(offset,  read);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readInput(offset,  read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(offset,  read);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
33	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(offset);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readInput(offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(offset);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
34	[BUG]  [BUGGY]  InputStream  input  =  filemode.readInput(read);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  filemode.readInput(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  filemode.readInput(read);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
35	[BUG]  [BUGGY]  InputStream  input  =  this.pInput.readInput(read);  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  this.pInput.readInput(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  this.pInput.readInput(read);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
36	[BUG]  [BUGGY]  InputStream  input  =  reader.readInput(pInput);  [CE]  illegal  start  of  type  [FE]                                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  reader.readInput(pInput);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  reader.readInput(pInput);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
37	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read,  input);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(read,  input);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read,  input);	  InputStream    input    =    getNextArEntry(input);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
38	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput(read);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntryInput(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput(read);	  InputStream    input    =    getNextArEntry(input);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
39	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  input);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  input);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(pInput,  input);	  InputStream    input    =    getNextArEntry(input);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  filemode;  i++)  {  [CE]  cannot  find  symbol  filemode  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  filemode;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  filemode;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	104	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  For(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  For(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    For(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  '.class'  expected	65	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	65	None	add
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	29	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  realized.length);  i++)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  realized.length);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  realized.length);  i++)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  realized.length;  i++)  {  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    for(int  i  =  0;  i  <  expected[length  -  realized.length;  i++)  {	  	non-compiled	[CE]  ']'  expected	29	None	add
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  FOR(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  FOR(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    FOR(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    (int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	29	None	add
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  /  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read  /  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  /  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  /  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read  /  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  +  read  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read  *  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  read  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
61	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  realized.length  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  realized.length  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  realized.length  *  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  realized.length  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  realized.length  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
63	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read  *  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  3;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read  *  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expecting.length  -  read;  i++)  {  [CE]  cannot  find  symbol  expecting  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expecting.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expecting.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expecting.length    -    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  expecting	92	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	27	None	add
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	27	None	add
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	27	None	add
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
72	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    for(int  i  =  2;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
73	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  For(int  i  =  2;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  For(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    For(int  i  =  2;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
74	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
75	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
76	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  int  i  =  2;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    int  i  =  2;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	18	None	add
77	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  '.class'  expected	112	None	add
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	112	None	add
83	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
84	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
85	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
86	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
87	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  unexpected.length  -  read;  i++)  {  [CE]  '.class'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  unexpected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  unexpected.length  -  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	124	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	124	None	replace
91	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  '.class'  expected	124	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	124	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
96	[BUG]  [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  ';'  expected	118	None	replace
97	[BUG]  [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
98	[BUG]  [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
99	[BUG]  [BUGGY]  while(read!=  expected.length)  {  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
100	[BUG]  [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  read.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  int  cannot  be  dereferenced  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  read.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  for(int  i  =  0;  i  <  read.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	118	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	67	None	add
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	67	None	add
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
109	[BUG]  [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  i  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
110	[BUG]  [BUGGY]  while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  i  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
111	[BUG]  [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	120	None	replace
112	[BUG]  [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  i  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
113	[BUG]  [BUGGY]  while(read  >=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  i  [FE]                                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  >=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  >=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
115	[BUG]  [BUGGY]  if(read  ==  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
116	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  expected.length;  i  <  read.length;  ++i)  {  return  null;  }  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  expected.length;  i  <  read.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  expected.length;  i  <  read.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	117	None	replace
117	[BUG]  [BUGGY]  while(read!=  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
118	[BUG]  [BUGGY]  because(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  because(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	because(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
119	[BUG]  [BUGGY]  while(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  ==  0)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
120	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
121	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
122	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  expected.length  -  1;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  expected.length  -  1;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  expected.length  -  1;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
123	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  assumed.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  assumed.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  assumed.length;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
124	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  realization.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  realization.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  realization.length;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	compilable	  [FE]  AssertionFailedError  	90	1	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	compilable	  [FE]  AssertionFailedError  	90	1	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	90	None	replace
128	[BUG]  [BUGGY]  [FE]  IOException  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	compilable	  [FE]  IOException  	90	2	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	compilable	  [FE]  IOException  	90	2	replace
130	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  	90	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header: "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header: "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	compilable	  [FE]  AssertionFailedError  	90	1	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header: "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header: "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header: "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	compilable	  [FE]  AssertionFailedError  	90	1	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  	non-compiled	[CE]  '.class'  expected	80	None	add
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	80	None	add
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	80	None	add
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  	non-compiled	[CE]  '.class'  expected	99	None	add
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  Iasi  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	99	None	add
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	99	None	add
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  }  if  (expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
147	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input,  read,  expected.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(input,  read,  expected.length);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(input,  read,  expected.length);	  InputStream    input    =    getNextArEntry(input,    read);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
148	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input,  read,  offset);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(input,  read,  offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(input,  read,  offset);	  InputStream    input    =    getNextArEntry(input,    read);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
149	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(author,  input);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(author,  input);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(author,  input);	  InputStream    input    =    getNextArEntry(input,    read);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
150	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input,  read,  expected);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(input,  read,  expected);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(input,  read,  expected);	  InputStream    input    =    getNextArEntry(input,    read);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  /  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  2;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  /  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  	non-compiled	[CE]  '.class'  expected	69	None	add
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    int  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	69	None	add
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	71	None	add
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	71	None	add
166	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected.length);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected.length);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  expected.length);	  InputStream    input    =    getNextArEntry(offset,    read);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
167	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  offset,  read);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  offset,  read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(pInput,  offset,  read);	  InputStream    input    =    getNextArEntry(offset,    read);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
168	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  realized);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  realized);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  realized);	  InputStream    input    =    getNextArEntry(offset,    read);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
169	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  expected);	  InputStream    input    =    getNextArEntry(offset,    read);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    for(int  i  =  1;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
171	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  For(int  i  =  1;  i  <  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  For(int  i  =  1;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    For(int  i  =  1;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	14	None	add
172	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
173	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
174	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  int  i  =  1;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  int  i  =  1;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    int  i  =  1;  i  <  realized.length;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	14	None	add
175	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
176	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  read.length;  i++)  {  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  1;  i  <  read.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  1;  i  <  read.length;  i++)  {	  For(int    i    =    0;    i    <    read.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
177	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  imagined.length;  i++)  {  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  imagined.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  imagined.length;  i++)  {	  For(int    i    =    0;    i    <    read.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
178	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  estimated.length;  i++)  {  [CE]  '.class'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  estimated.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  estimated.length;  i++)  {	  For(int    i    =    0;    i    <    read.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
180	[BUG]  [BUGGY]  if(read  ==  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
181	[BUG]  [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	116	None	replace
182	[BUG]  [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
183	[BUG]  [BUGGY]  while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	123	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	123	None	replace
187	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	123	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	123	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	123	None	replace
190	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	55	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	55	None	replace
192	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	55	None	replace
193	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  final  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	final  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	55	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	87	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	87	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	87	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	87	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	87	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	60	1	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	60	1	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	60	1	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	60	1	replace
203	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	60	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1,  read;  i++)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1,  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1,  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  realized.length;  i++)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1,  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read  +  1;  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1,  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2,  read;  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2,  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2,  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read  *  2;  i++)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1,  read  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  realized;  i++)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  realized;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1,  realized;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
210	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
212	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  +  offset;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  offset;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  offset;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
214	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  +  read;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	66	None	replace
217	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  '.class'  expected	122	None	replace
218	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	122	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  +  offset;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length  +  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	70	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  	non-compiled	[CE]  '.class'  expected	25	None	add
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	25	None	add
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  off;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  off;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  off;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  offset);  i++)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  offset);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  offset);  i++)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    (int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  	non-compiled	[CE]  ')'  expected	25	None	add
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  cannot  find  symbol  refigured  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	4	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
229	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	86	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  final  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  final  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  final  int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	86	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	86	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read  +  1;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  realized.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length  +  1;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  realized.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  offset  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset  +  1;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read  +  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  2;  i++)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read  +  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  /  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read  +  1;  i++)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  /  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read,  offset  +  1;  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read,  offset  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read,  offset  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  offset;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  -  offset;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length  -  offset;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	26	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
247	[BUG]  [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	because(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  ';'  expected	119	None	replace
248	[BUG]  [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  cannot  find  symbol  filemode  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  cannot  find  symbol  filemode	119	None	replace
249	[BUG]  [BUGGY]  while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  cannot  find  symbol  filemode  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  cannot  find  symbol  filemode	119	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(offset);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(offset);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(offset);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(read);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
252	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  offset);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(pInput,  offset);	  InputStream    input    =    getNextArEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
253	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput(offset);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntryInput(offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput(offset);	  InputStream    input    =    getNextArEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(read));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	91	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	compilable	  [FE]  AssertionFailedError  	91	1	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	compilable	  [FE]  AssertionFailedError  	91	1	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "failed  to  read  header "  +  new  String(read));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	91	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   ");  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	compilable	  [FE]  AssertionFailedError  	91	1	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   ");  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   ");  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	compilable	  [FE]  AssertionFailedError  	91	1	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	compilable	  [FE]  AssertionFailedError  	91	1	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	compilable	  [FE]  AssertionFailedError  	91	1	replace
264	[BUG]  [BUGGY]  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
265	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
266	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
267	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	105	None	add
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
271	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	105	None	add
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  read  +  1;  i++)  {  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected[length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  ']'  expected	105	None	add
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected[i]  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected[i]  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected[i]  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    (int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	105	None	add
276	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  final  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	final  int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    (int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	98	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length  -  3;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  estimated.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  estimated.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	100	None	replace
278	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(offset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(offset);	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  offset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  offset);	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
283	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  '.class'  expected	96	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	6	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	6	None	replace
286	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	6	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	49	None	replace
288	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  realized);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  realized);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  realized);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
289	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(pInput,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(pInput,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
290	[BUG]  [BUGGY]  if(read!=  expected.length)  {  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  method  getNextArEntry  in  class  ArArchiveInputStream  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  method  getNextArEntry  in  class  ArArchiveInputStream  cannot  be  applied  to  given  types;	121	None	replace
291	[BUG]  [BUGGY]  final  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  final  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	final  InputStream  input  =  getNextArEntry(offset,  read);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
293	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	95	None	replace
294	[BUG]  [BUGGY]  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  final  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  final  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  final  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
297	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	115	None	replace
298	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	115	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	48	1	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  /  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	48	1	replace
303	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length  -  1;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    unexpected.length    -    1;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	77	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length  -  read;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  estimated.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  estimated.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    unexpected.length    -    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	31	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  imagined.length  -  read;  i++)  {  [CE]  cannot  find  symbol  imagined  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  imagined.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  imagined.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    unexpected.length    -    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  imagined	31	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
308	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  '.class'  expected	94	None	replace
309	[BUG]  [BUGGY]  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  final  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  final  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  ((  final  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  implemented.length  -  1;  i++)  {  [CE]  cannot  find  symbol  implemented  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  implemented.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  implemented.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    estimated.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  implemented	79	None	replace
312	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry().getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry().getInputStream();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry().getInputStream();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
313	[BUG]  [BUGGY]  InputStream  input  =  this.getNextArEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  this.getNextArEntry();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  this.getNextArEntry();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  '.class'  expected	110	None	add
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	110	None	add
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  else  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  2;  i  <  realized.length;  i++)  {	  for(int    i    =    2;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
321	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  2;  i  <  realized.length;  i++)  {	  for(int    i    =    2;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
322	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
323	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  unexpected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  unexpected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  unexpected.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
324	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  read.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  read.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  read.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
325	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  imagined.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  imagined.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  imagined.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
326	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  estimated.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  estimated.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  estimated.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
328	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	47	None	replace
329	[BUG]  [BUGGY]  if(read  ==  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	47	None	replace
330	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
331	[BUG]  [BUGGY]  [FE]  IOException  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	89	2	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	89	2	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  -  expected.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  expected.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  expected.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
335	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	2	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	2	replace
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	85	1	replace
338	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	85	1	replace
339	[BUG]  [BUGGY]  InputStream  input  =  filemode.readInput();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  filemode.readInput();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  filemode.readInput();	  InputStream    input    =    pInput.readInput();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
340	[BUG]  [BUGGY]  InputStream  input  =  this.pInput.readInput();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  this.pInput.readInput();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  this.pInput.readInput();	  InputStream    input    =    pInput.readInput();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
341	[BUG]  [BUGGY]  InputStream  input  =  pInput.readFile();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readFile();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readFile();	  InputStream    input    =    pInput.readInput();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
342	[BUG]  [BUGGY]  InputStream  input  =  pInput.readUTF();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readUTF();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readUTF();	  InputStream    input    =    pInput.readInput();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
343	[BUG]  [BUGGY]  InputStream  input  =  pInput.readEnd();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readEnd();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readEnd();	  InputStream    input    =    pInput.readInput();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
344	[BUG]  [BUGGY]  if(expected.length!=  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(expected.length!=  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(expected.length!=  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	109	None	replace
345	[BUG]  [BUGGY]  if(expected.length  ==  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(expected.length  ==  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(expected.length  ==  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	109	None	replace
346	[BUG]  [BUGGY]  if(expected.length!=  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(expected.length!=  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(expected.length!=  read)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
348	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    For(int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	75	None	add
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	75	None	add
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  >=  realized.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  >=  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    for(int  i  =  0;  i  >=  realized.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  (int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  (int  i  =  0;  i  <  realized.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    (int  i  =  0;  i  <  realized.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	75	None	add
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {	  for(int    i    =    1;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
353	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  realized.length;  i  <  len;  i++)  {	  for(int    i    =    1;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
355	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	64	None	replace
356	[BUG]  [BUGGY]  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
357	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	64	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read);  i++)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read);  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read);    i++)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset);  i++)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset);  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read);    i++)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read);  i++)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read);  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read);    i++)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
362	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  For(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  For(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    For(int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
363	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	20	None	add
364	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  (int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  (int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    (int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	20	None	add
365	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  FOR(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  FOR(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    FOR(int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
366	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1);  i++)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  1;  i  <  expected.length  -  1);  i++)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
367	[BUG]  [BUGGY]  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
368	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  realized.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
369	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  final  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  final  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  final  int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
370	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  1;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  1;  i  <  realized.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    For(int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	2	None	replace
371	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	114	None	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  read;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	42	1	replace
373	[BUG]  [BUGGY]  for(int  i  =  read;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  read;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	42	1	replace
374	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	42	None	replace
375	[BUG]  [BUGGY]  int  i  =  expected.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  expected.length();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  expected.length();	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
376	[BUG]  [BUGGY]  int  i  =  read.length();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  read.length();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  read.length();	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
377	[BUG]  [BUGGY]  int  i  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  input.length()  -  1;  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  input.length()  -  1;	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
378	[BUG]  [BUGGY]  int  i  =  input.length()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  input.length()  +  1;  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  input.length()  +  1;	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
379	[BUG]  [BUGGY]  int  i  =  offset.length();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  offset.length();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  offset.length();	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
380	[BUG]  [BUGGY]  int  i  =  input.length()  +  read;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  input.length()  +  read;  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  input.length()  +  read;	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
381	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
382	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    For(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	73	None	add
383	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected[i]  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected[i]  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    for(int  i  =  0;  i  <  expected[i]  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	73	None	add
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected[i  +  read  *  2;  i++)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected[i  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    for(int  i  =  0;  i  <  expected[i  +  read  *  2;  i++)  {	  	non-compiled	[CE]  ']'  expected	73	None	add
387	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  (int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    (int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	73	None	add
388	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	43	None	replace
389	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  unexpected.length;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  1;  i  <  unexpected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  1;  i  <  unexpected.length;  i++)  {	  For(int    i    =    0;    i    <    unexpected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	102	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  6;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  6;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
391	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  6;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  6;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  6;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  5;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  5;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
393	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  5;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  5;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  5;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
394	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  saved.length;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  1;  i  <  saved.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  1;  i  <  saved.length;  i++)  {	  For(int    i    =    0;    i    <    saved.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
395	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  realization.length;  i  <  len;  i++)  {  [CE]  cannot  find  symbol  realization  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  realization.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  realization.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  realization	17	None	replace
396	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  assumed.length;  i  <  len;  i++)  {  [CE]  cannot  find  symbol  assumed  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  assumed.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  assumed.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  assumed	17	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
398	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  expected.length;  i  <  read;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
399	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
400	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  For(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  For(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    For(int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  	non-compiled	[CE]  '.class'  expected	23	None	add
401	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	23	None	add
402	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read);  i++)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  read);  i++)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
403	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  >=  realized.length  -  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  >=  realized.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    for(int  i  =  0;  i  >=  realized.length  -  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
404	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  (int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  (int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    (int  i  =  0;  i  <  realized.length  -  read;  i++)  {	  	non-compiled	[CE]  ')'  expected	23	None	add
405	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	108	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
408	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  '.class'  expected	108	None	replace
409	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	108	None	replace
410	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[length  -  read;  i++)  {  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected[length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected[length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected[length    -    read;    i++)    {    	non-compiled	[CE]  ']'  expected	63	None	replace
411	[BUG]  [BUGGY]  For(int  i  =  2;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  2;  i  <  expected.length;  i++)  {	  For(int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
412	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  1;  i  <  expected.length  -  1;  i++)  {	  For(int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
413	[BUG]  [BUGGY]  For(int  i  =  read;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  read;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  read;  i  <  expected.length;  i++)  {	  For(int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
414	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput(),  read);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntryInput(),  read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput(),  read);	  InputStream    input    =    getNextArEntryInput();    	non-compiled	[CE]  ';'  expected	36	None	replace
415	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput(pInput);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntryInput(pInput);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput(pInput);	  InputStream    input    =    getNextArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
416	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput(offset,  read);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntryInput(offset,  read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput(offset,  read);	  InputStream    input    =    getNextArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
417	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput()  +  read;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntryInput()  +  read;  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntryInput()  +  read;	  InputStream    input    =    getNextArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  +  1;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  unexpected.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	68	None	replace
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length  +  1;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  estimated.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  estimated.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	68	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
421	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  For(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  For(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    For(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
422	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	add
423	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  expected.length;  i  <  len);  i++)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  expected.length;  i  <  len);  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    for(int  i  =  0,  len  =  expected.length;  i  <  len);  i++)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
424	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  expected.length;  i  <  Len;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  expected.length;  i  <  Len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    for(int  i  =  0,  len  =  expected.length;  i  <  Len;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
425	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  FOR(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  FOR(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    FOR(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
426	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  (int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  (int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    (int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  ')'  expected	16	None	add
427	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	97	None	replace
428	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  	97	None	replace
429	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	97	None	replace
430	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	97	None	replace
431	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	61	None	replace
432	[BUG]  [BUGGY]  long  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  long  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	long  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	61	None	replace
433	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [CE]  bad  operand  types  for  binary  operator  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	90	None	replace
434	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
435	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
436	[BUG]  [BUGGY]  if(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
437	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  return  null;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	116	None	replace
438	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  unexpected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  unexpected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  unexpected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  unexpected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  unexpected	116	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  2;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
440	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  2;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  expected.length  -  3;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
442	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  3;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length  -  3;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  expected.length  -  4;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
444	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  4;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length  -  4;  i++)  {	  for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read  +  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
446	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  3;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read  +  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read  +  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
448	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  4;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read  +  4;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  *  2  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read  *  2  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
450	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  *  2  +  1;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  *  2  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read  *  2  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
451	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
453	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
454	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
455	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException( "	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
456	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException(  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException(  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned  if(expected[i]!=  realized[i])  {  throw  new  IOException(	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  not  a  statement	115	None	replace
457	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	4	None	replace
458	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(readable));  }  [CE]  cannot  find  symbol  readable  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(readable));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(readable));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  readable	4	None	replace
459	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	4	None	replace
460	[BUG]  [BUGGY]  InputStream  input  =  getNextArchiveEntryInput();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArchiveEntryInput();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArchiveEntryInput();	  InputStream    input    =    getNextArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
461	[BUG]  [BUGGY]  InputStream  input  =  this.getNextArEntryInput();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  this.getNextArEntryInput();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  this.getNextArEntryInput();	  InputStream    input    =    getNextArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
463	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
464	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length  +  4);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length  +  4);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length  +  4);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
465	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
466	[BUG]  [BUGGY]  [FE]  IOException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	114	2	replace
467	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	114	2	replace
468	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
469	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
470	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
471	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
472	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
474	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    (int  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  	non-compiled	[CE]  ')'  expected	69	None	add
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  Integer  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  Integer  i  =  0;  i  <  expected.length  +  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    Integer  i  =  0;  i  <  expected.length  +  offset;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	69	None	add
476	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
477	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  read;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  read;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    For(int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	40	None	replace
478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  read;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    For(int    i    =    0;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
479	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    For(int    i    =    0;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
480	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	42	1	replace
482	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	42	1	replace
483	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	42	None	replace
484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  read;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
485	[BUG]  [BUGGY]  for(int  i  =  read;  i  <  expected.length;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  read;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
486	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
487	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  real[i]  =  new  ByteArrayInputStream(read);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  real[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  real[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
488	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
489	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
490	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
491	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  expected);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  expected);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read,  expected);	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
492	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length  -  read;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    unexpected.length    -    read;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
493	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
494	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  int  cannot  be  dereferenced	123	None	replace
495	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
496	[BUG]  [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  for(int  i  =  read;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
497	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  realized.length;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  realized.length;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  realized.length;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
498	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
499	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	108	1	replace
500	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  AssertionFailedError  	108	1	replace
501	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	108	None	replace
502	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	108	None	replace
503	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	6	None	replace
504	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  incompatible  types	6	None	replace
505	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	6	None	replace
506	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  incompatible  types	6	None	replace
507	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
508	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
509	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
510	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
511	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read  *  2);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read  *  2);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read  *  2);  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
512	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
513	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
514	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1,  read;  i++)  {  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1,  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1,  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
515	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
516	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
517	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
518	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
519	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
520	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  int  cannot  be  dereferenced	57	None	replace
521	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	57	None	replace
522	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(InputStream.DEFAULT,  read);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(InputStream.DEFAULT,  read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(InputStream.DEFAULT,  read);	  InputStream    input    =    getNextArEntry(input,    read);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
523	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
524	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
525	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    (int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  ')'  expected	98	None	replace
526	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  (int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    (int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  ')'  expected	98	None	replace
527	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input,  offset);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(input,  offset);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(input,  offset);	  InputStream    input    =    getNextArEntry(offset,    read);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
528	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
529	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
530	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read.length);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
531	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected);  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
532	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
533	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
534	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
535	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
536	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  2;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
537	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  (int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  (int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    (int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  	non-compiled	[CE]  ')'  expected	99	None	add
538	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  3;  i++))  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  3;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  3;  i++))  {	  	non-compiled	[CE]  ')'  expected	99	None	add
539	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  	non-compiled	[CE]  ')'  expected	99	None	add
540	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
541	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	2	replace
542	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	2	replace
543	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    expected[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	85	None	replace
544	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	97	None	replace
545	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	97	None	replace
546	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
547	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
548	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  read.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  read.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  read.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
549	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	49	None	replace
550	[BUG]  [BUGGY]  long  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  long  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	long  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	49	None	replace
551	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
552	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
553	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
554	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  expected.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  expected.length);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read,  expected.length);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
555	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
556	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
557	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  Integer  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  Integer  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    Integer  i  =  0;  i  <  expected.length  +  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	67	None	add
558	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  (int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  (int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    (int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	67	None	add
559	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
560	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized;  i++)  {  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  realized;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	59	None	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  read  -  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
562	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read  -  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read  -  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  /  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
564	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  /  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  /  realized.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
565	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(read,  expected);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readInput(read,  expected);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(read,  expected);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
566	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
567	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
568	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
569	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  final  int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  final  int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  final  int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
570	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
571	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
572	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  unexpected.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  unexpected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  unexpected.length;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
573	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
574	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  anticipated.length  -  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  anticipated.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    for(int  i  =  0;  i  <  anticipated.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
575	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expecting.length  -  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expecting.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    for(int  i  =  0;  i  <  expecting.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
576	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  realized.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
577	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
578	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
579	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read,  expected.length);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
580	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
581	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read,  expected);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read,  expected);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read,  expected);  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
582	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expecting.length;  i++)  {  [CE]  cannot  find  symbol  expecting  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expecting.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expecting.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  expecting	72	None	replace
583	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
584	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [CE]  cannot  find  symbol  refigured  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(refigured));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  refigured	48	None	replace
585	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	109	None	replace
586	[BUG]  [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(expected!=  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	109	None	replace
587	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  expected);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
588	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read,  offset);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(read,  offset);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read,  offset);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
589	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected.length);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  expected.length);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  expected.length);  if(input!=  null)  {  throw  new  IOException( "invalid  header   "  +  input);  }	  InputStream    input    =    getNextArEntry(offset,    read);    if(input!=    null)    {    throw    new    IOException(   "invalid    header       "    +    input);    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
590	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  read  *  4;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
591	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read+1;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  read+1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  read+1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
592	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
593	[BUG]  [BUGGY]  For(int  i  =  read;  i  <  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  read;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  read;  i  <  realized.length;  i++)  {	  For(int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
594	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
595	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  *  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  *  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  *  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
596	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read  *  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
597	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read  *  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	2	replace
598	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  while(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  while(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    while(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
599	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  required.length;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len;  i++)  {  for(int  i  =  0,  len  =  required.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    for(int  i  =  0,  len  =  required.length;  i  <  len;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  read;  i  <  realized.length;  i++)  {	  for(int    i    =    1;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
601	[BUG]  [BUGGY]  for(int  i  =  read;  i  <  realized.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  read;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  read;  i  <  realized.length;  i++)  {	  for(int    i    =    1;    i    <    realized.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
602	[BUG]  [BUGGY]  InputStream  input  =  pInput.readFully();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readFully();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readFully();	  InputStream    input    =    pInput.readInput();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
603	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	2	replace
604	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  expected.length  +  read;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	2	replace
605	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	2	replace
606	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  expected.length;  i  <  len  +  1;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	2	replace
607	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  unexpected.length;  i  <  len;  i++)  {  [CE]  cannot  find  symbol  unexpected  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  unexpected.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  unexpected.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	17	None	replace
608	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(expected);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(expected);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(expected);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
609	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized.length));  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
610	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(read);	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
611	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	56	2	replace
612	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	56	2	replace
613	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	56	None	replace
614	[BUG]  [BUGGY]  int  i  =  input.length()  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  input.length()  -  2;  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  input.length()  -  2;	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
615	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(authorized);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(authorized);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(authorized);	  InputStream    input    =    getNextArEntry(input);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
616	[BUG]  [BUGGY]  InputStream  input  =  getNextArchiveEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArchiveEntry();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArchiveEntry();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
617	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(null);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(null);	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
618	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  cannot  find  symbol  filemode  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  cannot  find  symbol  filemode	119	None	replace
619	[BUG]  [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [CE]  cannot  find  symbol  filemode  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(filemode);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  cannot  find  symbol  filemode	119	None	replace
620	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected);  }  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  incompatible  types	119	None	replace
621	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String( "filemode ");  }  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String( "filemode ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String( "filemode ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  incompatible  types	119	None	replace
622	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
623	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read  =  read;  i++)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1,  read  =  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1,  read  =  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1,    read;    i++)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
624	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  final  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	final  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
625	[BUG]  [BUGGY]  for(int  i  =  0,  expected.length;  i  <  expected.length;  i++)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  expected.length;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  expected.length;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
626	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
627	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  (int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  (int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    (int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	27	None	add
628	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
629	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
630	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	105	None	add
631	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
632	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read  +  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  read  +  1)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  read  +  1)  {	  	non-compiled	[CE]  ';'  expected	105	None	add
633	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(length);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(length);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(length);	  InputStream    input    =    getNextArEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
634	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(new  String(read));  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(new  String(read));  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(new  String(read));	  InputStream    input    =    getNextArEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
635	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read  +  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  read  +  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
636	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read  +  realized.length;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read  +  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read  +  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	2	replace
637	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length  +  read;  i++)  {  [CE]  cannot  find  symbol  estimated  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  estimated.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  estimated.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  estimated	66	None	replace
638	[BUG]  [BUGGY]  long  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  long  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	long  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	55	None	replace
639	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	87	None	replace
640	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	87	None	replace
641	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  (int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  (int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    (int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  	non-compiled	[CE]  ')'  expected	80	None	add
642	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  4;  i++)  {	  	non-compiled	[CE]  ')'  expected	80	None	add
643	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  4;  i++))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  4;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    ((  int  i  =  0;  i  <  expected.length  -  4;  i++))  {	  	non-compiled	[CE]  ')'  expected	80	None	add
644	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
645	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  (int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  (int  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    (int  i  =  0;  i  <  expected.length  +  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	71	None	add
646	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
647	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  Integer  i  =  0;  i  <  expected.length  +  2;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  Integer  i  =  0;  i  <  expected.length  +  2;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    Integer  i  =  0;  i  <  expected.length  +  2;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	71	None	add
648	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    ArrayIndexOutOfBoundsException  pInput  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
649	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    ArrayIndexOutOfBoundsException  pIn  =  new  ArrayIndexOutOfBoundsException(read);	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
650	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
651	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
652	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
653	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
654	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  0;  i  <  expected.length  -  read;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	93	None	replace
655	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  incompatible  types	50	None	replace
656	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  incompatible  types	50	None	replace
657	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	43	None	replace
658	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  if(expected[i]!=  realized[i])  {  return  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    return    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
659	[BUG]  [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  null)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	86	None	replace
660	[BUG]  [BUGGY]  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  (int  i  =  0;  i  <  expected.length  +  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	(int  i  =  0;  i  <  expected.length  +  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    (int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
661	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
662	[BUG]  [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	109	None	replace
663	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    [Delete]    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	109	None	replace
664	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	99	None	add
665	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  victim  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  victim  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  victim  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	99	None	add
666	[BUG]  [BUGGY]  for(int  i  =  0,  realized.length;  i  <  realized.length;  i++)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  realized.length;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  realized.length;  i  <  realized.length;  i++)  {	  for(int    i    =    1;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
667	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
668	[BUG]  [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  null)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
669	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
670	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  (int  i  =  0;  i  <  expected.length  -  read;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    (int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  ')'  expected	64	None	replace
671	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  i  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
672	[BUG]  [BUGGY]  while(read  >=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  i  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  >=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  >=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( " ");  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
673	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  i  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  throw  new  IOException( "failed  to  read  header   "  +  new  String(realized));  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	120	None	replace
674	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  while(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  while(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    realized.length;    i++)    {    while(int  i  =  0;  i  <  expected.length  -  realized.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
675	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  projected.length  -  1;  i++)  {  [CE]  cannot  find  symbol  projected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  projected.length  -  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  projected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  projected	76	None	replace
676	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  realized;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  realized;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  realized;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    For(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
677	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(read);  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(read);  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
678	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(expected[i]);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(expected[i]);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(expected[i]);  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
679	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(realized);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(realized);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  warned[i]  =  new  String(realized);  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
680	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned[i]  =  new  String(expected[i]);  }  [CE]  cannot  find  symbol  warned  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned[i]  =  new  String(expected[i]);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned[i]  =  new  String(expected[i]);  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  warned	115	None	replace
681	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned[i]  =  new  String(expected[i]);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned[i]  =  new  String(expected[i]);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  warned[i]  =  new  String(expected[i]);  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    warned    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
682	[BUG]  [BUGGY]  [FE]  IOException  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	4	2	replace
683	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	4	2	replace
684	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(read));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(read));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	87	None	replace
685	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	57	None	replace
686	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read!=  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	57	None	replace
687	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	57	None	replace
688	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    >=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	57	None	replace
689	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	80	None	add
690	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  4;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	80	None	add
691	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
692	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    read    *    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  read  *  2;  i++)  {  warned  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	73	None	add
693	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  final  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	final  for(int  i  =  0;  i  <  expected.length  -  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
694	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	108	None	replace
695	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	123	None	replace
696	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  final  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	final  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    for(int    i    =    0;    i    <    realized.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
697	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  expected.length;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  expected.length;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  expected.length;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
698	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  offset;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  possible  loss  of  precision  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  offset;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  offset;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
699	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  offset;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  offset;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    read;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
700	[BUG]  [BUGGY]  int  i  =  realized.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  int  i  =  realized.length();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	int  i  =  realized.length();	  int    i    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
701	[BUG]  [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read!=  expected.length)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
702	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  realized.length;  ++i)  {  return  null;  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  realized.length;  ++i)  {  return  null;  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  realized.length;  ++i)  {  return  null;  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
703	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	122	None	replace
704	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	122	None	replace
705	[BUG]  [BUGGY]  if(read  ==  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  null)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   ",invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	122	None	replace
706	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(read,  realized);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(read,  realized);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(read,  realized);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
707	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(refigured);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(refigured);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(refigured);	  InputStream    input    =    getNextArEntry(read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
708	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	2	replace
709	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read  +  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	2	replace
710	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read);  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  '.class'  expected	96	None	replace
711	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  offset);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  offset);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(read,  offset);  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(read);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
712	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	27	None	add
713	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  victim  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  victim  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  victim  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	27	None	add
714	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    +    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  +  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
715	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    4;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  4;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
716	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  -  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
717	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  +  1;  i++))  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  +  1;  i++))  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ((  int  i  =  0;  i  <  expected.length  +  1;  i++))  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    ((    int    i    =    0;    i    <    expected.length    -    1;    i++))    {    	non-compiled	[CE]  ')'  expected	94	None	replace
718	[BUG]  [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  null)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  }	  for(int    i    =    0;    i    <    realized.length;    i++)    {    (int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	98	None	replace
719	[BUG]  [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  null)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  null)  {  for(int  i  =  0;  i  <  realized.length;  i++)  {	  for(int    i    =    0;    i    <    realized.length;    i++)    {    (int    i    =    0;    i    <    realized.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
720	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  else  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	114	None	replace
721	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
722	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [Delete]  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [Delete]  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  [Delete]  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
723	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    read;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  read;  i++)  {  own  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  not  a  statement	23	None	add
724	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  expected.length;  i++)  {  [CE]  cannot  find  symbol  start  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  start;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  start;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  start	1	None	replace
725	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
726	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  1;  i  <  expected.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
727	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  imagined.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  imagined.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  imagined.length;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
728	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  expecting.length;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0,  len  =  expecting.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0,  len  =  expecting.length;  i  <  len;  i++)  {	  For(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
729	[BUG]  [BUGGY]  [FE]  IOException  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	add	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	54	2	replace
730	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [FE]  IOException  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	54	2	replace
731	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  1;  i  <  realized.length;  i++)  {  for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    1;    i    <    realized.length;    i++)    {    for(int  i  =  1;  i  <  realized.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
732	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  while(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  while(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    while(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	105	None	add
733	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length,  read  +  1;  i++)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  read  +  1;  i++)  {  for(int  i  =  0;  i  <  expected.length,  read  +  1;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    read    +    1;    i++)    {    for(int  i  =  0;  i  <  expected.length,  read  +  1;  i++)  {	  	non-compiled	[CE]  ';'  expected	105	None	add
734	[BUG]  [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read!=  expected.length)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read!=  expected.length)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    1;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    for(int    i    =    1;    i    <    expected.length;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
735	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  needed.length;  i++)  {  [CE]  cannot  find  symbol  needed  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  needed.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  needed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    3;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  needed	100	None	replace
736	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
737	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    realized.length    -    1;    i++)    {    for(int  i  =  0;  i  <  realized.length  -  1;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
738	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(realized);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readInput(realized);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(realized);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
739	[BUG]  [BUGGY]  InputStream  input  =  pInput.readInput(filemode);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  pInput.readInput(filemode);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  pInput.readInput(filemode);	  InputStream    input    =    pInput.readInput(read);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
740	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    offset;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  offset;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
741	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    1;    i++)    {    if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
742	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    2;    i    <    expected.length;    i++)    {    for(int  i  =  2;  i  <  expected.length;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
743	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
744	[BUG]  [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected[i]);  }  [CE]  no  suitable  constructor  found  for  String(byte)  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected[i]);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	if(read  ==  0)  {  for(int  i  =  0;  i  <  expected.length;  ++i)  {  realized[i]  =  new  String(expected[i]);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    String(filemode);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  String(byte)	119	None	replace
745	[BUG]  [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	while(read  <  expected.length)  {  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  }	  for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    for(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    }    if    (expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  i	47	None	replace
746	[BUG]  [BUGGY]  InputStream  input  =  getNextInput();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextInput();  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextInput();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
747	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  while(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  while(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    -    offset;    i++)    {    while(int  i  =  0;  i  <  expected.length  -  offset;  i++)  {	  	non-compiled	[CE]  '.class'  expected	25	None	add
748	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read  ==  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read  ==  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  }  else  if(read  ==  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    }    if    (expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	56	None	replace
749	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  3;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
750	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  8;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  8;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  8;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
751	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  1,  read;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  For(int  i  =  0;  i  <  expected.length  +  1,  read;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	For(int  i  =  0;  i  <  expected.length  +  1,  read;  i++)  {	  For(int    i    =    0;    i    <    expected.length    +    read;    i++)    {    	non-compiled	[CE]  '.class'  expected	101	None	replace
752	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  realized.length);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  InputStream  input  =  getNextArEntry(offset,  read,  realized.length);  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	InputStream  input  =  getNextArEntry(offset,  read,  realized.length);	  InputStream    input    =    getNextArEntry(offset,    read);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
753	[BUG]  [BUGGY]  byte[]  expected  =  new  byte[read.length];  for(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  byte[]  expected  =  new  byte[read.length];  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	byte[]  expected  =  new  byte[read.length];  for(int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	5	None	replace
754	[BUG]  [BUGGY]  Integer  i  =  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  Integer  i  =  1;  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	Integer  i  =  1;	  for(int    i    =    1;    i    <    expected.length;    i++)    {    int    i    =    1;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
755	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  2;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
756	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  bytes.length;  i++)  {  [CE]  cannot  find  symbol  bytes  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  bytes.length;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length  +  bytes.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length    +    length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  bytes	104	None	replace
757	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  implemented[i]  =  new  ByteArrayInputStream(read);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  ++i)  {  implemented[i]  =  new  ByteArrayInputStream(read);  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0;  i  <  expected.length;  ++i)  {  implemented[i]  =  new  ByteArrayInputStream(read);  }	  if(read    ==    0)    {    for(int    i    =    0;    i    <    expected.length;    ++i)    {    realized[i]    =    new    ByteArrayInputStream(read);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
758	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  imagined.length;  i  <  len;  i++)  {  [CE]  cannot  find  symbol  imagined  [FE]    AssertionFailedError    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0,  len  =  imagined.length;  i  <  len;  i++)  {  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int  i  =  0,  len  =  imagined.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    expected.length;    i    <    len;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  imagined	17	None	replace
759	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }  [BUGGY]      if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	70	70	1	replace	for(int    i    =    0;    i    <    expected.length    +    3;    i++)    {    for(int  i  =  0;  i  <  expected.length  +  3;  i++)  {  }  if  (expected[i]!=  realized[i])  {  throw  new  IOException( ",invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
