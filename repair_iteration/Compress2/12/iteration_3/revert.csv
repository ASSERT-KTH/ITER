projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<imagined.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){For(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<read.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<implemented.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){For(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){For(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){For(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]>=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){For(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected[length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<imagined.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<saved.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expecting.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<unexpected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<saved.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){[Delete]if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){for(inti=1;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<realized.length;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<unexpected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<estimated.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length/read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read,expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read,expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(pInput,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=read.readInput(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(read,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(offset,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=filemode.readInput(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=this.pInput.readInput(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=reader.readInput(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(pInput,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+filemode;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){For(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){for(inti=0;i<realized.length+read;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}else{for(inti=0;i<realized.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){for(inti=0;i<realized.length+read;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){for(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){For(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){for(inti=0;i<expected.length-realized.length);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){for(inti=0;i<expected[length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){FOR(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read/2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+realized.length*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expecting.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){For(inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length-2;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length-2;i++){Iasiif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length-2;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){for(inti=2;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){For(inti=2;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){for(inti=2;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){inti=2;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){for(inti=2;i<expected.length;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){For(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){for(inti=0;i<expected.length+3;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<unexpected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){for(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){}elseif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){}elseif(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70because(read==0){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=0){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){for(inti=0;i<read.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){for(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){for(inti=0;i<expected.length+1;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){For(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}else{for(inti=0;i<expected.length+1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=0){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read==0){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70because(read==0){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read>=0){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==expected.length){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=expected.length;i<read.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=0){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70because(read==0){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read==0){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=realized.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expected.length;i<read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expected.length-1;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=assumed.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=realization.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader:"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){For(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length-4;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length-4;i++){Iasiif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length-4;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){For(inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-3;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-3;i++){Iasiif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-3;i++){}if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input,read,expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input,read,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(author,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input,read,expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length/2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){for(inti=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){For(inti=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){for(inti=0;i<expected.length+offset;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){inti=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}else{for(inti=0;i<expected.length+offset;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){for(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){For(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){for(inti=0;i<expected.length+2;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(pInput,offset,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){for(inti=1;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){For(inti=1;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){for(inti=1;i<realized.length;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){inti=1;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){for(inti=1;i<realized.length;i++){}if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<read.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<imagined.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<estimated.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==expected.length){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70because(read==0){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=0){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read==0){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<realized.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70finalinti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length/read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1,read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2,read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,realized;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){for(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){For(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){for(inti=0;i<expected.length-off;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){for(inti=0;i<expected.length-offset);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(refigured));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){finalinti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length/read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read,offset+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70because(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=0){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){realized[i]=newString(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){realized[i]=newString(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(pInput,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader}"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("failedtoreadheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader}");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader}"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){For(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected.length+read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected[length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected[i]+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70finalinti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]==realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,realized);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(pInput,read);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){InputStreaminput=getNextArEntry(offset,read);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70finalInputStreaminput=getNextArEntry(offset,read);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length-1;i++){((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){((finalinti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length/read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<imagined.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length-1;i++){((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){((finalinti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<implemented.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry().getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=this.getNextArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){For(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){for(inti=0;i<expected.length+4;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}else{for(inti=0;i<expected.length+4;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<unexpected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<read.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<imagined.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<estimated.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==expected.length){for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]>=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=filemode.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=this.pInput.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readFile();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readUTF();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readEnd();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(expected.length!=read){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(expected.length==read){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(expected.length!=read){for(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){for(inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){For(inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){for(inti=0;i>=realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){(inti=0;i<realized.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=realized.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){for(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){For(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){FOR(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){for(inti=1;i<expected.length-1);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){finalinti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=read;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=expected.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=read.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=input.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=input.length()+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=input.length()+read;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){For(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){for(inti=0;i<expected[i]+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){for(inti=0;i<expected[i+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<unexpected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-6;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-5;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<saved.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=realization.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=assumed.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){For(inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i<realized.length-read);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i>=realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){(inti=0;i<realized.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){}elseif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected[length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=2;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=1;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=read;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput(),read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput(offset,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntryInput()+read;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<unexpected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){for(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){For(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){for(inti=0,len=expected.length;i<len);i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){for(inti=0,len=expected.length;i<Len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){FOR(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70longi=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=0){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<unexpected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read*2+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){for(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){for(inti=0;i<expected.length+read;i++){warnedif(expected[i]!=realized[i]){thrownewIOException(
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(readable));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArchiveEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=this.getNextArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read);for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read,expected.length);for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read,expected.length+4);for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read.length);for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length+read;i++){for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized.length));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(refigured));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){ArrayIndexOutOfBoundsExceptionpInput=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){(inti=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){Integeri=0;i<expected.length+offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){ArrayIndexOutOfBoundsExceptionpIn=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=read;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length;++i){realized[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){real[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized.length));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(refigured));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){AssertionFailedErrorpInput=newAssertionFailedError(read,expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length;i++){for(inti=0;i<realized.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){for(inti=read;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=realized.length;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length-read;i++){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=1;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read);for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read,expected.length);for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read.length);for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){ArrayIndexOutOfBoundsExceptionex=newArrayIndexOutOfBoundsException(read,expected.length);for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read*2);for(inti=0;i<expected.length+read*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1,read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){((inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){((inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){((inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length-1;i++){for(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length-1;i++){for(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(InputStream.DEFAULT,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read;i++){(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(input,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read);for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read,expected.length);for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read.length);for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read,expected);for(inti=0;i<realized.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){((inti=0;i<expected.length-2;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){((inti=0;i<expected.length-2;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){((inti=0;i<expected.length-2;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){(inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){((inti=0;i<expected.length-3;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){((inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){if(expected[i]!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]>=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<read.length;i++){inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70longi=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read,expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){ArrayIndexOutOfBoundsExceptionpInput=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){Integeri=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){(inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){ArrayIndexOutOfBoundsExceptionpIn=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length/realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(read,expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read;i++){inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length;i++){inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){finalinti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expected.length+read;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expected.length;i<len+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=unexpected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){for(inti=0;i<anticipated.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){for(inti=0;i<expecting.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){for(inti=0;i<expected.length+realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){ArrayIndexOutOfBoundsExceptionpInput=newArrayIndexOutOfBoundsException(read,expected.length);for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read);for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read,expected.length);for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){ArrayIndexOutOfBoundsExceptionpInput=newArrayIndexOutOfBoundsException(read);for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){ArrayIndexOutOfBoundsExceptionpInput=newArrayIndexOutOfBoundsException(read,expected);for(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expecting.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(refigured));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(expected!=null){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,expected);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read,offset);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,expected.length);if(input!=null){thrownewIOException("invalidheader"+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+read*4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=read;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length*2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){while(inti=0,len=expected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len;i++){for(inti=0,len=required.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=read;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readFully();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length+read;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=expected.length;i<len+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=unexpected.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized.length));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=input.length()-2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(authorized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArchiveEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(null);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){for(inti=0;i<expected.length;++i){realized[i]=newString(filemode);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString(expected);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString("filemode");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1,read=read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70finalfor(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,expected.length;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){(inti=0;i<expected.length-2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){((inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected.length-read+1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(newString(read));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read+realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<estimated.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70longi=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){(inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){((inti=0;i<expected.length-4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){((inti=0;i<expected.length-4;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length+4;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){(inti=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){ArrayIndexOutOfBoundsExceptione=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){Integeri=0;i<expected.length+2;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){ArrayIndexOutOfBoundsExceptionpInput=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){ArrayIndexOutOfBoundsExceptionpIn=newArrayIndexOutOfBoundsException(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=0;i<expected.length-read;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){if(expected[i]==realized[i]){returnnewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){returnnewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<read.length;i++){if(expected[i]!=realized[i]){returnnewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=null){for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70(inti=0;i<expected.length+read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==null){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-3;i++){ownif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-3;i++){for(inti=0;i<expected.length-3;i++){victimif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,realized.length;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){((inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==null){for(inti=0;i<expected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){((inti=0;i<expected.length+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){(inti=0;i<expected.length-read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read>=expected.length){for(inti=0;i<expected.length;++i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){thrownewIOException("failedtoreadheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-realized.length;i++){while(inti=0;i<expected.length-realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<projected.length-1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-realized;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){warned[i]=newString(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){warned[i]=newString(expected[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){warned[i]=newString(realized);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length+read;i++){warned[i]=newString(expected[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){warned[i]=newString(expected[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=0;i<expected.length+1;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length-1;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(read!=expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length-4;i++){ownif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-4;i++){for(inti=0;i<expected.length-4;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){for(inti=0;i<expected.length+read*2;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read*2;i++){for(inti=0;i<expected.length+read*2;i++){warnedif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70finalfor(inti=0;i<expected.length-read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70finalfor(inti=0;i<expected.length;i++){}elseif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=expected.length;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=offset;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=offset;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70inti=realized.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read!=expected.length){for(inti=0;i<expected.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<realized.length;++i){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=1;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=1;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==null){for(inti=1;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(read,realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(refigured);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){AssertionFailedErrorpInput=newAssertionFailedError(read,offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length-2;i++){ownif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-2;i++){for(inti=0;i<expected.length-2;i++){victimif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length+read;i++){for(inti=0;i<realized.length+read;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+4;i++){for(inti=0;i<expected.length+4;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){((inti=0;i<expected.length-1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length;i++){((inti=0;i<expected.length+1;i++)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==null){for(inti=0;i<realized.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==null){for(inti=0;i<realized.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+read;i++){}elseif(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i<realized.length-read;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i<realized.length-read;i++){[Delete]if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-read;i++){for(inti=0;i<realized.length-read;i++){ownif(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=start;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){for(inti=1;i<expected.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<expected.length-1;i++){for(inti=1;i<expected.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=imagined.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0,len=expecting.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-1;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=1;i<realized.length;i++){for(inti=1;i<realized.length;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){while(inti=0;i<expected.length-read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-read+1;i++){for(inti=0;i<expected.length,read+1;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read!=expected.length){for(inti=1;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<needed.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){for(inti=0;i<realized.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<realized.length-1;i++){for(inti=0;i<realized.length-1;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=pInput.readInput(filemode);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+offset;i++){for(inti=0;i<expected.length+offset;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+1;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=2;i<expected.length;i++){for(inti=2;i<expected.length;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){realized[i]=newString(expected);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70if(read==0){for(inti=0;i<expected.length;++i){realized[i]=newString(expected[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70while(read<expected.length){for(inti=0;i<expected.length+read;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length-offset;i++){while(inti=0;i<expected.length-offset;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;i++){}elseif(read==expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+3;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+8;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70For(inti=0;i<expected.length+1,read;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70InputStreaminput=getNextArEntry(offset,read,realized.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70byte[]expected=newbyte[read.length];for(inti=1;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70Integeri=1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+2;i++){for(inti=0;i<expected.length+2;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+bytes.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length;++i){implemented[i]=newByteArrayInputStream(read);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0,len=imagined.length;i<len;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java70for(inti=0;i<expected.length+3;i++){for(inti=0;i<expected.length+3;i++){}if(expected[i]!=realized[i]){thrownewIOException(",invalidheader"+newString(realized));}
