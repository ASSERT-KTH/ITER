projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50super(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50super(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50super(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50super(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+getOffset(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput)+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input!=null){input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+offset.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()+offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length()*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInput(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+3;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,offset+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<pInput.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).close();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=0;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length+offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=input;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=input;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=input;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,pInput,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,offset,pInput,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,pInput,0,input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,offset,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+UUID.randomUUID();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input,closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<off;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<0;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50newArArchiveInputStream(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,0,input,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(this.offset,pInput,this.offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(this.offset,input,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,0,this.offset,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){input=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){input=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput==null){input=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){super(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){super(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreamin=pInput.getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){output.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.readLine();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreamin=pInput.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readFully();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed||pInput!=null;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50(1<<((ArArchiveInputStream)pInput).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed||pInput==null;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed="";
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed:false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Integer.toString(pInput.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+output.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+input.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,input,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,0,input,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,pInput,0,input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,pInput,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,pInput,0,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+getOffset(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(offset>=offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(Offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(!closed){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(open==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+3;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length/2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length*4;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+offset*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length*2+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length*3;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length-2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input!=null){for(intoffset=0;offset<offset;offset++){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(offset==input){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){if(offset==in.readLine()){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(offset==input){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset==input){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input!=null){for(intoffset=0;offset<offset;offset++){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.openInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).close();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.getInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/offset.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset*pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length/offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input/pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output/pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.open();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.write(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){output.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,offset+offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off+pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.length()*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,input.length+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setInputStream(newArArchiveInputStream(offset,input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length*offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()-offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()*offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()/offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length+input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+4;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+input.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.getOffset();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.getCharacterIndex();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()/offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset*input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length()/offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/input.length()+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){output.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(input,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+getOffset(offset,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput,close);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setInputStream(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,offset,pInput,0,pInput.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,offset,pInput,0,input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,pInput,0,input.length-1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,input,0,pInput.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,pInput,0,input.length+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+4;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.openStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){output.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length()+1;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+offset.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-pInput.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.getChars();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.getLength()-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.getOffset()-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-input.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input*pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+input.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()+offset-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=false;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=false;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,output+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(input,output+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+1;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=0;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.inputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput+offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput.getRawOffset());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput.getRawClass());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){InputStreaminput=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput==null){InputStreaminput=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50finalInputStreaminput=newArArchiveInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readFully();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readInt();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){output.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+output.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+offset-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length-1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+pInput;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(input,pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,null);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=pInput;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,offset);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,input+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input/pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset*pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput/offset.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset*pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()/pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input/pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input*pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=false;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=false;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readFully();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+offset+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){this.input=newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=newArArchiveInputStream(input);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=newArArchiveInputStream(input);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.open();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.write(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input!=null){super(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setArchiveInputStream(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){output.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.readLine();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readFully();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.addAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=true;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=false;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=false;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,this.offset,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,offset,this.offset,pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,this.offset,input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.randomUUID();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.randomUUID();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+UUID.randomUUID();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+UUID.randomUUID()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50newArArchiveInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50newArArchiveInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(input,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+getOffset(input,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(pInput,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+output.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input!=null){input=newArArchiveInputStream(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input==null){input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||closed){input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||input!=null){input=newArArchiveInputStream(input,closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50&&input!=null){input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){setInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input>=null){setInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInputStream(pInput);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInputStream(pInput);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=false;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=pInput.read();closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/3;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+3;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,off+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+this.offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,this.offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,offset+this.offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+this.offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInput(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){setInput(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInput(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}else{System.arraycopy(input,offset,pInput,0,input.length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50finalInputStreaminput=newArArchiveInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArInputStream(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(pInput,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(pInput+offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,off+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,offset+in.readLine()));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,buffer.length+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,this.input.length+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(Offset.MAX_VALUE,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setInputStream(newArArchiveInputStream(offset,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.offset;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.offset;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.offset;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(input,offset+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,offset+1));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(input,offset+1));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,pInput+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(pInput,offset+1));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(offset,pInput.length+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<1;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=input;closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){this.input=input;closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=input;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=pInput;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){this.input=input;closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=input;closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){input=newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).flush();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).start();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closeEnd();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).init();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closeAnswer();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closeReadOnly();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length+offset+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length()/2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length()*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length()/2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.length()*4;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length()*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()-pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input-pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length()-offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getOffset(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getLowerCase(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+input.getOffset(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getEndOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=0L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Integer.MAX_VALUE;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=System.currentTimeMillis();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Integer.MIN_VALUE;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Integer.parseInt(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50(1<<((ArArchiveInputStream)input).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)i).closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).closed:false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pIn).closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50finalInputStreaminput=newArArchiveInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(input);}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(input);}else{System.arraycopy(pInput,0,input,0,input.length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(input);}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){if(!closed){input.close();}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){if(closed){input.close();}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=true;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(pInput);closed=false;}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{thrownewIllegalArgumentException("".getMessage());}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getRawOffset();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getLength()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-getOffset(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Integer.parseInt(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Integer.toHexString(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(!closed){input.open();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(input,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(input,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(input,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=pInput;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=pInput;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=null;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=this.arArchiveInputStream;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=null;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=false;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+length*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=false;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=false;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{input=pInput.read();closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.addAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){output.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50Inputinput=newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.getOutputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.getRawInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.getInputStream(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50finalInputStreaminput=pInput.getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+offset.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){InputStreaminput=newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50finalInputStreaminput=newArArchiveInputStream(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){output.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=input;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/4;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off+pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.length*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){input.open();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input.length;offset++){if(!closed){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-offset.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length-offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input-pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output-pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){output.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+1);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length+input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(pInput)+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput)/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(input)+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput)+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput)+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+getOffset(offset)+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.pInput=pInput;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.pInput=pInput;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.pInput=input;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){output.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=this.input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);}else{System.arraycopy(pInput,0,input,0,input.length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=newArArchiveInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.offset;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.open();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.write(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(offset>=offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(Offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(inti=0;i<input.length;++i){if(!closed){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<offset;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<offset;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<input;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<offset;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(offset==input){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){if(offset==in.readLine()){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset==input){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){if(offset==input){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length();offset++){if(offset==in.readLine()){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+offset.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-pInput.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<off;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<off;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<off;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<off+1;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<off;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50||pInput!=null){for(intoffset=0;offset<len;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=this.arArchiveInputStream;closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=newArArchiveInputStream();closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<off;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length/offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset*input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/input.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length/offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=length/input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+2L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){output.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT)+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(InputStream.DEFAULT);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT-1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT)-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT,input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length-getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input-getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput-getOffset(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output-getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-input.getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50Inputinput=newArArchiveInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=newArArchiveInputStream(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=newArArchiveInputStream(input);}else{System.arraycopy(pInput,0,input,0,input.length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(pInput,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=newArArchiveInputStream(input);}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+output.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(pInput-1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.offset+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset+1L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset),closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+off));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=in.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length+1;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0L;offset<this.input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.readLine();offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<out.readLine();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset==output){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset>=input){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output;offset++){if(offset==input){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<long;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setInput(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getOffset(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getOffset();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.size();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+open));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=input;closed=true;}else{System.arraycopy(pInput,offset,this.arArchiveInputStream,pInput);closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=input;closed=true;}else{System.arraycopy(pInput,offset,this.arArchiveInputStream,pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.size();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+open));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<out.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.output.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)output).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ARArchiveInputStream)input).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).closed="";
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){super(input);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.addAnswer(newArArchiveInputStream(offset,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setInput(newArArchiveInputStream(offset,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length-pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset==output){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset>=input){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(offset==output){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){if(offset>=input){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<long;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(inti=0;i<input.length;++i){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<width;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<long;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){input=newArArchiveInputStream(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(pInput,closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off+input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=pInput.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<pInput.length;offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{thrownewIllegalArgumentException("".);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(input.getInputStream());}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(input.getInput());}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(input.getRawClass());}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(input.getValue());}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(input.getRawOffset());}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,input+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<pInput;offset++){input.setAnswer(newArArchiveInputStream(offset,pInput+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.readLine();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=pInput.getAsk();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=newARArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset-getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pIn).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ARArchiveInputStream)pInput).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveOutputStream)pInput).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/UUID.randomUUID();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getUUID();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input>=null){setInput(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInput(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Offset.maximum(Integer.MAX_VALUE);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=OffsetUtils.currentOffset();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,this.offset,input,this.offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=pInput.closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=pOutput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(output,output+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<out.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input/1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length();offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<out.length();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length();offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=open+getOffset(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=closed+getOffset(pInput,offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+getOffset(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.size();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,this.offset+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,open+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,output+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,openOffset+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<off;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<off;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<out;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<len;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<init;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.getLength()/pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(!closed){setInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInputStream(pInput);closed=true;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50setInputStream(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<output.length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,output+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+open));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.getOffset();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off+input.getCharacterEncoding();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(input,pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this(pInput,input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this(input,pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50AnnotatedArArchiveInputStreaminput=newArArchiveInputStream(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(closed){newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){newArArchiveInputStream(input);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).setAnswer(newArArchiveInputStream(offset,offset+1));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).setAnswer(newArArchiveInputStream(output,offset+offset));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{input=pInput.closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set+offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length()+pInput;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT-1,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output/pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).start(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<long;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,off+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<width;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(InputStream.DEFAULT,pInput,0,input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArDirInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=newArInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArDirInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=0;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput-offset.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArRawInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArPaddingInputStream(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=in.readLine();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readInt();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0L;offset<in.readLine();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0L;offset<this.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=this.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{thrownewIllegalStateException("".);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput+input.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{thrownewIllegalStateException("".);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length*pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset>=this.offset;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0L;offset<this.offset;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffsetFromBuffer(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=start+getOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+buffer.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-getOffset(input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+input.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getEnd();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).start(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+pInput.getOffset();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+offset.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(InputStream.DEFAULT,input,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,pInput,this.offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,pInput,this.offset,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readFully();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,out.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readInt();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+in.readInt()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this(pInput);closed=true;}else{input=newArArchiveInputStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this(pInput);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+getOffset().getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getOffset(pInput)+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(inti=0;i<input.length;++i){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(inti=0;i<input.length;++i){if(offset>=offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){input=newArArchiveInputStream(input,closed);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,start,pInput,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{thrownewIllegalArgumentException("".);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){InputStreaminput=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50AnnotatedArArchiveInputStreaminput=newArArchiveInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+0L;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,open+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,pInput,0,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input*pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=0;closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length+1;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){super(pInput);closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){super(pInput);closed=false;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50pInput=newArArchiveInputStream(pInput);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<length;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<length;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output+getOffset(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length/pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.length()+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+length));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+this.offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoff=0;offset<in.readLine();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=1;offset<in.readLine();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set+offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50input=newArArchiveInputStream(pInput.getEncoding());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.input=newArArchiveInputStream(input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(closed){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=length-pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=pInput.length-offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<pInput.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<pInput.length;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setInput(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50AnnotatedArArchiveInputStreaminput=newArArchiveInputStream(input);closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length();offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+this.offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+offset.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.offset/pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)input).startsWith(pInput);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.available();offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50InputStreaminput=in.readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+closed));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input,closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset%2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset/pInput.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length/pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length+1;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){if(!closed){input.open();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getRawOffset();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<data.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(intoffset=0;offset<offset;offset++){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){if(offset==offset){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length();offset++){if(offset==in.read()){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.read();offset++){if(offset==in.read()){closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this(pInput,offset,input);closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+this.offset.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(this.input!=null){for(intoffset=0;offset<this.input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(this.input!=null){for(intoffset=0;offset<input.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(this.input!=null){for(intoffset=0;offset<this.input.length;offset++){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<off;offset++){if(!closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<off+1;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<on;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.closed=true;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off+pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(intoffset=0;offset<offset;offset++){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input;offset++){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<set;offset++){if(offset==offset){closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+input.getStartOffset(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=off+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-getOffset(InputStream.DEFAULT);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1,input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.available();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+input);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInput(pInput);closed=true;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset-=pInput;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(pInput);closed=true;}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.offset;offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.getOffset();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.offset;offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closeReadIO();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closeAllArchives();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+UUID.toString();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+UUID.toHexString();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed?true:null;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveInputStream)pInput).closed?false:false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length();offset++){if(!closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length();offset++){if(closed){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset-getOffset(pInput,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.length+pInput.length+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(!closed){input=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input>=null){input=newArArchiveInputStream(pInput);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(pInput);closed=true;}else{init();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+closed));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+open));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input*offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input+offset).start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.length*2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput)-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(pInput)+3;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(pInput);closed=true;}else{input=pInput.openStream();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<set;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){inputStream.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.size();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+closed));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,0,input,0,input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input+pInput.length-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readLine();offset++){input.setAnswer(newArArchiveInputStream(offset,offset*in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.readInt();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+in.readLine()));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length+offset;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.length;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=input;closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(this.input,0,input,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,pInput,this.offset,input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,this.offset,input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(!closed){newArArchiveInputStream(input);closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(closed){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Offset.max(Integer.MAX_VALUE);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Offset.max(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=Offset.max(input.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output*offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,output+1));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+1));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+1+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,this.input.length+11));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){super(pInput);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){super(input);closed=true;}else{input=pInput;closed=false;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=input.position-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=length-pInput.getLength();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<offset;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,buffer,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,offset,this.pInput,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){super(input);closed=true;}else{thrownewIllegalStateException(""));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+pInput.getLines();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length+1;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(!closed){this.input=input;closed=true;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){this.input=input;closed=true;}else{System.arraycopy(pInput,offset,this.input,0,input.length);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=offset+getOffset(InputStream.DEFAULT,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,this.offset+1));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset;offset++){input.setAnswer(newArArchiveInputStream(offset,length+this.offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<6;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<4;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<2;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.start();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(pInput!=null){for(intoffset=0;offset<input.length;offset++){if(closed){input.flush();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,0,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,this.input,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(input,0,this.input,0,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(this.input,pInput,this.offset,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50System.arraycopy(pInput,input,pInput,0,closed);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input==null){for(intoffset=0;offset<input.length();offset++){input.setAnswer(newArArchiveInputStream(offset,offset+1);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(closed){for(intoffset=0;offset<input;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+offset);}}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=output.length-pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50this.offset=length-pInput.length;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50((ArArchiveOutputStream)input).closed=false;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<this.offset+1;offset++){input.close();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){setInputStream(pInput);closed=true;}else{this.offset=offset;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){InputStreaminput=newArArchiveInputStream(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<in.length;offset++){input.setAnswer(newArArchiveInputStream(offset,offset+closed));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){input=newArArchiveInputStream(input);}else{input=newArArchiveInputStream(pInput);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+1+offset));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java50if(input!=null){for(intoffset=0;offset<input.length;offset++){input.setAnswer(newArArchiveInputStream(offset,input.length+1));}
