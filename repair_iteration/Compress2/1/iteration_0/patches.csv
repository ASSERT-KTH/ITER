bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this;  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  return  this;  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return  this;	return  null;  	non-compiled	[CE]  incompatible  types	1	None	replace
2	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( " ");	return  null;  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]      AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " ");	return  null;  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
4	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( " ");	return  null;  	compilable	  [FE]  IllegalStateException  	1	1	replace
5	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]        AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( " ");	return  null;  	compilable	  [FE]  IllegalStateException  	1	1	replace
6	[BUG]  [BUGGY]  [FE]  IOException  [FE]          AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( " ");  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( " ");	return  null;  	compilable	  [FE]  IOException  	1	1	replace
7	[BUG]  [BUGGY]  throw  new  IOException( " ");  [FE]  IOException  [FE]          AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( " ");  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( " ");	return  null;  	compilable	  [FE]  IOException  	1	1	replace
8	[BUG]  [BUGGY]  [FE]  IOException  [FE]            AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  input: "  +  input.toString());	return  null;  	compilable	  [FE]  IOException  	1	1	replace
9	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.toString());  [FE]  IOException  [FE]            AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.toString());	return  null;  	compilable	  [FE]  IOException  	1	1	replace
10	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getValue());  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getValue());	return  null;  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getBytes());  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getBytes());	return  null;  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
12	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]    [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	  	return  null;  	compilable	  [FE]  IOException  	1	1	replace
13	[BUG]  [BUGGY]    [FE]  IOException  [FE]                  AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]    [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	  	return  null;  	compilable	  [FE]  IOException  	1	1	replace
14	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getName());  [BUGGY]  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.getName());	return  null;  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
