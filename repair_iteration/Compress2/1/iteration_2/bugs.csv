bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getKey());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getKey());	  throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getValue());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getValue());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getValue());	  throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());	  throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
4	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getValue()));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getValue()));  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getValue()));	  throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getValue());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.getValue());	  throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  input: "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
7	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.available());  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
8	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  input: "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
9	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.available());  [FE]  IOException  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
10	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.length);  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.length);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
11	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Unexpected  input: "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
12	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.available());  [FE]  IOException  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
13	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(   "   ");  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    throw  new  IOException(   "   ");	  	non-compiled	[CE]  unreachable  statement	6	None	add
14	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throwables.throwable( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throwables.throwable( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throwables.throwable( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
15	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throwables.warning( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throwables.warning( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throwables.warning( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
16	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throw  new  IOException(   "   ");  [CE]  not  a  statement  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throw  new  IOException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throw  new  IOException(   "   ");	  	non-compiled	[CE]  not  a  statement	6	None	add
17	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throwables.log( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throwables.log( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throwables.log( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
18	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException( ",   ");  [CE]  unreachable  statement  [FE]              IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException( ",   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    throw  new  IOException( ",   ");	  	non-compiled	[CE]  unreachable  statement	6	None	add
19	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header: "  +  input.getName());	  throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
20	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getName());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getName());	  throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getName());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getName());	  throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  [FE]  IOException  [FE]              AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.getName());    	compilable	  [FE]  IOException  	14	1	replace
23	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.toString());  [FE]  IOException  [FE]              AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.getName());    	compilable	  [FE]  IOException  	14	1	replace
24	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  read();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();	      	compilable	  [FE]  IOException  	13	1	replace
25	[BUG]  [BUGGY]  read();  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  read();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();	      	compilable	  [FE]  IOException  	13	1	replace
26	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header "  +  new  String(realized));  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header "  +  new  String(realized));  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
33	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "Invalid  input: "  +  input.available());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
34	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.available());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
35	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
36	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
37	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]          IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.length);  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.length);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]      IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.available()));  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " ".equals(input.available()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	3	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
41	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	2	None	add
43	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException(   "   ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  <identifier>  expected	2	None	add
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  not  a  statement	2	None	add
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.showError( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.showError( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.showError( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	2	None	add
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throwable( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throwable( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throwable( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	2	None	add
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
50	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getMessage());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getMessage());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException(   "   ");	  	non-compiled	[CE]  unreachable  statement	4	None	add
52	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException(   "   ");  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    Throw  new  IllegalStateException(   "   ");	  	non-compiled	[CE]  not  a  statement	4	None	add
53	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throw  new  IllegalStateException(   "   ");  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.throw  new  IllegalStateException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    Throwables.throw  new  IllegalStateException(   "   ");	  	non-compiled	[CE]  <identifier>  expected	4	None	add
54	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.warning( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwables.warning( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    Throwables.warning( "   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	4	None	add
55	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [CE]  unreachable  statement  [FE]            IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( ",   ");	  	non-compiled	[CE]  unreachable  statement	4	None	add
56	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
58	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
60	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.available();  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]        AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input!=  null)?  null  :  input.available();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.available();	  return    this;    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	1	None	replace
61	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.toString();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input!=  null)?  null  :  input.toString();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.toString();	  return    this;    	non-compiled	[CE]  incompatible  types	1	None	replace
62	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.length;  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input!=  null)?  null  :  input.length;  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.length;	  return    this;    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
63	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.available();  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]              AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input  ==  null)?  null  :  input.available();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.available();	  return    this;    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	1	None	replace
64	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input!=  null)?  null  :  input.getValue();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.getValue();	  return    this;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
65	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.length;  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input  ==  null)?  null  :  input.length;  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.length;	  return    this;    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
66	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  throw  new  IOException( "Invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  throw  new  IOException( "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    throw  new  IOException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	8	None	add
67	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.throwAsIOException( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.throwAsIOException( "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    Throwables.throwAsIOException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	8	None	add
68	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.log( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.log( "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    Throwables.log( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	8	None	add
69	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throw  new  IOException( "Invalid  input:   "  +  input.toString());  [CE]  not  a  statement  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throw  new  IOException( "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    Throw  new  IOException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	8	None	add
70	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.warning( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.warning( "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    Throwables.warning( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	8	None	add
71	[BUG]  [BUGGY]      if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
72	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
74	[BUG]  [BUGGY]      filemode  =  input.read();  [CE]  cannot  find  symbol  filemode  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      filemode  =  input.read();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        filemode  =  input.read();	  	non-compiled	[CE]  cannot  find  symbol  filemode	12	None	add
75	[BUG]  [BUGGY]      pInput  =  input.getArEntry();  [CE]  cannot  find  symbol  pInput  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      pInput  =  input.getArEntry();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        pInput  =  input.getArEntry();	  	non-compiled	[CE]  cannot  find  symbol  pInput	12	None	add
76	[BUG]  [BUGGY]      pInput  =  input.read();  [CE]  cannot  find  symbol  pInput  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      pInput  =  input.read();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        pInput  =  input.read();	  	non-compiled	[CE]  cannot  find  symbol  pInput	12	None	add
77	[BUG]  [BUGGY]      filemode  =  input.read(filemode);  [CE]  cannot  find  symbol  filemode  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      filemode  =  input.read(filemode);  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        filemode  =  input.read(filemode);	  	non-compiled	[CE]  cannot  find  symbol  filemode	12	None	add
78	[BUG]  [BUGGY]      filemode  =  input.available();  [CE]  cannot  find  symbol  filemode  [FE]            IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      filemode  =  input.available();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        filemode  =  input.available();	  	non-compiled	[CE]  cannot  find  symbol  filemode	12	None	add
79	[BUG]  [BUGGY]      pInput.close();  [CE]  cannot  find  symbol  pInput  [FE]              IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      pInput.close();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        pInput.close();	  	non-compiled	[CE]  cannot  find  symbol  pInput	12	None	add
80	[BUG]  [BUGGY]      filemode  =  input.read();  offset  +=  input.length;  [CE]  cannot  find  symbol  filemode  [FE]                IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      filemode  =  input.read();  offset  +=  input.length;  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        filemode  =  input.read();  offset  +=  input.length;	  	non-compiled	[CE]  cannot  find  symbol  filemode	12	None	add
81	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getValue());  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getValue());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getValue());	  throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	10	None	replace
82	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.toString();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  return(input  ==  null)?  null  :  input.toString();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.toString();	  return    this;    	non-compiled	[CE]  incompatible  types	1	None	replace
83	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.throw  new  IOException( "Invalid  input:   "  +  input.toString());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  Throwables.throw  new  IOException( "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    Throwables.throw  new  IOException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	8	None	add
84	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  throw  new  IOException(   "Invalid  input:... "  +  input.toString());  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  throw  new  IOException(   "Invalid  input:... "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    throw  new  IOException(   "Invalid  input:... "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	8	None	add
85	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	2	None	add
86	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.toString());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
87	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getPath());  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getPath());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getPath());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
88	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getName());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
89	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getText());  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getText());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getText());	  throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
91	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throwables.throw  new  IOException(   "   ");  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throwables.throw  new  IOException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throwables.throw  new  IOException(   "   ");	  	non-compiled	[CE]  <identifier>  expected	6	None	add
92	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException('   ");  [CE]  unclosed  character  literal  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  throw  new  IOException('   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    throw  new  IOException('   ");	  	non-compiled	[CE]  unclosed  character  literal	6	None	add
93	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes());  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	11	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(' ");  [CE]  unclosed  character  literal  [FE]    IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException(' ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException(' ");	  	non-compiled	[CE]  unclosed  character  literal	4	None	add
95	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  header   "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
96	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.available());  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.available());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.available());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
97	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	2	None	add
98	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  t  =  input.read();  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  t  =  input.read();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  t  =  input.read();	  	non-compiled	[CE]  incompatible  types	2	None	add
99	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
100	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "invalid  input: "  +  input.toString());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
101	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.toString());  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.toString());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
102	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getName());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
103	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  header   "  +  input.toString());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
104	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.toString());  [FE]  IOException  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.toString());	  throw    new    IOException(   "   ");    	compilable	  [FE]  IOException  	7	1	replace
105	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.getName());	  throw    new    IOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
106	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.getBytes());	  throw    new    IOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
107	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header:   "  +  input.getName());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  Throw  new  IOException( "invalid  header:   "  +  input.getName());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header:   "  +  input.getName());	  throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  not  a  statement	14	None	replace
108	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throwable  t  =  input.read( "   ");  [CE]  no  suitable  method  found  for  read(String)  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throwable  t  =  input.read( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throwable  t  =  input.read( "   ");	  	non-compiled	[CE]  no  suitable  method  found  for  read(String)	6	None	add
109	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  Throwable  t  =  input.read();  [CE]  incompatible  types  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  Throwable  t  =  input.read();  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    Throwable  t  =  input.read();	  	non-compiled	[CE]  incompatible  types	6	None	add
110	[BUG]  [BUGGY]  throw  new  IOException(   "   ");  new  IOException(   "   ");  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "   ");  new  IOException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "   ");    new  IOException(   "   ");	  	non-compiled	[CE]  unreachable  statement	6	None	add
111	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
112	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
113	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
114	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
115	[BUG]  [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
116	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
117	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
118	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  offset.getBytes());  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  offset.getBytes());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input,  offset.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
119	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  if(   "Invalid  input:   "  +  input.toString());  [CE]  incompatible  types  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.toString());  if(   "Invalid  input:   "  +  input.toString());  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.toString());    if(   "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  incompatible  types	8	None	add
120	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException(   "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    new  IllegalStateException(   "   ");	  	non-compiled	[CE]  unreachable  statement	4	None	add
121	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  System.err.println( "   ");  [CE]  unreachable  statement  [FE]      IllegalStateException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]  throw  new  IllegalStateException(   "   ");  System.err.println( "   ");  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "   ");    System.err.println( "   ");	  	non-compiled	[CE]  unreachable  statement	4	None	add
122	[BUG]  [BUGGY]      if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {    [BUGGY]      if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]    }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	        if(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
